{"ParentUid":"GseLoEJGR","Uid":"GseLoEJGR","Data":"golang의 struct에서 멤버의 이름은 두개 이상 동시에 선언할 수 있다 #golang #TIL","Order":0,"IsRoot":true,"Children":[{"ParentUid":"GseLoEJGR","Uid":"pOUlD9gwS","Data":"```javascript\ntype foo struct {\n  bar, bar2 int\n}\n\nf := foo {\n  bar: 1,\n  bar2: 2,\n}```","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"GseLoEJGR","Uid":"8qPqzspPq","Data":"마치 함수 파라미터에서 두개 이상 받을 수 있는것 처럼","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"GseLoEJGR","Uid":"tZt0RxWo-","Data":"그래서인지 ast의 Field를 보면, Names가 list로 되어있음","Order":2,"IsRoot":false,"Children":[{"ParentUid":"tZt0RxWo-","Uid":"dFxKWJSiL","Data":"```javascript\n// A Field represents a Field declaration list in a struct type,\n// a method list in an interface type, or a parameter/result declaration\n// in a signature.\n// Field.Names is nil for unnamed parameters (parameter lists which only contain types)\n// and embedded struct fields. In the latter case, the field name is the type name.\n// Field.Names contains a single name \"type\" for elements of interface type lists.\n// Types belonging to the same type list share the same \"type\" identifier which also\n// records the position of that keyword.\n//\ntype Field struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tNames   []*Ident      // field/method/(type) parameter names, or type \"type\"; or nil\n\tType    Expr          // field/method/parameter type, type list type; or nil\n\tTag     *BasicLit     // field tag; or nil\n\tComment *CommentGroup // line comments; or nil\n}```","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":[],"CreateTime":"2022-02-22T00:29:38+09:00","EditTime":"1970-01-01T09:00:00+09:00"}