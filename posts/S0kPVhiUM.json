{"ParentUid":"S0kPVhiUM","Uid":"S0kPVhiUM","Data":"rust의 소유권 #TIL #rust","Order":0,"IsRoot":true,"Children":[{"ParentUid":"S0kPVhiUM","Uid":"hde-mx43_","Data":"기본","Order":0,"IsRoot":false,"Children":[{"ParentUid":"hde-mx43_","Uid":"KVM6HHYzh","Data":"rust에서 모든 변수는 owner를 가짐","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"hde-mx43_","Uid":"KBVke5AzI","Data":"owner는 하나의 스코프에서 하나만 생겨남","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"hde-mx43_","Uid":"p_lO_P7p8","Data":"pc가 스코프를 벗어나 기존의 owner가 버려질 때, 해당 owner를 가진 모든 변수는 drop함수를 실행하고, free됨","Order":2,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"S0kPVhiUM","Uid":"RcRMTEyHU","Data":"할당과 관련된 골치아픈 경우","Order":1,"IsRoot":false,"Children":[{"ParentUid":"RcRMTEyHU","Uid":"5r-h4-SSg","Data":"```rust\nlet x = String::from(\"hello\");\nlet y = x;```","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"RcRMTEyHU","Uid":"6Y7W_Co8j","Data":"이경우 x와 y는 두개의 변수이며, 같은 owner를 지니기 때문에 동시에 drop됨","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"RcRMTEyHU","Uid":"5B-7o-5Lw","Data":"그러나 x와 y는 동일한 힙의 데이터를 바라보고 있기 때문에, 두번 drop되면 안됨","Order":2,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"RcRMTEyHU","Uid":"1xKtTm5f1","Data":"**따라서 rust에서는 변수(x)가 복사되는 순간 기존의 변수(x)는 무효화 시킴**","Order":3,"IsRoot":false,"Children":[{"ParentUid":"1xKtTm5f1","Uid":"-BmoQs4UE","Data":"이를 이동(move)라고 표현함","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"1xKtTm5f1","Uid":"DWyYbhjxz","Data":"rust에서는 명시적으로 사용하지 않는한 모든 변수를 shallow copy함","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"RcRMTEyHU","Uid":"apx3ozoRm","Data":"만에하나 아래처럼 이동된 변수를 사용한다면 에러가 발생함","Order":4,"IsRoot":false,"Children":[{"ParentUid":"apx3ozoRm","Uid":"ycD24JiI8","Data":"```rust\nlet x = String::from(\"hello\");\nlet y = x;\n\nprintln!(x);\nerror[E0382]: use of moved value: `s1`\n --\u003e src/main.rs:4:27\n  |\n3 |     let y = x;\n  |         -- value moved here\n4 |     println!(x);\n  |              ^^ value used here after move\n  |\n  = note: move occurs because `x` has type `std::string::String`,\nwhich does not implement the `Copy` trait```","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"RcRMTEyHU","Uid":"hUM-cNJk0","Data":"단 i32처럼 스택에 들어갈 수 있는 것들은 move되지 않고 copy됨","Order":5,"IsRoot":false,"Children":[{"ParentUid":"hUM-cNJk0","Uid":"QMWxrENFy","Data":"이는 copy 트레잇으로 구분됨","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"hUM-cNJk0","Uid":"rEWXkGM_V","Data":"copy와 drop 트레잇이 동시에 구현되어 있다면 또한 오류","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"S0kPVhiUM","Uid":"syzUPwk3R","Data":"함수 호출과 관련된 골치 아픈 경우","Order":2,"IsRoot":false,"Children":[{"ParentUid":"syzUPwk3R","Uid":"zewQEJBFV","Data":"```rust\nlet x = String::from(\"hello\")\nsample(x); // x가 파라미터 s로 move됨\nprintln!(x); // 소유권이 종료되었기 때문에 사용 불가\n\nfn sample(s:: String) { \n  println!(s);\n} // s의 소유권 종료. s의 drop 호출```","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"syzUPwk3R","Uid":"aKvwRyB4A","Data":"맙소사 함수를 호출하면서 파라미터에 변수가 복사되었고, 이는 이후에 사용 불가함","Order":1,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"syzUPwk3R","Uid":"b8hSzpUVq","Data":"이를 해결하기 위해서는 두가지로 보이는데","Order":2,"IsRoot":false,"Children":[{"ParentUid":"b8hSzpUVq","Uid":"ANhtsurTT","Data":"1. \u0026연산자를 사용해서 pointer를 넘겨줌","Order":0,"IsRoot":false,"Children":[{"ParentUid":"ANhtsurTT","Uid":"zI7zDX-l2","Data":"포인터는 값에 대한 소유권이 없다","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"},{"ParentUid":"b8hSzpUVq","Uid":"kiHuWQQIZ","Data":"2. 함수가 다시 변수를 반환해서 동일한 값에 저장","Order":1,"IsRoot":false,"Children":[{"ParentUid":"kiHuWQQIZ","Uid":"-a4ozcBX0","Data":"변수가 반환되면, 이는 일종의 move로 drop되지 않는다","Order":0,"IsRoot":false,"Children":[],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":null,"CreateTime":"1970-01-01T09:00:00+09:00","EditTime":"1970-01-01T09:00:00+09:00"}],"Images":[],"CreateTime":"2022-03-29T22:12:22+09:00","EditTime":"1970-01-01T09:00:00+09:00"}