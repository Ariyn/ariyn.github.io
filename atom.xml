<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>this.isMin.uk</title>
    <description>Minimalistic Hugo blogging theme</description>
    <link>https://ariyn.github.io/</link>
    
    <language>en</language>
    <copyright>Copyright 2022, Ronalds Vilcins</copyright>
    <lastBuildDate>Mon, 24 Oct 2022 00:00:00 +0000</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="https://ronaldsvilcins.com/atom.xml" rel="self" type="application/atom+xml"/>
    
    <item>
      <title>sed에서 파일을 수정할 경우 `-i` 옵션을 붙여줘야 한다.</title>
      <link>https://ariyn.github.io/posts/clcbfob1c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript\n    sed -i &#39;s/aaa/bbb/g&#39; test.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;아닌경우 stdout에 출력한다&lt;/li&gt;
&lt;li&gt;커맨드의 이름에서 알수 있는데, sed는 &lt;code&gt;Stream Editor&lt;/code&gt;의 약자이다
&lt;ul&gt;
&lt;li&gt;아마도 pipe를 통해서 출력물의 결과를 바꾸는 것이 최초의 사용법이였던듯&lt;/li&gt;
&lt;li&gt;물론 이제와서 pipe를 통한 변경은 awk나 python으로 직접 작성하는게 훨씬 편하지만&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/clcbfob1c/</guid>
      <pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>auto load를 적용한 스크립트는 _ready 이후에서만 인식된다</title>
      <link>https://ariyn.github.io/posts/8kd_rq31s/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;vt01h5M2Z&#34;&gt;export로 설정한 변수는 ready이전에는 null로 초기화되어 있다. #godot #TIL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;이 내용과 동일함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 사용하려면 _ready 내부에서 사용해야 한다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript\n    class X:\n    	var other: other.Class;\n    \n    	func _init(name):\n    		self.other = other.Class.new()\n    \n    		._init();\n    \n    var x = X.new() # 아직 autoload가 되지 않았기 때문에, _init함수가 실패한다.\n    \n    func _ready():\n      var x = X.new() # autoload되었기 때문에, 문제없이 동작한다.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/8kd_rq31s/</guid>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>export로 설정한 변수는 ready이전에는 null로 초기화되어 있다.</title>
      <link>https://ariyn.github.io/posts/vt01h5m2z/</link>
      <description>&lt;ul&gt;
&lt;li&gt;export한 변수를 _ready가 아닌, 스크립트의 최상단에서 사용해보면, null로 나온다.&lt;/li&gt;
&lt;li&gt;따라서 이런 변수들은 _ready에서 사용해야 제대로 동작함&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/vt01h5m2z/</guid>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>godot script에서 변수를 export하는 방법</title>
      <link>https://ariyn.github.io/posts/czilir72l/</link>
      <description>&lt;ul&gt;
&lt;li&gt;일반적인 변수는 &lt;code&gt;var index;&lt;/code&gt;처럼 타입 없이 사용이 가능하다.
&lt;ul&gt;
&lt;li&gt;그러나 export하는 변수는 타입이 명확해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명시적 타입으로 export 하는 방법
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export var index = 1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export(int) var index;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/czilir72l/</guid>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>다익스트라 알고리즘은 20분만에 만들어진 알고리즘이다</title>
      <link>https://ariyn.github.io/posts/snekezy23/</link>
      <description>&lt;ul&gt;
&lt;li&gt;약혼녀가 쇼핑하는것을 기다리다가, 카페에서 만들었다고 한다. &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%81%AC%EC%8A%A4%ED%8A%B8%EB%9D%BC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98#%EC%97%AD%EC%82%AC&#34;&gt;출처&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;역시 카페는 무엇인가를 생각하기 좋은 곳인 것 같다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/snekezy23/</guid>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>고랭의 함수 콜을 정리하는 방법</title>
      <link>https://ariyn.github.io/posts/gutceotzk/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell\n    &amp;gt; callgraph -format digraph {package} &amp;gt; /tmp/package.di\n    \n    &amp;gt; cat /tmp/package.di | digraph nodes | grep {package} &amp;gt; /tmp/package_only.di\n    \n    &amp;gt; while read node; do\n    echo &amp;quot;{\&amp;quot;name\&amp;quot;: \&amp;quot;$node\&amp;quot;, \&amp;quot;calls\&amp;quot;: $(cat /tmp/package.di | digraph forward &amp;quot;$node&amp;quot; | jq -R | jq -s) }&amp;quot; &amp;gt;&amp;gt; /tmp/nodes.json;\n    done &amp;lt; /tmp/package_only.di&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gutceotzk/</guid>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>선언적 지식과 절차적 지식</title>
      <link>https://ariyn.github.io/posts/gypmvccah/</link>
      <description>&lt;ul&gt;
&lt;li&gt;선언적 지식
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A는 B이다&lt;/code&gt;와 같이 선언적인 문장으로 정리되는 지식&lt;/li&gt;
&lt;li&gt;단순 학습의 대부분의 목표가 되며, 암기와 이해로 습득된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;절차적 지식
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A를 하기 위해서는 B를 하고, C를 한다&lt;/code&gt;와 같이 절차적인 지식&lt;/li&gt;
&lt;li&gt;잘 숙달된 스킬과 같이, 개별적인 지식들&lt;/li&gt;
&lt;li&gt;동일한 선언적 지식을 가지고, 같은 경험을 같더라도 절차적 지식이 다를 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gypmvccah/</guid>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>CPU utilization - CPU 사용 시간</title>
      <link>https://ariyn.github.io/posts/bpxggzudw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/docs/en/linux-on-systems?topic=tests-understanding-cpu-utilization&#34;&gt;https://www.ibm.com/docs/en/linux-on-systems?topic=tests-understanding-cpu-utilization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/bpxggzudw/</guid>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>in memory cache를 사용할 때는 주의하자</title>
      <link>https://ariyn.github.io/posts/835gvfcrw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;in memory cache에 expiring date를 담아두고, 그때까지 캐시가 남아 있으면 삭제하는 로직이 있다.&lt;/li&gt;
&lt;li&gt;그런데 정상적으로 캐시된 date가 삭제 되었음에도 불구하고, 삭제 로직이 실행되는 케이스가 있었다.&lt;/li&gt;
&lt;li&gt;확인해보니, process가 2개 돌고 있었고, load balancing에 의해서 어느쪽이 실행될 지 모르는 상황.&lt;/li&gt;
&lt;li&gt;그래서 process 1에서 캐시되고, process 2에서 삭제 로직이 돌았다면, 서로 자신의 메모리만 참조하게 됨&amp;hellip;&lt;/li&gt;
&lt;li&gt;아이고 머리야&amp;hellip; 생각해보면 당연한 내용인데, 왜 일찍 깨닫지 못했을까 #생각 #개선 #[[할 것]]&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/835gvfcrw/</guid>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>남귤북지 南橘北枳</title>
      <link>https://ariyn.github.io/posts/rtcqggl4a/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dic.daum.net/word/view.do?wordid=hhw000004635&amp;amp;supid=hhu000004636&#34;&gt;橘&lt;/a&gt; 귤나무 귤&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dic.daum.net/word/view.do?wordid=hhw000004276&amp;amp;supid=hhu000004277&#34;&gt;枳&lt;/a&gt; 탱자나무 지&lt;/li&gt;
&lt;li&gt;회남에서 귤이 회북에서는 탱자가 된다
&lt;ul&gt;
&lt;li&gt;근묵자흑과 비슷한 말&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;강남의 귤이 강북의 탱자가 된다&lt;/code&gt;정도로는 자주 썼던것 같은데, 사자성어로 들으니까 신선하고 재밌다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rtcqggl4a/</guid>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>생존자 편향</title>
      <link>https://ariyn.github.io/posts/rcw2rz0sl/</link>
      <description>&lt;ul&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://www.dotomari.com/1316&#34;&gt;가&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@finn.the.engineer/invisible-bullet-marks-thinking-beyond-great-prof-abraham-wald-33092255a90&#34;&gt;나&lt;/a&gt;, &lt;a href=&#34;https://www.lovetips.co/a-serious-bombarded-aircraft-in-world-war-ii/&#34;&gt;다&lt;/a&gt;
2차 대전때 미국에서, &lt;code&gt;비행기가 총에 맞은 부위를 보강하는 연구&lt;/code&gt;가 있었다.
&lt;ul&gt;
&lt;li&gt;이때 &lt;code&gt;많이 맞은 부위를 보강&lt;/code&gt;해서, 비행기가 큰 문제가 없도록 하는게 목적이였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수학자였던 에이브러햄 왈드(Abrahan Wald)는 &lt;code&gt;피탄되지 않은 부분&lt;/code&gt;에 철갑을 두를것을 제안했다.
&lt;ul&gt;
&lt;li&gt;연구할 수 있었던 비행기들은 &lt;code&gt;살아서 돌아온 비행기&lt;/code&gt;뿐이였고, 실제로 추락한 비행기는 어떤지 연구가 불가능했다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;그 부위에 총을 맞았다면 추락했기 때문에, 살아 돌아온 비행기들은 맞지 않았던 것&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;애초에 편향된 데이터를 기반으로 했기 때문에, 잘못된 결과가 나올뻔한 이야기&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://people.ucsc.edu/~msmangel/Wald.pdf&#34;&gt;https://people.ucsc.edu/~msmangel/Wald.pdf&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;해당 논문은 &lt;code&gt;왈드의 업적을 수학적으로, 역사적으로 정리한 논문&lt;/code&gt;이라고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rcw2rz0sl/</guid>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>멘토는 오디세우스 신화에서 유래된 단어</title>
      <link>https://ariyn.github.io/posts/cs1t5ncej/</link>
      <description>&lt;ul&gt;
&lt;li&gt;오디세우스가 트로이 전쟁을 떠나면서, 아들을 친구에게 보살펴달라고 부탁했다.&lt;/li&gt;
&lt;li&gt;그 친구의 이름이 &amp;ldquo;멘토&amp;quot;였다.&lt;/li&gt;
&lt;li&gt;멘토는 오디세우스의 아들을 성심껏 도와주고, 가르치고, 친구가 되어주었다.&lt;/li&gt;
&lt;li&gt;이후 그의 행동에 멘토의 이름이 붙여진 듯&lt;/li&gt;
&lt;li&gt;출처 &lt;a href=&#34;https://mentor-ing.or.kr/?menuno=272&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;growthmentor.com/blog/origin-of-word-mentor/&#34;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/cs1t5ncej/</guid>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>오토바이의 클러치는 왼손 핸들에 있다</title>
      <link>https://ariyn.github.io/posts/jr7n-rwjg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;자전거로 생각했을때, 앞바퀴 브레이크가 있는 곳에&lt;/li&gt;
&lt;li&gt;뒷바퀴 브레이크는 오른발을 밟으면 동작한다고 한다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jr7n-rwjg/</guid>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>카사노바</title>
      <link>https://ariyn.github.io/posts/7udhvr5h_/</link>
      <description>&lt;ul&gt;
&lt;li&gt;자코모 카사노바
1725년 이탈리아 베니스에서 태어남&lt;/li&gt;
&lt;li&gt;총 122명의 여자들을 사귀었고, 아직까지 바람둥이의 대명사로 존재함&lt;/li&gt;
&lt;li&gt;그의 회고록은 **&lt;a href=&#34;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788990287601&#34;&gt;불멸의 유혹(카사노바 자서전)&lt;/a&gt;**로 나와있다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/7udhvr5h_/</guid>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>앤디 그로브는 인텔의 창립자는 아니지만, 창립 당일에 합류한(...) 사람이다.</title>
      <link>https://ariyn.github.io/posts/hced1ysrl/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이걸 창립자라고 불러야 하는건지, 초기 멤버라고 불러야 하는건지&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hced1ysrl/</guid>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Issue tree</title>
      <link>https://ariyn.github.io/posts/oaga2tdxd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;근본적인 질문에서 시작해서, 계속해서 질문을 하고 그에 대한 답을 적는 방법&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Issue_tree&#34;&gt;https://en.wikipedia.org/wiki/Issue_tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/oaga2tdxd/</guid>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>조작적 정의</title>
      <link>https://ariyn.github.io/posts/o3qnmcvep/</link>
      <description>&lt;ul&gt;
&lt;li&gt;Operational Definition&lt;/li&gt;
&lt;li&gt;사물이나 현상을 객관적이고 실험적으로 표현하기 위한 정의
&lt;ul&gt;
&lt;li&gt;즉 너무 많은것들이 &amp;ldquo;절대적 정의&amp;quot;를 잃어버렸기 때문에, &amp;ldquo;이 실험에서는 이것을 이렇게 정의한다&amp;quot;라고 하는 것인듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%A1%B0%EC%9E%91%EC%A0%81_%EC%A0%95%EC%9D%98&#34;&gt;https://ko.wikipedia.org/wiki/%EC%A1%B0%EC%9E%91%EC%A0%81_%EC%A0%95%EC%9D%98&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;지금 생각해보면, &amp;ldquo;이 실험에서 XX란 OO으로 정의한다&amp;quot;라는게 그렇게 이상하게 느껴지지 않는데, 당시에는 그렇지 않았나보다&amp;hellip;
1946년 노벨 물리학상을 받은 퍼시 윌리엄스가 만든 단어&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/o3qnmcvep/</guid>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Jenkins에서 ssh 접속시에 `Host Key Verification Failed`가 나오면, ssh-fingerprint가 known_hosts에 있는지 확인</title>
      <link>https://ariyn.github.io/posts/f2acvd0ts/</link>
      <description>&lt;ul&gt;
&lt;li&gt;젠킨스는 별도의 유저(jenkins)를 사용하며, 도커로 실행중이라면 도커의 인스턴스에 등록되어있는지 확인이 필요하다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/f2acvd0ts/</guid>
      <pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>https://pkg.go.dev/golang.org/x</title>
      <link>https://ariyn.github.io/posts/r03y4rmzg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;golang 프로젝트의 일부이지만, 메인 tree에서는 벗어나 있다고 한다&lt;/li&gt;
&lt;li&gt;그래서 조금 더 느슨하게 관리되는 이점이 있는듯 하다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/r03y4rmzg/</guid>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>보이저의 소스코드는 정보 공개 대상이 아니다</title>
      <link>https://ariyn.github.io/posts/p9j2qlux2/</link>
      <description>&lt;ul&gt;
&lt;li&gt;미국의 정보자유법(Freedom Of Information Act; FOIA)에 따르자면 연방 기관은 정보를 공개할 의무를 가지고 있다
9가지 예외사항이 존재&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.muckrock.com/foi/united-states-of-america-10/voyager-command-analysis-software-source-code-28641/&#34;&gt;https://www.muckrock.com/foi/united-states-of-america-10/voyager-command-analysis-software-source-code-28641/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;이 글에 따르자면 &lt;code&gt;나사의 소프트웨어는 &amp;quot;정부 기록&amp;quot;이 아니라 일반적으로 공개 대상이 아니며, 칼텍의 JPL에서 개발하였기 때문에 저작권이 나사에 없음. 그러므로 코드의 공개가 어렵다&lt;/code&gt;라고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/p9j2qlux2/</guid>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>상대적인 시간들은 약속으로 사용하지 말자</title>
      <link>https://ariyn.github.io/posts/zilrntlh3/</link>
      <description>&lt;ul&gt;
&lt;li&gt;모두가 다른 개념을 가지고 있을 가능성이 높다
&lt;ul&gt;
&lt;li&gt;특히나 처음 나온 시간 개념이라면&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;이번 스프린트 3일차&lt;/code&gt; 는 언제인가?
&lt;ul&gt;
&lt;li&gt;스프린트 회의가 끝난 뒤 두 번의 밤이 지나고 난 뒤?&lt;/li&gt;
&lt;li&gt;세 번의 밤이 지나고 난 뒤?&lt;/li&gt;
&lt;li&gt;개발이 시작되는 날로부터 3일차?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;절대적인 시간을 기준으로 잡는 상대적인 시간&lt;/code&gt;만 사용하자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;스프린트 개발 3일차&lt;/code&gt; : 스프린트 개발을 시작하고 3번째 날&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;혹은 미리미리 상대적인 개념들을 정리할 수 있겠으나, 매번 새로운 시간이 나올때마다 합의를 보는 것은 어렵다
&lt;ul&gt;
&lt;li&gt;차라리 안티프래질하게 행동하자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zilrntlh3/</guid>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>{{[[DONE]]}} gophernotes에서 import를 어떻게 사용하는지 확인 필요</title>
      <link>https://ariyn.github.io/posts/tz3zkdcgu/</link>
      <description>&lt;ul&gt;
&lt;li&gt;gophernotes에서는 gomacro를 사용해서 interpreting하고 있다
&lt;ul&gt;
&lt;li&gt;따라서 gomacro에서 어떻게 import하는지 확인이 필요하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gomacro에서는 매번 go get을 사용해서 소스를 가져온다
&lt;ul&gt;
&lt;li&gt;이후 자신들이 사용하기 편리한 방법으로 컴파일 해 놓는다&lt;/li&gt;
&lt;li&gt;이는 &lt;code&gt;$GOPATH/src/gomacro.imports/&lt;/code&gt;하위에 위치한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tz3zkdcgu/</guid>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>책 `Effective java`는 조슈아 블로크가 썼다</title>
      <link>https://ariyn.github.io/posts/hkyhbz3br/</link>
      <description>&lt;ul&gt;
&lt;li&gt;조슈아 블로크는 썬과 구글에서 자바 엔지니어 및 시스템 설계자로 일했었다(&lt;a href=&#34;http://www.yes24.com/24/AuthorFile/Author/237806&#34;&gt;출처&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;현재는 CMU에서 교수로 일하고 있는 듯&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hkyhbz3br/</guid>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`alias=rm=&#39;rm -i --preserve-root&#39;`</title>
      <link>https://ariyn.github.io/posts/e_dds4p1r/</link>
      <description>&lt;ul&gt;
&lt;li&gt;root의 삭제를 막도록 alias를 만드는 명령어&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bashrc&lt;/code&gt;에 저장해두자&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preserve-root&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;do not remove &amp;lsquo;/&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;prompt before every removal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/e_dds4p1r/</guid>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>외부에서 jupyter-lab에 연결하기</title>
      <link>https://ariyn.github.io/posts/cj-fhisku/</link>
      <description>&lt;ul&gt;
&lt;li&gt;실행시 &amp;ndash;ip 파라미터를 준다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jupyter-lab --ip &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/cj-fhisku/</guid>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>피터의 법칙</title>
      <link>https://ariyn.github.io/posts/jly6jon_l/</link>
      <description>&lt;ul&gt;
&lt;li&gt;승진은 대부분 &amp;ldquo;현재 상태&amp;quot;의 성과를 기초로 이루어진다
&lt;ul&gt;
&lt;li&gt;승진을 하고나서는 실패할 가능성이 있다.&lt;/li&gt;
&lt;li&gt;그리고 실패하면 승진이 멈추게 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 극단적으로 설명하자면, 관료주의적 조직은 &lt;code&gt;너무 승진해서 효율이 안나오는 직원들과 비효율을 향해 달려가는 직원들&lt;/code&gt;로만 구성되게 된다
&lt;ul&gt;
&lt;li&gt;저성과자로 분류해서 자르는 것도, 그대로 놔두고 다른 직원들의 생산성으로 커버하는 것도 모두 이상하다&lt;/li&gt;
&lt;li&gt;모범적인 회사는 어떻게 대처 할 것인가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%ED%94%BC%ED%84%B0%EC%9D%98_%EB%B2%95%EC%B9%99&#34;&gt;https://ko.wikipedia.org/wiki/%ED%94%BC%ED%84%B0%EC%9D%98_%EB%B2%95%EC%B9%99&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jly6jon_l/</guid>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`git log &lt;COMMIT_ID&gt;^..&lt;COMMIT_ID&gt;`</title>
      <link>https://ariyn.github.io/posts/d4mhg2ucg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;특정 커밋 사이의 커밋들만 로그를 보는 방법&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;COMMIT_ID&amp;gt;..&amp;lt;COMMIT_ID&amp;gt;^&lt;/code&gt;은 해당 커밋을 포함하지 않음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;COMMIT_ID&amp;gt;&lt;/code&gt; 대신 &lt;code&gt;symbolic reference&lt;/code&gt; 사용 가능&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/d4mhg2ucg/</guid>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 mysql로 연결할 때 `unknown time zone: Asia/Seoul`이라는 오류가 계속 뜸</title>
      <link>https://ariyn.github.io/posts/gzpnb8tcn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이게 mysql에서 문제로 생각을 했었는데, 사실은 ubuntu에 Asia/Seoul zone info가 없어서 발생한 문제였음&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어쩐지 호스트에서 도커로 접속하면 되고, 동일한 코드가 리눅스에서는 안된다 싶더라니&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// github.com/go-sql-driver/mysql@v1.5.0/dsn.go:451
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// connection string을 파싱해서 옵션들을 만들어내는 함수 parseDSNParams
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loc&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;QueryUnescape&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cfg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Loc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLocation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// time/zoneinfo_read.go:529
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// parserDSNParams의 time.LoadLocation 함수가 마지막에 호출한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 이 함수는 Asia/Seoul 형식의 타임존 이름을 파싱하고, 시스템에서 값을 불러온다. 없다면 unknown time zone XXXX/XXXX 의 오류를 반환한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadLocation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sources&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sources&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zoneData&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;loadTzinfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLocationFromTZData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;zoneData&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ENOENT&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadFromEmbeddedTZData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;zonedata&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadFromEmbeddedTZData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLocationFromTZData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;zonedata&lt;/span&gt;)); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ENOENT&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;firstErr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown time zone &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gzpnb8tcn/</guid>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>docker run에서는 docker-entrypoint-inid.d/의 스크립트를 실행했는데,  docker-compose에서는 실행을 안함</title>
      <link>https://ariyn.github.io/posts/160auco0c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;mysql의 /entrypoint.sh를 보면, 이미 db가 생성되어 있는경우 entrypoint를 실행 안함&lt;/li&gt;
&lt;li&gt;docker-compose의 environment에 MYSQL_DATABASE 옵션을 통해서 이미 데이터베이스가 생성되고 있었음&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/160auco0c/</guid>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`@timestamp`는 ElasticSearch가 아닌 LogStash가 넣어주는 값</title>
      <link>https://ariyn.github.io/posts/i26odekcd/</link>
      <description>&lt;p&gt;2.X 까지는 _timestamp라는 값을 자동으로 넣어줬던 듯
* &lt;a href=&#34;https://discuss.elastic.co/t/-timestamp-deprecated/38514&#34;&gt;https://discuss.elastic.co/t/-timestamp-deprecated/38514&lt;/a&gt;
* &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.1/breaking_20_mapping_changes.html#_literal__timestamp_literal_and_literal__ttl_literal_deprecated&#34;&gt;공식 문서&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logstash에서 timestamp를 넣는 경우, 기본 필드 이름이 &lt;code&gt;@timestamp&lt;/code&gt;이다
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date-target&#34;&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/i26odekcd/</guid>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>dunder variable</title>
      <link>https://ariyn.github.io/posts/h2ynvd5bu/</link>
      <description>&lt;ul&gt;
&lt;li&gt;언더바 (_) 두개로 시작하는 변수들&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__all__&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/h2ynvd5bu/</guid>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>캐리지 리턴()과 라인 피드(&lt;/br&gt;)</title>
      <link>https://ariyn.github.io/posts/e4riphidk/</link>
      <description>&lt;ul&gt;
&lt;li&gt;\r은 캐리지 리턴을 의미한다. 캐리지를 가장 왼쪽으로 보내는 행동을 한다&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;은 라인피드를 의미하며, 한 줄 아래로 보내는 행동을 한다&lt;/li&gt;
&lt;li&gt;이 둘은 키보드에서는 언뜻 이해가 안되지만, 타자기에서는 이해가 쉽다.
&lt;ul&gt;
&lt;li&gt;그럴만한게 타자기에서 나온 개념이기 때문에.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;타자기에서 다음줄에 글자를 찍는 방법
&lt;ul&gt;
&lt;li&gt;타자기에서는 종이가 왼쪽으로 이동하며, 글자가 찍힌다.&lt;/li&gt;
&lt;li&gt;한줄을 꽉 채웠다면 &lt;code&gt;종이는 왼쪽으로 이동해서, 커서가 오른쪽 끝을 가리키는 상황&lt;/code&gt;이 되었을 것&lt;/li&gt;
&lt;li&gt;이때 새로운 줄에 글자를 찍기 위해서는 아래의 두개의 행동을 해야한다.
&lt;ul&gt;
&lt;li&gt;종이를 한줄 정도 위로 보낸다 (커서가 방금 전에 찍은 글자 아랫줄에 위치하게 된다)&lt;/li&gt;
&lt;li&gt;종이를 다시 오른쪽 끝으로 이동시킨다 (커서가 종이의 왼쪽에 위치하게 된다)&lt;/li&gt;
&lt;li&gt;이 두가지 행동이 Carriage Return과 Line Feed인 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기계식 타자기에서는 이 두가지 행동이 하나의 동작으로 동시에 수행된다
&lt;ul&gt;
&lt;li&gt;전자식 타자기에서도 하나의 동작으로 동시에 수행되지만, 실제 부품들은 두가지 명령을 받아야 한다.&lt;/li&gt;
&lt;li&gt;이로인해 캐리지 리턴 \r과 라인 피드 &lt;!-- raw HTML omitted --&gt;이 생겨난 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전자식 타자기 혹은 텔레 타이프라이터를 컴퓨터에 연결해서 사용할 때, 추상화가 안되어 있어서 이 규격이 그대로 컴퓨터에 정착된 것으로 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Newline&#34;&gt;https://en.wikipedia.org/wiki/Newline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/e4riphidk/</guid>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>dentry cache</title>
      <link>https://ariyn.github.io/posts/sdvv4crl9/</link>
      <description>&lt;ul&gt;
&lt;li&gt;VFS(Virtual File System)에서 사용하는 구조체
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://books.gigatux.nl/mirror/kerneldevelopment/0672327201/ch12lev1sec7.html&#34;&gt;http://books.gigatux.nl/mirror/kerneldevelopment/0672327201/ch12lev1sec7.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Directory Entry의 약자로 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;리눅스에서 모든 것을 파일로 다루다보니, Directory와 실제 file을 구분하지 않고 사용하기 위한 구조체
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/bin/vim&lt;/code&gt;에서 bin도 vim도 모두 파일&lt;/li&gt;
&lt;li&gt;해당 파일에 대한 정보를 가지고 있는게 dentry이다
&lt;ul&gt;
&lt;li&gt;inode가 있기는 하지만, 파일에 비해 directory는 각 디렉토리별 여러가지 작업을 해야하는 경우가 많음
&lt;ul&gt;
&lt;li&gt;따라서 캐싱을 해둘 필요가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dentry는 파일로 저장되지 않고, 즉성해서 커널이 생성해서 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dentry의 d_inode가 NULL일 수 있음
&lt;ul&gt;
&lt;li&gt;이경우 하드링크가 삭제된 dentry&lt;/li&gt;
&lt;li&gt;이는 LRU로 들어가서 서서히 삭제됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/sdvv4crl9/</guid>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>OPEX</title>
      <link>https://ariyn.github.io/posts/tw7stike7/</link>
      <description>&lt;ul&gt;
&lt;li&gt;Operating Expenses
&lt;ul&gt;
&lt;li&gt;운영 비용&lt;/li&gt;
&lt;li&gt;현재 상태를 유지하기 위해 지출한 비용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비슷하지만 다른 말은 CAPEX
&lt;ul&gt;
&lt;li&gt;Capital Expenditures&lt;/li&gt;
&lt;li&gt;미래의 이득을 위해 지출한 비용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tw7stike7/</guid>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>리눅스에서는 한번 검색한 디렉토리를 캐싱 해 둠</title>
      <link>https://ariyn.github.io/posts/xw6yxedth/</link>
      <description>&lt;ul&gt;
&lt;li&gt;dentry cache라고 부름&lt;/li&gt;
&lt;li&gt;한번 검색하고 나면 꽤 빨라서 캐싱이 있을 것으로 생각은 했지만&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/xw6yxedth/</guid>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>rust와 lifetime</title>
      <link>https://ariyn.github.io/posts/rk80bywhx/</link>
      <description>&lt;ul&gt;
&lt;li&gt;rust는 함수의 파라미터, 구조체의 필드에 lifetime을 명시 해 줘야 한다
&lt;ul&gt;
&lt;li&gt;이는 함수의 소유권이 유효한 시간을 의미함&lt;/li&gt;
&lt;li&gt;동일한 lifetime동안 모든 파라미터를 사용할 수 있도록 보장함
&lt;ul&gt;
&lt;li&gt;다만 가장 짧은 lifetime에 맞춰짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;fn longest&amp;lt;&#39;a&amp;gt; (x: &amp;amp;&#39;a str, y: &amp;amp;&#39;a str) -&amp;gt; &amp;amp;&#39;a str {&amp;lt;/br&amp;gt;  if x.len() &amp;gt; y.len() {&amp;lt;/br&amp;gt;    x&amp;lt;/br&amp;gt;  } else {&amp;lt;/br&amp;gt;    y&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;fn main() {&amp;lt;/br&amp;gt;  let result;&amp;lt;/br&amp;gt;  let x = &amp;quot;123&amp;quot;;&amp;lt;/br&amp;gt;  {&amp;lt;/br&amp;gt;    let y = &amp;quot;1&amp;quot;;&amp;lt;/br&amp;gt;    result = longest(x, y);&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    println!(&amp;quot;result = {}&amp;quot;, result);&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;  println!(&amp;quot;result = {}&amp;quot;, result); // &amp;lt;&amp;lt;&amp;lt;&amp;lt; compile error.&amp;lt;/br&amp;gt;  // &#39;a를 가진 result는 y와 동일한 lifetime을 가짐.&amp;lt;/br&amp;gt;  // 따라서 y의 소유권이 끝났기 때문에, result도 여기서 사용이 불가능함&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rk80bywhx/</guid>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>rust의 소유권중 이해가 안가는 부분</title>
      <link>https://ariyn.github.io/posts/lhkgkxni9/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;// let mut children_iter = (*one).borrow_mut().children.clone().iter();&amp;lt;/br&amp;gt;let children = (*one).borrow_mut().children.clone();&amp;lt;/br&amp;gt;let mut children_iter = children.iter();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;왜 위쪽은 (*one).borrow_mut()가 임시 변수가 되어서 사용이 안되고, 아랫쪽은 사용이 가능할까? 큰 차이가 없어보이는데&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lhkgkxni9/</guid>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>api gateway에서 Integration Request의 http header mapping 설정시 아래와 같은 오류가 날 경우</title>
      <link>https://ariyn.github.io/posts/_takvy1qb/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Invalid mapping expression specified: Validation Result: warnings : [], errors : [Invalid mapping expression specified: method.request.header.Authorization]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Method Request 단계에서 Headers에 해당 해더가 정의되었는지 확인해보자
&lt;ul&gt;
&lt;li&gt;아무거나 넣어주지는 않는듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/_takvy1qb/</guid>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>todo!(&#39;&#39;)</title>
      <link>https://ariyn.github.io/posts/7maqul3bc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;todo!(&amp;lsquo;make!&amp;rsquo;)으로 해 놓고 실행하게 되면 &lt;code&gt;not yet implemented: make!&lt;/code&gt;처럼 오류가 뜨게 된다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/7maqul3bc/</guid>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>rust의 usize는 플랫폼에 따라 다르게 동작할 수 있음</title>
      <link>https://ariyn.github.io/posts/tlhkbsz_c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;공식 문서에도 &lt;code&gt;pointer-sized unsigned integer type&lt;/code&gt;이라 되어 있음&lt;/li&gt;
&lt;li&gt;i32나 i64와 같이 고정된 값을 함부로 캐스팅하면, 잘못된 값이 저장될 가능성이 있음
2038년까지 이제 16년 남았다&amp;hellip; rust 커뮤니티 화이팅!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/std/primitive.usize.html&#34;&gt;https://doc.rust-lang.org/std/primitive.usize.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tlhkbsz_c/</guid>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>generic은 여러개 쓸 수 있다</title>
      <link>https://ariyn.github.io/posts/aloeqidvp/</link>
      <description>&lt;ul&gt;
&lt;li&gt;단 너무 많이 쓰면 문제의 신호일 수 있을것&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;struct Foo&amp;lt;T,U&amp;gt; {&amp;lt;/br&amp;gt;  x: T,&amp;lt;/br&amp;gt;  y: U,&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/aloeqidvp/</guid>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>generic은 컴파일 타임에 지정된 타입으로 변환된다</title>
      <link>https://ariyn.github.io/posts/mpow-ysfu/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이를 &lt;code&gt;단형상화&lt;/code&gt; (monomorphization)이라 부른다
&lt;ul&gt;
&lt;li&gt;즉 제네릭 타입 T에 들어가는 모든 타입들을 확인한 다음, 애초에 그 타입인 것 처럼 컴파일 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;타입 언어이다보니 가능한 마법으로 보인다
&lt;ul&gt;
&lt;li&gt;만약에 모호한 제네릭 타입이 생기면 어떻게 될까? 컴파일 에러를 리턴할까? #[[찾아볼 것]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/mpow-ysfu/</guid>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>trait 구현하기</title>
      <link>https://ariyn.github.io/posts/2y_pj6syo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;impl 뒤에 &lt;code&gt;{trait_name} for&lt;/code&gt;를 추가하면 된다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;impl {trait} for {structure} {&amp;lt;/br&amp;gt;  fn ...&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기본 구현이라는 방법이 있다
&lt;ul&gt;
&lt;li&gt;트레잇에서 함수의 원형뿐만 아니라 body까지 구현하고, impl시에 비어있는 중괄호를 사용하면 기본 구현을 자동으로 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;pub trait Sample {&amp;lt;/br&amp;gt;  fn sample() string {&amp;lt;/br&amp;gt;    String::from(&amp;quot;Hello&amp;quot;)&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;impl Sample for s {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/2y_pj6syo/</guid>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>trait은 동작을 공유할 수 있게 해준다</title>
      <link>https://ariyn.github.io/posts/oyd5_fkvf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;아무래도 Generic Type T라고만 받으면 문제가 생길 수 있다보니, trait을 만든 것 같다&lt;/li&gt;
&lt;li&gt;함수 내부에 사용되는 동작들에 대해, 명시적으로 동작함을 가르쳐 줘야 한다
&lt;ul&gt;
&lt;li&gt;ducktyping과 interface 형식과 비슷하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scope에 따라서 trait 구현이 가능할 수도, 아닐수도 있다
&lt;ul&gt;
&lt;li&gt;외부의 타입에 대해 외부의 trait을 구현할 수는 없다 (golang에서 interface를 외부에서 구현할 수 없는것 처럼)&lt;/li&gt;
&lt;li&gt;trait 혹은 타입중 하나가 내부에서 정의되었다면 문제 없다&lt;/li&gt;
&lt;li&gt;이는 타입이론에서 &lt;code&gt;고아규칙&lt;/code&gt;이라 부르는 것과 관련 있다고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/oyd5_fkvf/</guid>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>헛소리도 필요한 의견이다</title>
      <link>https://ariyn.github.io/posts/jc7eqynjf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;건전한 다원주의를 만들기 위해서는 헛소리도 용인해야 한다&lt;/li&gt;
&lt;li&gt;그것을 실행하면 안되겠으나, 헛소리를 한다고 미워해서는 안된다
&lt;ul&gt;
&lt;li&gt;그런데&amp;hellip; 항상 헛소리만 하고 있다면?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jc7eqynjf/</guid>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>[2. 함수가 다시 변수를 반환해서 동일한 값에 저장](kiHuWQQIZ)</title>
      <link>https://ariyn.github.io/posts/ssnhdg8k8/</link>
      <description>&lt;ul&gt;
&lt;li&gt;직접 해보니 토나오게 어렵다&lt;/li&gt;
&lt;li&gt;뭔가 작업을 하려고 함수의 parameter로 받는것인데, 이경우 type이 &lt;code&gt;&amp;amp;mut T&lt;/code&gt;가 되어야 한다
&lt;ul&gt;
&lt;li&gt;근데 &lt;code&gt;&amp;amp;mut T&lt;/code&gt;에서 다시 원래 T로 바꾸는 방법을 아직 잘 모르겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 범용성을 생각해보면, 그냥 &amp;amp;연산자를 사용해서 함수의 파라미터로 넘기는게 제일 속편할 것&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ssnhdg8k8/</guid>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>rust에서 튜플로 할당과 리턴하기</title>
      <link>https://ariyn.github.io/posts/bi33mqwg4/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;let (a, b) = sample();&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;fn sample() -&amp;gt; (i32, i32) {&amp;lt;/br&amp;gt;  (1, 2)&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/bi33mqwg4/</guid>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>rust의 소유권</title>
      <link>https://ariyn.github.io/posts/s0kpvhium/</link>
      <description>&lt;ul&gt;
&lt;li&gt;기본
&lt;ul&gt;
&lt;li&gt;rust에서 모든 변수는 owner를 가짐&lt;/li&gt;
&lt;li&gt;owner는 하나의 스코프에서 하나만 생겨남&lt;/li&gt;
&lt;li&gt;pc가 스코프를 벗어나 기존의 owner가 버려질 때, 해당 owner를 가진 모든 변수는 drop함수를 실행하고, free됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;할당과 관련된 골치아픈 경우
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;let x = String::from(&amp;quot;hello&amp;quot;);&amp;lt;/br&amp;gt;let y = x;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이경우 x와 y는 두개의 변수이며, 같은 owner를 지니기 때문에 동시에 drop됨&lt;/li&gt;
&lt;li&gt;그러나 x와 y는 동일한 힙의 데이터를 바라보고 있기 때문에, 두번 drop되면 안됨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;따라서 rust에서는 변수(x)가 복사되는 순간 기존의 변수(x)는 무효화 시킴&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;이를 이동(move)라고 표현함&lt;/li&gt;
&lt;li&gt;rust에서는 명시적으로 사용하지 않는한 모든 변수를 shallow copy함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만에하나 아래처럼 이동된 변수를 사용한다면 에러가 발생함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;let x = String::from(&amp;quot;hello&amp;quot;);&amp;lt;/br&amp;gt;let y = x;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;println!(x);&amp;lt;/br&amp;gt;error[E0382]: use of moved value: `s1`&amp;lt;/br&amp;gt; --&amp;gt; src/main.rs:4:27&amp;lt;/br&amp;gt;  |&amp;lt;/br&amp;gt;3 |     let y = x;&amp;lt;/br&amp;gt;  |         -- value moved here&amp;lt;/br&amp;gt;4 |     println!(x);&amp;lt;/br&amp;gt;  |              ^^ value used here after move&amp;lt;/br&amp;gt;  |&amp;lt;/br&amp;gt;  = note: move occurs because `x` has type `std::string::String`,&amp;lt;/br&amp;gt;which does not implement the `Copy` trait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단 i32처럼 스택에 들어갈 수 있는 것들은 move되지 않고 copy됨
&lt;ul&gt;
&lt;li&gt;이는 copy 트레잇으로 구분됨&lt;/li&gt;
&lt;li&gt;copy와 drop 트레잇이 동시에 구현되어 있다면 또한 오류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;함수 호출과 관련된 골치 아픈 경우
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;let x = String::from(&amp;quot;hello&amp;quot;)&amp;lt;/br&amp;gt;sample(x); // x가 파라미터 s로 move됨&amp;lt;/br&amp;gt;println!(x); // 소유권이 종료되었기 때문에 사용 불가&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;fn sample(s:: String) { &amp;lt;/br&amp;gt;  println!(s);&amp;lt;/br&amp;gt;} // s의 소유권 종료. s의 drop 호출&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;맙소사 함수를 호출하면서 파라미터에 변수가 복사되었고, 이는 이후에 사용 불가함&lt;/li&gt;
&lt;li&gt;이를 해결하기 위해서는 두가지로 보이는데
&lt;ol&gt;
&lt;li&gt;&amp;amp;연산자를 사용해서 pointer를 넘겨줌&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;포인터는 값에 대한 소유권이 없다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;함수가 다시 변수를 반환해서 동일한 값에 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;변수가 반환되면, 이는 일종의 move로 drop되지 않는다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/s0kpvhium/</guid>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`::`의 의미</title>
      <link>https://ariyn.github.io/posts/4b82d7mwc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이는 인스턴스가 아닌, 타입을 바라보는 연산자&lt;/li&gt;
&lt;li&gt;즉 type x에 선언되어 있는 static함수를 바라본다고 봐도 될 듯&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/4b82d7mwc/</guid>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>러스트의 모든 변수는 불변이다</title>
      <link>https://ariyn.github.io/posts/yk5yxyntn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;따라서 변경할 수 있는 변수를 선언하기 위해서는 mut를 붙여줘야 한다&lt;/li&gt;
&lt;li&gt;심지어 포인터 &lt;code&gt;&amp;amp;&lt;/code&gt;도 불변이다
&lt;ul&gt;
&lt;li&gt;변경할 수 있는 포인터 변수는 &lt;code&gt;&amp;amp;mut a&lt;/code&gt;가 되어야 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust&amp;lt;/br&amp;gt;let a = 1 // 불변&amp;lt;/br&amp;gt;let mut b = 2 //변경 가능&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;amp;a // 불변&amp;lt;/br&amp;gt;&amp;amp;mut b // 변경 가능&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;amp;mut a // 사용 불가. 불변으로 선언된 변수를 변경가능하게 바꿀 수 없음&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;흐음&amp;hellip; 만에하나 불변으로 선언한 변수를 변경해야하는 일이 생기면 어떻게 될까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/yk5yxyntn/</guid>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>이집트는 기원전 1년 카이사르에게 지배당하고 나서, 단 한번도 역사의 주 무대로 올라오지도, 독립국인 적도 없었다</title>
      <link>https://ariyn.github.io/posts/gmosvnggq/</link>
      <description>&lt;p&gt;4000년도 더 넘게 이집트의 문명은 존재했었다
* 이는 풍요로운 나일강 영역과 사하라 사막의 고된 날씨가 만들어준 선물
* 사하라 사막은 외부의 침입을 막기에 아주 편리했다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그러나 외부 세계의 사람들이 &amp;ldquo;생존을 위한 투쟁&amp;quot;에서 승리하자, 이집트는 &amp;ldquo;현실에 안주한 게으름뱅이&amp;quot;가 되어버림
&lt;ul&gt;
&lt;li&gt;생존을 위해서 별 짓을 다 했고, 이는 기술과 경제력등의 발전으로 이어짐&lt;/li&gt;
&lt;li&gt;그러나 이집트는 언제나 먹고 살만 했고, 전쟁을 위한 기술발전은 거의 없었음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gmosvnggq/</guid>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>에빙하우스의 망각 곡선</title>
      <link>https://ariyn.github.io/posts/-sgx3whw7/</link>
      <description>&lt;p&gt;1885년 독일의 헤르만 에빙하우스가 만들어낸 수식
* &lt;code&gt;javascript&amp;lt;/br&amp;gt;R = e ^(-t/S)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;R = 기억 보유량&amp;lt;/br&amp;gt;S = 상대적인 기억력&amp;lt;/br&amp;gt;t = 시간&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;쓸모없는 단어를 만들고, 그 단어를 얼마나 기억하는지를 기반으로 만들어졌다고 한다&lt;/li&gt;
&lt;li&gt;한달뒤 몇퍼센트 이런 자극적인 것 보다는, &amp;ldquo;기억은 저장된 즉시 휘발되기 시작하며, 유일한 해결책은 과잉학습과 반복학습뿐이다&amp;quot;라는 교훈을 얻는게 좋을 듯&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/-sgx3whw7/</guid>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title></title>
      <link>https://ariyn.github.io/posts/euq3mp2zg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;고랭 구현에 핵심 인물중 한명으로 보임
&lt;ul&gt;
&lt;li&gt;golang github의 contributors를 보면, russ cox가 200만 라인의 기여를 한 것을 볼 수 있다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보통 golang 공식 포럼이나 메일링 리스트에서 이사람의 말이 가장 권위가 있는듯
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;8XIyPU_hf&#34;&gt;golang은 기술적 이유로 인해서 negative lookahead를 지원하지 않는다 #TIL #golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swtch.com/~rsc/&#34;&gt;https://swtch.com/~rsc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/euq3mp2zg/</guid>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang은 기술적 이유로 인해서 negative lookahead를 지원하지 않는다</title>
      <link>https://ariyn.github.io/posts/8xiypu_hf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-nuts/c/7qgSDWPIh_E&#34;&gt;https://groups.google.com/g/golang-nuts/c/7qgSDWPIh_E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;regexp 라이브러리가 현재 O(n)을 준수하도록 작성되고 있음
&lt;ul&gt;
&lt;li&gt;그러나 #[[russ cox]]는 O(n)을 준수하면서 negative lookahead를 구현하는 방법을 모른다고 한다 ㅜㅜ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/8xiypu_hf/</guid>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>aws ec2 describe-instances 결과에서 원하는 값을 가져오기 위한 jq 쿼리</title>
      <link>https://ariyn.github.io/posts/lt3ulhspz/</link>
      <description>&lt;ul&gt;
&lt;li&gt;public ip로 검색하는 방법
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&amp;lt;/br&amp;gt;aws ec2 describe-instances | jq -r &#39;.Reservations[].Instances[] | select(.NetworkInterfaces[].Association.PublicIp == &amp;quot;123.123.123.123&amp;quot;)&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lt3ulhspz/</guid>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>mac에서 brew를 통해 java를 실행한 경우, path를 설정해야 한다</title>
      <link>https://ariyn.github.io/posts/wc0mqfwc5/</link>
      <description>&lt;ul&gt;
&lt;li&gt;brew에 설정이 따로 있는지는 모르겠으나, 자동으로 path가 설정되지 않는다
&lt;ul&gt;
&lt;li&gt;간단히 찾아봤을때 &lt;code&gt;자동으로 path를 추가하는&lt;/code&gt; 옵션은 보이지 않는다&lt;/li&gt;
&lt;li&gt;생각해보면 path가 필요 없는 경우도 있을 것이고, 함부로 rc파일을 건드리기에는 정리되어 있는것들도 있을테니까&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell&amp;lt;/br&amp;gt;export PATH=/opt/homebrew/opt/openjdk/bin:$PATH&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;정확한 위치를 모르겠다면 &lt;code&gt;brew info openjdk&lt;/code&gt;명령어를 통해 위치를 확인하자&lt;/li&gt;
&lt;li&gt;이때 openjdk의 path가 기존 path보다 앞으로 가야한다
&lt;ul&gt;
&lt;li&gt;기존의 path인 &lt;code&gt;/usr/bin/java&lt;/code&gt;에는 자바를 설치하라는 안내 문구만 나온다&lt;/li&gt;
&lt;li&gt;이 파일을 삭제하는것은 12.0.1이상에서 금지되어 있음 (sudo를 써도 안지워진다&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/wc0mqfwc5/</guid>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>국어의 품사</title>
      <link>https://ariyn.github.io/posts/iwj2mkglw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;공통된 성질을 가진 낱말끼리 모아둔 것&lt;/li&gt;
&lt;li&gt;크게 3가지가 존재함&lt;/li&gt;
&lt;li&gt;형태에 따른 품사
&lt;ul&gt;
&lt;li&gt;불변어
&lt;ul&gt;
&lt;li&gt;형태가 변하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;변화어
&lt;ul&gt;
&lt;li&gt;형태가 변함&lt;/li&gt;
&lt;li&gt;예) 동사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기능에 따른 품사
&lt;ul&gt;
&lt;li&gt;체언&lt;/li&gt;
&lt;li&gt;수식언&lt;/li&gt;
&lt;li&gt;독립언&lt;/li&gt;
&lt;li&gt;관계언&lt;/li&gt;
&lt;li&gt;용언&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;의미에 따른 품사 분류
&lt;ul&gt;
&lt;li&gt;명사&lt;/li&gt;
&lt;li&gt;대명사&lt;/li&gt;
&lt;li&gt;수사&lt;/li&gt;
&lt;li&gt;관형사&lt;/li&gt;
&lt;li&gt;부사&lt;/li&gt;
&lt;li&gt;감탄사&lt;/li&gt;
&lt;li&gt;조사&lt;/li&gt;
&lt;li&gt;동사&lt;/li&gt;
&lt;li&gt;형용사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=kim870327&amp;amp;logNo=220953713177&#34;&gt;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=kim870327&amp;amp;logNo=220953713177&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/iwj2mkglw/</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>최근 내 TIL은 너무 &#34;결과&#34;에 집중하는 것일까?</title>
      <link>https://ariyn.github.io/posts/zqovtpvt7/</link>
      <description>&lt;ul&gt;
&lt;li&gt;결과에 집중하지 않고, 그 과정과 원리에 집중하는 것이 원래 목표&lt;/li&gt;
&lt;li&gt;이제 TIL을 쓰는 것이 나름 손에 익었으니, 과정과 원리에 집중하는 TIL을 하나씩 써보자 #[[할 것]]&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zqovtpvt7/</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git에서 ssh를 사용해서 접속하도록 하는 방법</title>
      <link>https://ariyn.github.io/posts/2fgpwznkf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;[url &amp;quot;ssh://git@github.com/&amp;quot;]&amp;lt;/br&amp;gt;	insteadOf = https://github.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;global config에 위와 같은 라인을 추가&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/2fgpwznkf/</guid>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 실행할 때, 로컬 파일을 참조하도록 설정</title>
      <link>https://ariyn.github.io/posts/zzw4tfjgn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;go mod edit -replace example.com/greetings=../greetings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이렇게 하면, example.com/greetings에 대해서는 로컬의 파일을 참조하게 됨
&lt;ul&gt;
&lt;li&gt;이경우 example.com/greetings에 대해서만 동작하고, example.com/greetings/test 처럼 하위 프로젝트에 대해서는 동작 안함&lt;/li&gt;
&lt;li&gt;단 greetings에 go.mod가 있다면, 아래의 폴더들은 하위 프로젝트로 잡힘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/doc/tutorial/call-module-code&#34;&gt;https://go.dev/doc/tutorial/call-module-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zzw4tfjgn/</guid>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>docker에서 alpine 이미지</title>
      <link>https://ariyn.github.io/posts/i7lwoqubd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lesstif.com/docker/alpine-linux-35356819.html&#34;&gt;https://www.lesstif.com/docker/alpine-linux-35356819.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;latest처럼 특정한 의미가 있다기 보다는, alpine linux를 사용해서 만들어진 이미지라는 뜻
&lt;ul&gt;
&lt;li&gt;alpine 배포판은 용량이 80mb정도로 경량화되어 있음&lt;/li&gt;
&lt;li&gt;따라서 docker 이미지로 사용하면 5mb정도의 이미지가 나오게됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/i7lwoqubd/</guid>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>gorm을 쓸 때, `sql: Scan error on column index 1, name &#34;created_at&#34;: unsupported Scan, storing driver.Value type []uint8 into type *time.Time` 오류가 나는 경우</title>
      <link>https://ariyn.github.io/posts/eytikfvjz/</link>
      <description>&lt;ul&gt;
&lt;li&gt;sql connection string의 제일 뒤에, &lt;code&gt;?parseTime=true&lt;/code&gt;를 붙여주자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/eytikfvjz/</guid>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>중복된 값을 삭제하는 쿼리</title>
      <link>https://ariyn.github.io/posts/glqyluitt/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;DELETE S1 FROM table AS S1  &amp;lt;/br&amp;gt;INNER JOIN table AS S2   &amp;lt;/br&amp;gt;WHERE S1.id &amp;lt; S2.id AND S1.column = S2.column;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;inner join을 한 다음, id가 더 높고, 동일한 컬럼인 경우 삭제하는 쿼리&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javatpoint.com/mysql-delete-duplicate-records&#34;&gt;https://www.javatpoint.com/mysql-delete-duplicate-records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/glqyluitt/</guid>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>레거시와 신규 구조가 얼마나 잘 연결될수 있는지도 생각하기</title>
      <link>https://ariyn.github.io/posts/zmiruucnr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;어차피 한동안은 신규 구조와 레거시가 같이 쓰여야 함&lt;/li&gt;
&lt;li&gt;따라서 신규 구조를 원활하게 쓰기 위해서, 레거시와 얼마나 호환성이 좋은지도 고민이 필요하다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zmiruucnr/</guid>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>cui bono</title>
      <link>https://ariyn.github.io/posts/b3vdizow2/</link>
      <description>&lt;ul&gt;
&lt;li&gt;라틴어로 &amp;ldquo;누가 이득을 보았는가?&amp;ldquo;라는 뜻
&lt;ul&gt;
&lt;li&gt;로마시대 재판관 &lt;code&gt;루키우스 카시우스 롱기누스 라빌라&lt;/code&gt;가 만들었다고 키케로가 말한 적 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cui -&amp;gt; whom
&lt;ul&gt;
&lt;li&gt;who를 의미하는 che의 변화형&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bono -&amp;gt; good, benefit
&lt;ul&gt;
&lt;li&gt;benefit을 의미하는 bonum의 변화형&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/b3vdizow2/</guid>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>unary</title>
      <link>https://ariyn.github.io/posts/jrnmga1j3/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;단항&lt;/code&gt; 이라는 뜻의 영어 단어
&lt;ul&gt;
&lt;li&gt;binary가 &lt;code&gt;이항&lt;/code&gt;으로 두개라는 뜻으로, unary 비슷하게 하나를 의미함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;binary에서 -nary의 발음 앞에, 알파벳 u를 붙인 발음
&lt;ul&gt;
&lt;li&gt;júːnəri&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dic.daum.net/search.do?q=unary&#34;&gt;https://dic.daum.net/search.do?q=unary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jrnmga1j3/</guid>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>김 통조림</title>
      <link>https://ariyn.github.io/posts/qkm20jrlv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;세상에는 김 통조림이라는 것도 존재한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/qkm20jrlv/</guid>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>6174</title>
      <link>https://ariyn.github.io/posts/ygspuijbx/</link>
      <description>&lt;ul&gt;
&lt;li&gt;카프리카 상수
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%B9%B4%ED%94%84%EB%A6%AC%EC%B9%B4_%EC%83%81%EC%88%98&#34;&gt;https://ko.wikipedia.org/wiki/%EC%B9%B4%ED%94%84%EB%A6%AC%EC%B9%B4_%EC%83%81%EC%88%98&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;아래의 루틴을 따라하면 조건에 맞는 모든 4자리 자연수는 카프리카 상수로 이어지게 됨
&lt;ul&gt;
&lt;li&gt;두개 이상의 숫자가 포함된 4자리 수를 선택
&lt;ul&gt;
&lt;li&gt;예를들어 8375
1111은 안됨
1000은 가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;숫자가 큰 순서, 작은 순서대로 순서대로 정렬
8753과 3578&lt;/li&gt;
&lt;li&gt;큰 수에서 작은 수를 뺌
8753 - 3578 = 5175&lt;/li&gt;
&lt;li&gt;나온 결과값을 통해서, 다시 2번으로 돌아감&lt;/li&gt;
&lt;li&gt;모든 4자리 숫자는 6174가 나오게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ygspuijbx/</guid>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang의 struct에서 멤버의 이름은 두개 이상 동시에 선언할 수 있다</title>
      <link>https://ariyn.github.io/posts/gseloejgr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;type foo struct {&amp;lt;/br&amp;gt;  bar, bar2 int&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;f := foo {&amp;lt;/br&amp;gt;  bar: 1,&amp;lt;/br&amp;gt;  bar2: 2,&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;마치 함수 파라미터에서 두개 이상 받을 수 있는것 처럼&lt;/li&gt;
&lt;li&gt;그래서인지 ast의 Field를 보면, Names가 list로 되어있음
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;// A Field represents a Field declaration list in a struct type,&amp;lt;/br&amp;gt;// a method list in an interface type, or a parameter/result declaration&amp;lt;/br&amp;gt;// in a signature.&amp;lt;/br&amp;gt;// Field.Names is nil for unnamed parameters (parameter lists which only contain types)&amp;lt;/br&amp;gt;// and embedded struct fields. In the latter case, the field name is the type name.&amp;lt;/br&amp;gt;// Field.Names contains a single name &amp;quot;type&amp;quot; for elements of interface type lists.&amp;lt;/br&amp;gt;// Types belonging to the same type list share the same &amp;quot;type&amp;quot; identifier which also&amp;lt;/br&amp;gt;// records the position of that keyword.&amp;lt;/br&amp;gt;//&amp;lt;/br&amp;gt;type Field struct {&amp;lt;/br&amp;gt;	Doc     *CommentGroup // associated documentation; or nil&amp;lt;/br&amp;gt;	Names   []*Ident      // field/method/(type) parameter names, or type &amp;quot;type&amp;quot;; or nil&amp;lt;/br&amp;gt;	Type    Expr          // field/method/parameter type, type list type; or nil&amp;lt;/br&amp;gt;	Tag     *BasicLit     // field tag; or nil&amp;lt;/br&amp;gt;	Comment *CommentGroup // line comments; or nil&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gseloejgr/</guid>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`dig -x`</title>
      <link>https://ariyn.github.io/posts/oqzex7c6u/</link>
      <description>&lt;ul&gt;
&lt;li&gt;리버스 dns를 질의하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dig -x 8.8.8.8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/oqzex7c6u/</guid>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>custom url scheme를 사용하면 꽤 편하게 매크로를 만들 수 있다</title>
      <link>https://ariyn.github.io/posts/k35gpbs2v/</link>
      <description>&lt;ul&gt;
&lt;li&gt;최근에는 많이 좋아져서, url scheme를 통해 특정 앱의 특정 화면까지 이동할 수 있음&lt;/li&gt;
&lt;li&gt;slack://, notion:// 등등 브라우저로 여는건 그렇게 어렵지 않으니&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/k35gpbs2v/</guid>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>명동 중국 대사관의 역사</title>
      <link>https://ariyn.github.io/posts/oyuwvhsyi/</link>
      <description>&lt;ul&gt;
&lt;li&gt;임오군란 이후 청나라 군대의 주둔지였음&lt;/li&gt;
&lt;li&gt;한국전쟁 이후에는 가장 먼저 국교를 체결한 대만의 대사관이 됨
1992년 대만과 단교한 이후, 중국이 대사관 자리를 받아 사용중&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/oyuwvhsyi/</guid>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>정동</title>
      <link>https://ariyn.github.io/posts/_2kdy2fpq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%A0%95%EB%8F%99_(%EC%8B%AC%EB%A6%AC%ED%95%99)&#34;&gt;https://ko.wikipedia.org/wiki/%EC%A0%95%EB%8F%99_(%EC%8B%AC%EB%A6%AC%ED%95%99)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;심리학에서 감정이나 정서, 기분에 관련된 용어
&lt;ul&gt;
&lt;li&gt;사람의 마음을 이야기 하는 느낌&lt;/li&gt;
&lt;li&gt;기분, 감정과 비슷하지만 조금 더 심리학적으로 정제된 용어&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;#[[질 들뢰즈]]가 꽤 자세하게 설명하는듯&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/_2kdy2fpq/</guid>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Saturation arithmetic</title>
      <link>https://ariyn.github.io/posts/or_lsbznr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;포화연산&lt;/li&gt;
&lt;li&gt;최솟값과 최댓값이 정해져있는 상태에서 산술 연산&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/or_lsbznr/</guid>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>마음의 우상</title>
      <link>https://ariyn.github.io/posts/fqgadhggd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;베이컨이 이야기한 네가지 우상&lt;/li&gt;
&lt;li&gt;동굴의 우상
&lt;ul&gt;
&lt;li&gt;개인의 특성에 따른 편협한 사고방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;종족의 우상
&lt;ul&gt;
&lt;li&gt;인간 중심적인 편협한 사고방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시장의 우상
&lt;ul&gt;
&lt;li&gt;언어와 진실이 일치하지 않아 발생하는 편협한 사고방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;극장의 우상
&lt;ul&gt;
&lt;li&gt;권위에 의해 발생하는 편협한 사고방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/fqgadhggd/</guid>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>학구소붕 鷽鳩笑鵬</title>
      <link>https://ariyn.github.io/posts/_a9likadq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;비둘기가 붕새를 비웃는다&lt;/li&gt;
&lt;li&gt;참새가 봉황의 뜻을 알지 못한다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/_a9likadq/</guid>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>vim에서 여러개의 파일을 열었을때 다음 파일로 넘어가는법</title>
      <link>https://ariyn.github.io/posts/utgrfchew/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt;을 통해서 다음 파일로 넘어갈 수 있다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wn&lt;/code&gt;으로 저장하고 다음 파일로 넘어가기도 가능하다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/utgrfchew/</guid>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>사족을 넣을때 인용문구로 넣기</title>
      <link>https://ariyn.github.io/posts/49xpxgief/</link>
      <description>&lt;ul&gt;
&lt;li&gt;애매하기는 하지만 인용문구로 넣고, 색을 연하게 하니까 나름 보기 괘찮다&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.inflab.com/202201-event-postmortem/&#34;&gt;https://tech.inflab.com/202201-event-postmortem/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/49xpxgief/</guid>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>chrome에서 사용자 변경 단축키</title>
      <link>https://ariyn.github.io/posts/brdsgnnih/</link>
      <description>&lt;ul&gt;
&lt;li&gt;cmd + shift + m
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/chrome/answer/157179?hl=ko&amp;amp;co=GENIE.Platform%3DDesktop#zippy=%2C%ED%83%AD-%EB%B0%8F-%EC%B0%BD-%EB%8B%A8%EC%B6%95%ED%82%A4%2Cchrome-%EA%B8%B0%EB%8A%A5-%EB%8B%A8%EC%B6%95%ED%82%A4&#34;&gt;support.google.com&lt;/a&gt; 참고&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자 변경만을 위한 단축키는 아니지만, 쉽게 변경할 수 있음&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/brdsgnnih/</guid>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>침투적 생각</title>
      <link>https://ariyn.github.io/posts/olvxgnhha/</link>
      <description>&lt;ul&gt;
&lt;li&gt;머릿속에 끼어들어 빠져나오지 않는 안좋은 생각들&lt;/li&gt;
&lt;li&gt;손톱 사이에 종이가 낀다던지&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/olvxgnhha/</guid>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>GOTO문은 하나의 함수 안에서만 사용이 가능하다</title>
      <link>https://ariyn.github.io/posts/pw2fcfbyq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;func main() {&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;dest1:&amp;lt;/br&amp;gt;	fmt.Println(&amp;quot;Hello, playground&amp;quot;)&amp;lt;/br&amp;gt;	goto dest1&amp;lt;/br&amp;gt;	&amp;lt;/br&amp;gt;// goto dest2 -&amp;gt; dest2 not defined error&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;func x() {&amp;lt;/br&amp;gt;// dest2: -&amp;gt; dest2 defined and not used error&amp;lt;/br&amp;gt;return &amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/pw2fcfbyq/</guid>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>메논의 역설</title>
      <link>https://ariyn.github.io/posts/_z87fdhcl/</link>
      <description>&lt;ul&gt;
&lt;li&gt;플라톤의 &lt;code&gt;메논&lt;/code&gt;에서 나온 역설
&lt;ul&gt;
&lt;li&gt;사람이 어떠한 지식을 알고 있다면, 배울 필요가 없다&lt;/li&gt;
&lt;li&gt;사람이 어떠한 지식을 알고 있지 않다면, 무엇을 배워야 할지 모르기 때문에, 배울 수 없다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소크라테스는 &lt;code&gt;상기설&lt;/code&gt;을 통해서 반박한다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;우리가 모르는거지, 영혼은 수많은 윤회를 통해 알고 있다고 하는 것&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ariyn.github.io/404.html&#34;&gt;kczP9fIPa&lt;/a&gt;이 이 역설을 깰 수 있는거 아닐까?
&lt;ul&gt;
&lt;li&gt;우연한 행동들과 경험이 쌓여, 지식을 구성하게 된다&lt;/li&gt;
&lt;li&gt;무엇을 배워야 할지 모르기 때문에, 우연히 읽은것들이 지식을 구성하게 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/_z87fdhcl/</guid>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>하이데거는 한나 아렌트와 바람난 사이였다</title>
      <link>https://ariyn.github.io/posts/i5nfcsaj4/</link>
      <description>&lt;ul&gt;
&lt;li&gt;하이데거는 나치였고, 한나 아렌트는 &lt;code&gt;전체주의의 기원&lt;/code&gt;을 썼음에도 불구하고&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hani.co.kr/arti/culture/culture_general/153322.html&#34;&gt;https://www.hani.co.kr/arti/culture/culture_general/153322.html&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;한나 아렌트와 하이데거에 대해 어렵게 쓴 글&lt;/li&gt;
&lt;li&gt;철학과 교수가 쓴 글&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/i5nfcsaj4/</guid>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>말콤 맥린</title>
      <link>https://ariyn.github.io/posts/mworbbdq9/</link>
      <description>&lt;ul&gt;
&lt;li&gt;현대 컨테이너의 아버지&lt;/li&gt;
&lt;li&gt;트럭의 짐칸을 떼어 내서 화물선에 실는 방법을 고안함
&lt;ul&gt;
&lt;li&gt;당시 미국 법에는 &lt;code&gt;트럭이 바다를 이동하면 안된다&lt;/code&gt;는 법이 있었음&lt;/li&gt;
&lt;li&gt;이 법을 피하기 위해 트럭의 일부(=짐칸)만 화물선에 선적함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유조선을 개조해서 테스트를 했고, 11m의 철제 컨테이너를 만듬
&lt;ul&gt;
&lt;li&gt;오늘날까지 사용되는 12m 철제 컨테이너의 규격이 탄생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;본격적으로 서비스를 시작하자 상/하역 비용은 36배나 낮아짐
1톤당 5.86$에서 16센트로 낮아짐&lt;/li&gt;
&lt;li&gt;맥린은 씨랜드 서비스라는 운송회사를 설립하였다
&lt;ul&gt;
&lt;li&gt;씨랜드는 30년간 사업을 하다가, 99년 머스크에 합병됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The BOX 책이 컨테이너와 그의 이야기를 다룬 책 #책 #읽을꺼리&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/mworbbdq9/</guid>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>컨테이너</title>
      <link>https://ariyn.github.io/posts/afjgxsqeo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;화물수송에 사용하기 위해서는, ISO 6346에 따라서 소유주와 번호가 등록되어야 한다
&lt;ul&gt;
&lt;li&gt;ISO 6436은 BIC(Bureau International des Containers)에서 관리하며, 유니크함&lt;/li&gt;
&lt;li&gt;전세계 모든 세관은 BIC에서 정보를 조회함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;길이는 10&amp;rsquo;(피트), 20&amp;rsquo;, 40&amp;rsquo;, 45&amp;rsquo;가 있으며 폭은 8피트로 동일하다
&lt;ul&gt;
&lt;li&gt;높이의 경우 8피트 6인치가 가장 많으나, 종류에 따라 다른것도 있는 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 덕분에 컨테이너에 물건을 싣고 나서, 내리기 전까지 모든 과정이 표준화 될 수 있었음
&lt;ul&gt;
&lt;li&gt;물류사의 창고에서 싣고 나면, 육상, 해상, 기차 모든 과정이 컨테이너만을 움직이면 됨&lt;/li&gt;
&lt;li&gt;전세계 물류체인이 발달할 수 있었던 것은, 이른 표준화 과정이 있었기 때문에&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/afjgxsqeo/</guid>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Pay wall</title>
      <link>https://ariyn.github.io/posts/5fouwod_c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;돈을 내야지 보이도록 하는 그 기능을 의미함&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/5fouwod_c/</guid>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>하방압력</title>
      <link>https://ariyn.github.io/posts/ddodrmnsf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;일반적으로 경제분야에서 사용되는 단어&lt;/li&gt;
&lt;li&gt;아랫쪽으로 내려가려는 힘(?)&lt;/li&gt;
&lt;li&gt;보이지 않는 모멘텀&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ddodrmnsf/</guid>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>dockerfile에서 자주 사용되는 것들</title>
      <link>https://ariyn.github.io/posts/rov0rloae/</link>
      <description>&lt;ul&gt;
&lt;li&gt;FROM docker_image:version&lt;/li&gt;
&lt;li&gt;RUN cli command with arguments&lt;/li&gt;
&lt;li&gt;ENV key=value&lt;/li&gt;
&lt;li&gt;WORKDIR /path/to/working/directory&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rov0rloae/</guid>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git clone할 때, 마지막 한개의 커밋만 가져오는 방법</title>
      <link>https://ariyn.github.io/posts/zxk8l4zhs/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone --depth 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zxk8l4zhs/</guid>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git clone할 때, 특정 브랜치만 가져오는 방법</title>
      <link>https://ariyn.github.io/posts/afg55odu1/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone -b ${BRANCH_NAME} --single-branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;single-branch의 역할?&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/afg55odu1/</guid>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>github에서 private repository를 personal access token으로 접속하는 방법</title>
      <link>https://ariyn.github.io/posts/n7abkj6kg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://${TOKEN}:x-oauth-basic@github.com/user/repo.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/n7abkj6kg/</guid>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>localstack에서 aws account id를 설정하는 방법</title>
      <link>https://ariyn.github.io/posts/ct74rtp9i/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TEST_AWS_ACCOUNT_ID=&amp;quot;1234567890&amp;quot; localstack start -d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ct74rtp9i/</guid>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>curl에서 userAgent를 바꾸는 방법</title>
      <link>https://ariyn.github.io/posts/l_v01_w8q/</link>
      <description>&lt;ul&gt;
&lt;li&gt;-A 옵션
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl -A &amp;quot;Mozilla&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/l_v01_w8q/</guid>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>jq에서 tsv로 출력하기</title>
      <link>https://ariyn.github.io/posts/l4eizon09/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jq &#39;[] | @tsv&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/l4eizon09/</guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>logstash에서 json을 파싱할 때, root에 추가하기</title>
      <link>https://ariyn.github.io/posts/mtkokevx0/</link>
      <description>&lt;ul&gt;
&lt;li&gt;json filter plugin을 사용하고 target을 지정하지 않으면 root로 들어가게 된다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;filter {&amp;lt;/br&amp;gt;  grok {&amp;lt;/br&amp;gt;    match =&amp;gt; &amp;quot;test %{GREEDYDATA:jsonString}&amp;quot;&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;  json {&amp;lt;/br&amp;gt;    source =&amp;gt; &amp;quot;jsonString&amp;quot;&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-filters-json.html#plugins-filters-json-target&#34;&gt;https://www.elastic.co/guide/en/logstash/current/plugins-filters-json.html#plugins-filters-json-target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/mtkokevx0/</guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>TIL 회고</title>
      <link>https://ariyn.github.io/posts/ztj6o7_cw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;최초 til은 6/25에 공병우 박사님에 관련된 til
&lt;ul&gt;
&lt;li&gt;{{[[embed]]: &lt;a href=&#34;WcI_vPRx5&#34;&gt;공병우 박사님은 1907년생이다. #TIL&lt;/a&gt;}}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오늘 (12/28)까지 187일동안 til 작성
&lt;ul&gt;
&lt;li&gt;그동안 작성한 til은 총 148개
&lt;ul&gt;
&lt;li&gt;하루에 약 0.8개씩 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;타입별
&lt;ul&gt;
&lt;li&gt;개발관련 86개&lt;/li&gt;
&lt;li&gt;비 개발 62개&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;태그별
&lt;ul&gt;
&lt;li&gt;shell이 20개로 가장 많다.&lt;/li&gt;
&lt;li&gt;til 태그가 달린 파일들의 정성적 분석 필요
&lt;ul&gt;
&lt;li&gt;각 태그별 그래프&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;태그 한 개도 많다.
&lt;ul&gt;
&lt;li&gt;이말은 아직 태그를 다는 방법이 정립되지 않았다는 뜻&lt;/li&gt;
&lt;li&gt;오랜 기간 관심을 가지고 공부하는 것이 적다는 뜻&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TIL을 작성한 이유
&lt;ul&gt;
&lt;li&gt;블로그를 쉽게 작성하기 위해서
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://johngrib.github.io/wiki/memo/2021/&#34;&gt;기계인간의 블로그&lt;/a&gt;를 보면서 느꼈다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;쉽게 작성하는 것도 블로그를 꾸준하기 좋은 방법이구나&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;즉 하루에 한 줄씩 적고, 그것을 통해서 블로그를 운영하기 위해서 TIL을 시작함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;학습하는 방법을 학습하기 위해
&lt;ul&gt;
&lt;li&gt;[[AC2]] 과정에서 &lt;code&gt;학습&lt;/code&gt;그 자체가 주제로 자주 나왔음
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;한 분야의 전문성은 다른 분야의 전문성으로 즉각 전이되지 않는다. 그러나 학습에 대한 전문성은 즉각 다른분야의 전문성으로 전이된다&lt;/code&gt;라는 이야기를 들음&lt;/li&gt;
&lt;li&gt;따라서 학습하는 방법에 대해 학습하기 위해 진행함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;github 잔디를 매일 쉽게 심기 위해
&lt;ul&gt;
&lt;li&gt;TIL을 작성하는 roam research는 매일 사용하고 있음.&lt;/li&gt;
&lt;li&gt;따라서 이걸 매일 커밋하고 깃헙에 올려 놓으면, 자동으로 커밋됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세상은 그냥 넘어가기에는 너무 재미있는것들이 많기 때문에
&lt;ul&gt;
&lt;li&gt;최초의 TIL이 개발 이외의 것인 이유&lt;/li&gt;
&lt;li&gt;매일매일 개발만 배우기에는 너무 흥미로운것들이 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그럼 그 효과는?
&lt;ul&gt;
&lt;li&gt;블로그를 쉽게 작성하기 위해서
&lt;ul&gt;
&lt;li&gt;아직 시작도 못함
&lt;ul&gt;
&lt;li&gt;TIL은 쌓이고 있으나, 어떤것들을 공개해야 할지, 공개는 어떤식으로 해야할지 고민중인 것들이 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그나마 좋은점이라고 하면, TIL을 쓰면 쓸 수록 일단 블로그 내용이 더 많이 생긴다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;학습하는 방법을 학습하기 위해
&lt;ul&gt;
&lt;li&gt;그나마 잘 동작한게 아닐까
&lt;ul&gt;
&lt;li&gt;여전히 애매하게 배우는경우가 많지만, 조금 더 자세하게 배우려고 노력했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;문제가 있었을 때 기존에는 &lt;code&gt;이렇게 하면 된다&lt;/code&gt;까지만 배우고 끝났지만, 이제는 &lt;code&gt;왜 이렇게 되는가&lt;/code&gt;까지 공부하기 위해 노력함
&lt;ul&gt;
&lt;li&gt;적어도 기존보다 더 세세하게 배울 기회들이 생겼음&lt;/li&gt;
&lt;li&gt;물론 아직 못하는 경우가 많음
&lt;ul&gt;
&lt;li&gt;왜 못할까?
&lt;ul&gt;
&lt;li&gt;문제가 생겼을 때, 문제를 해결하기 바쁘다
&lt;ul&gt;
&lt;li&gt;개발관련인 경우&lt;/li&gt;
&lt;li&gt;당장 무엇인가를 해야하는 경우가 있다&lt;/li&gt;
&lt;li&gt;특히나 당장 해결 하고 나서도 해야할 일들이 많은 경우가 많다&lt;/li&gt;
&lt;li&gt;따라서 심적으로 이 이상 진행하기 싫어지는 경우가 많다.&lt;/li&gt;
&lt;li&gt;어떻게 해결해야 할까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;무엇을 더 배워야 할지 잘 모르는 경우가 많다
&lt;ul&gt;
&lt;li&gt;단순한 것을 배웠기 때문에
&lt;ul&gt;
&lt;li&gt;그렇지만 더 배울것이 많은 경우에도 모른다면 &lt;code&gt;단순하기 때문에, 이것 이상은 배울것이 없다&lt;/code&gt;라고 생각하는 경우가 많다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;아마도 내가 잘 아는지 모르는지 모르는 경우일 수 있지 않을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그닥 배우고 싶지 않다
&lt;ul&gt;
&lt;li&gt;멘탈모델이 문제&lt;/li&gt;
&lt;li&gt;더 많은 것들에 대해, 더 풍부하게 호기심을 가지는 노력이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;까먹게된다
&lt;ul&gt;
&lt;li&gt;TIL을 작성해야 한다는 것을 까먹음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;github 잔디를 매일 쉽게 심기 위해
&lt;ul&gt;
&lt;li&gt;잘 동작 안함&lt;/li&gt;
&lt;li&gt;잘 되기는 했는데, 매일 동작 안한 경우도 많았다.
&lt;ul&gt;
&lt;li&gt;심지어 문제가 생기면서, 수백개가 동시에 pr되는 경우도 많았다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;앞으로는?
&lt;ul&gt;
&lt;li&gt;문제를 해결할 때, 시간을 낼 수는 없을까?
&lt;ul&gt;
&lt;li&gt;뽀모도로등의 쉬는시간 같이 잠시 시간을 낸다던지.&lt;/li&gt;
&lt;li&gt;특정한 시간을 정해서 좀 더 깊게 배우고, 정리하도록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;정리하는 동안, 컨텍스트 스위칭이 잘 될 수 있도록
&lt;ul&gt;
&lt;li&gt;이건 롬 리서치를 좀 더 잘 사용하는 방법인데, 머릿속에 있는 생각을 잘 정리하는 방법이 필요하다.&lt;/li&gt;
&lt;li&gt;그래서 정리하는데 시간을 내는 부담감을 줄일 수 있도록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세상에 조금 더 호기심을 가지는 멘탈모델을 가지자
&lt;ul&gt;
&lt;li&gt;좀 더&lt;/li&gt;
&lt;li&gt;세상에는 재밌는 것들이 훨씬 많으니까&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ztj6o7_cw/</guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>ubuntu에서 zlib 설치하는 법</title>
      <link>https://ariyn.github.io/posts/ckqj9nftb/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install zlib1g-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;배포판을 사용할꺼면
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install zlib1g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ckqj9nftb/</guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>계제</title>
      <link>https://ariyn.github.io/posts/ev7zofebg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;계단이나 사닥다리를 밟아 나가듯이 어떤 일이 차차 진행되는 차례 또는 절차.&lt;/li&gt;
&lt;li&gt;어떤 일을 할 수 있게 된 형편이나 기회.&lt;/li&gt;
&lt;li&gt;계 階
&lt;ul&gt;
&lt;li&gt;섬돌 계
&lt;ul&gt;
&lt;li&gt;섬돌 : 집채와 뜰을 오르내릴 수 있게 만든 돌층계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;계단 階段&lt;/li&gt;
&lt;li&gt;단계 段階&lt;/li&gt;
&lt;li&gt;계급 階級&lt;/li&gt;
&lt;li&gt;층계 層階&lt;/li&gt;
&lt;li&gt;계층 階層&lt;/li&gt;
&lt;li&gt;꽤 재미있는 한자네.
&lt;ul&gt;
&lt;li&gt;(계층, 층계) (단계, 계단) 두개 다 순서만 다를 뿐, 동일한 한자를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;제 梯
&lt;ul&gt;
&lt;li&gt;사다리 제&lt;/li&gt;
&lt;li&gt;제대 梯隊
&lt;ul&gt;
&lt;li&gt;군대, 군함, 비행기 따위의 대형을 사다리꼴로 편성한 대&lt;/li&gt;
&lt;li&gt;군대에서 &lt;code&gt;제대 단위로 정렬&lt;/code&gt; 이런식으로 사용했던 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;제형 蹄形
&lt;ul&gt;
&lt;li&gt;사다리꼴의 옛 말&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이제 사다리 제가 들어간 단어들은 대부분 사라진 단어로 보인다.
&lt;ul&gt;
&lt;li&gt;제형, 운제, 선제 등등 사다리로 완전히 순화된 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ev7zofebg/</guid>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>~/.zprofile</title>
      <link>https://ariyn.github.io/posts/kzstscfvn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;터미널을 처음 열었을때 실행하는 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;. ~/.zshrc&lt;/code&gt; 를 넣어서 zshrc를 읽어오게 하자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/kzstscfvn/</guid>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git patch를 만드는 방법</title>
      <link>https://ariyn.github.io/posts/h75zxibbl/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;git stash list // patch 파일 만들 stash 확인&amp;lt;/br&amp;gt;git stash show -p stash@{0} &amp;gt; filename.patch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/h75zxibbl/</guid>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git diff --diff-filter=U</title>
      <link>https://ariyn.github.io/posts/wb8daxpug/</link>
      <description>&lt;ul&gt;
&lt;li&gt;unmerged옵션&lt;/li&gt;
&lt;li&gt;이외에도 존재하는 옵션으로는
&lt;ul&gt;
&lt;li&gt;Added (A)&lt;/li&gt;
&lt;li&gt;Copied (C)&lt;/li&gt;
&lt;li&gt;Modified (M)&lt;/li&gt;
&lt;li&gt;Unmerged (U)&lt;/li&gt;
&lt;li&gt;Renamed (R)&lt;/li&gt;
&lt;li&gt;Type changed (T)&lt;/li&gt;
&lt;li&gt;Unknown (X)&lt;/li&gt;
&lt;li&gt;Broken (B)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/wb8daxpug/</guid>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>moto에서 aws account id를 모킹하는 방법</title>
      <link>https://ariyn.github.io/posts/sa3nzeqjc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;MOTO_ACCOUNT_ID을 environment로 주어서 테스트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOTO_ACCOUNT_ID=12345 moto_server -p3000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/sa3nzeqjc/</guid>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`=?UTF-8?B?`로 시작하는 문자열</title>
      <link>https://ariyn.github.io/posts/k6ofqb7vp/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MIME#Encoded-Word&#34;&gt;MIME Encoded-Word&lt;/a&gt;라고 한다.
&lt;ul&gt;
&lt;li&gt;RFC 2047에 명시되어 있는 규격&lt;/li&gt;
&lt;li&gt;전체 포맷은 &lt;code&gt;=?&lt;/code&gt;Charset&lt;code&gt;?&lt;/code&gt;Encoding&lt;code&gt;?&lt;/code&gt;Encoded Text&lt;code&gt;?=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Charset
&lt;ul&gt;
&lt;li&gt;IANA에 등록된 캐릭터 셋&lt;/li&gt;
&lt;li&gt;보통은 UTF-8이 나오게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encoding
&lt;ul&gt;
&lt;li&gt;Q인경우 Q-encoding&lt;/li&gt;
&lt;li&gt;B인경우 base64 인코딩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encoded Text
&lt;ul&gt;
&lt;li&gt;Encoding에 명시된 방법으로 인코딩된 텍스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;간혹 이메일을 통채로 열어보았을때, 이런 문자가 나오는데, 아무래도 이메일의 메타 정보가 MIME으로 작성되어 있다보니 그런 것 같다.
&lt;ul&gt;
&lt;li&gt;좀 더 정확히는 MIME가 이메일의 정보를 기술하기 위해 만들어진 포맷 (Multipurpose Internet Mail Extensions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/k6ofqb7vp/</guid>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>한글의 띄어쓰기는 해외에서 도입된 방식</title>
      <link>https://ariyn.github.io/posts/1rjkw8cvs/</link>
      <description>&lt;ul&gt;
&lt;li&gt;서재필과 주시경이 발간한 독립신문(1896/04/07)에서 처음 사용됨&lt;/li&gt;
&lt;li&gt;띄어쓰기의 이유를 이렇게 설명함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;우리 신문이 한문은 안쓰고 다만 국문으로만 쓰는것은 상하귀천이 다 보게 함이라.&amp;lt;/br&amp;gt;또 국문의 구절을 이렇게 띄어쓴 이유는, 누구라도 이 신문을 보기가 쉽고 신문속에 있는 말을 자세히 알아보게 함이라.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일본이 띄어쓰기가 없어 한자를 포기 못하는 것을 본다면, 이들의 노력이 한자를 한국어에서 빼는 발판이 된게 아닐까.&lt;/li&gt;
&lt;li&gt;영어의 조사가 띄어쓰기의 대상에 포함된다는 것을 생각해보면, 저때 조사는 띄어쓰지 않는다고 정한게 얼마나 다행인걸까&amp;hellip; (혹은 너무 길어져서 띄어쓰지 않도록 정한것일까?)&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/1rjkw8cvs/</guid>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>실정법</title>
      <link>https://ariyn.github.io/posts/xpmlpwpho/</link>
      <description>&lt;ul&gt;
&lt;li&gt;국어 사전에 따르자면, &lt;code&gt;현실에 정립되어 시행되고 있는 법&lt;/code&gt;이라고 한다.
&lt;ul&gt;
&lt;li&gt;일반적으로 사용되는 용례는 아마 이쪽에 해당하는것 같다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;이는 미국의 실정법을 위반한 사례로서 (...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;성문법, 관습법, 판례법이 실정법에 포함된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그러나 위키백과에 따르자면 &lt;code&gt;자연적으로 탄생한 자연법에 대비되는 법률&lt;/code&gt;이라고 한다.
&lt;ul&gt;
&lt;li&gt;자연법의 개념은 조금 복잡하지만, &lt;code&gt;자연히 존재하는 언제, 어디서나 유효한 보편적 불변적 법칙&lt;/code&gt;이라고 설명한다.
&lt;ul&gt;
&lt;li&gt;천부인권의 개념이 자연법에서 나온 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;악을 멀리하고, 선을 가까이 하라&lt;/code&gt;는 시대를 넘어 인류 역사에 꾸준히 있었던 개념
&lt;ul&gt;
&lt;li&gt;그러나 무엇이 악이고, 무엇이 선인지에 대한 판단은 한 시대, 집단, 개개인마다 다를 수 밖에 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어떻게 보면 자연법은 도덕이라 불러도 무방할 것 같고, 실정법은 &lt;code&gt;자연법의 애매한 부분을 깔끔하게 정리하는 보조체계&lt;/code&gt;에 가깝다고 이해할 수 있을 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/xpmlpwpho/</guid>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Before you speak, THINK!</title>
      <link>https://ariyn.github.io/posts/qx-6mfk0_/</link>
      <description>&lt;ul&gt;
&lt;li&gt;T: Is it True?&lt;/li&gt;
&lt;li&gt;H: Is it Helpful?&lt;/li&gt;
&lt;li&gt;I: Is it Inspiring?&lt;/li&gt;
&lt;li&gt;N: Is it Necessary?&lt;/li&gt;
&lt;li&gt;K: Is it Kind?&lt;/li&gt;
&lt;li&gt;많은 고민을 하는 주제인 것 같다&amp;hellip;.
&lt;ul&gt;
&lt;li&gt;이것만 잘 지켜도, 정말 많은 후회가 없을것 같은데&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/qx-6mfk0_/</guid>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>mysql에서 mod하는 방법</title>
      <link>https://ariyn.github.io/posts/iwf-fiwmv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT MOD(n, m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT n MOD m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT n % m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE n%m = 0&lt;/code&gt;과 같이도 가능하다&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.habonyphp.com/2019/02/mod.html&#34;&gt;출처&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/iwf-fiwmv/</guid>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>파일을 라인별로 나누는 방법</title>
      <link>https://ariyn.github.io/posts/2zz5za7g0/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt; 커맨드를 사용하면 됨
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$PWD&lt;/code&gt;에 xa로 시작하는 파일들이 생기기 때문에, 주의해서 사용해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split -l 2000 filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2016894/how-can-i-split-a-large-text-file-into-smaller-files-with-an-equal-number-of-lin&#34;&gt;출처&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/2zz5za7g0/</guid>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>file write가 안되는 경우</title>
      <link>https://ariyn.github.io/posts/294uvuols/</link>
      <description>&lt;ul&gt;
&lt;li&gt;문제의 코드
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;f, err := os.OpenFile(&amp;quot;/tmp/test&amp;quot;, os.Append, 0755)&amp;lt;/br&amp;gt;if err != nil {&amp;lt;/br&amp;gt;  panic(err)&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;fmt.Fprintln(f, &amp;quot;test&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그러나 쓰기가 되지 않았고, fmt.Fprintln의 err을 확인했을때 아래의 오류가 나왔다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bad file descriptor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;확인해본 결과, O_APPEND는 우리의 생각과 다르게 access mode가 아니라고 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;The argument __flags__ must include one of the following __access modes__: **O_RDONLY**, **O_WRONLY**, or **O_RDWR**.  These request opening the file read-only, write-only, or read/write, respectively.&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/open.2.html&#34;&gt;https://man7.org/linux/man-pages/man2/open.2.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;open 커맨드의 man에 따르자면, access mode는 세가지. &lt;strong&gt;O_RDONLY&lt;/strong&gt;, &lt;strong&gt;O_WRONLY&lt;/strong&gt;, &lt;strong&gt;O_RDWR&lt;/strong&gt;인 듯 하다.
&lt;ul&gt;
&lt;li&gt;이 세개중 하나는 반드시 들어가야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각각의 플래그의 값은 이렇다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;O_RDONLY                          = 0x0&amp;lt;/br&amp;gt;O_WRONLY                          = 0x1&amp;lt;/br&amp;gt;O_RDWR                            = 0x2&amp;lt;/br&amp;gt;O_APPEND                          = 0x8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;따라서 O_APPEND만 사용하면 &lt;code&gt;0x8&lt;/code&gt;이 되는데, 첫번째 비트가 0이기 때문에, &lt;code&gt;O_RDONLY&lt;/code&gt;로 열리게 되는 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가로 golang에서 파일을 열 때 사용할 수 있는 플래그는 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;golang/src/os/file.go&amp;lt;/br&amp;gt;const (&amp;lt;/br&amp;gt;	// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.&amp;lt;/br&amp;gt;	O_RDONLY int = syscall.O_RDONLY // open the file read-only.&amp;lt;/br&amp;gt;	O_WRONLY int = syscall.O_WRONLY // open the file write-only.&amp;lt;/br&amp;gt;	O_RDWR   int = syscall.O_RDWR   // open the file read-write.&amp;lt;/br&amp;gt;	// The remaining values may be or&#39;ed in to control behavior.&amp;lt;/br&amp;gt;	O_APPEND int = syscall.O_APPEND // append data to the file when writing.&amp;lt;/br&amp;gt;	O_CREATE int = syscall.O_CREAT  // create a new file if none exists.&amp;lt;/br&amp;gt;	O_EXCL   int = syscall.O_EXCL   // used with O_CREATE, file must not exist.&amp;lt;/br&amp;gt;	O_SYNC   int = syscall.O_SYNC   // open for synchronous I/O.&amp;lt;/br&amp;gt;	O_TRUNC  int = syscall.O_TRUNC  // truncate regular writable file when opened.&amp;lt;/br&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;확인해보니 주석으로도 세개중 하나를 반드시 사용하라고 되어 있다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/294uvuols/</guid>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`문화는 시간이 지나면 양식만 남게된다. 정신을 남겨야 한다.`</title>
      <link>https://ariyn.github.io/posts/5exswqyxc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;배민에서 했다고 한다.&lt;/li&gt;
&lt;li&gt;하지만 출처를 찾을 수 없다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/5exswqyxc/</guid>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 이름이 붙은 리턴 변수들은 `Named return values`로 부른다.</title>
      <link>https://ariyn.github.io/posts/drr0-8t4y/</link>
      <description>&lt;ul&gt;
&lt;li&gt;막상 써야 할 때 튀어나오지 않는 단어 2순위&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/drr0-8t4y/</guid>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>sed에서 숫자를 검색하는 방법</title>
      <link>https://ariyn.github.io/posts/qfc_bozqa/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[:digit:]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/qfc_bozqa/</guid>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git log에서 해시값만 보이기</title>
      <link>https://ariyn.github.io/posts/jqox2ywov/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=format:&amp;quot;%h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;포맷을 &lt;code&gt;%H&lt;/code&gt;로 할 경우, 전체 해시 아이디가 보인다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%h&lt;/code&gt;의 경우, 7자리만 보임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jqox2ywov/</guid>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>untracted file을 지우는 방법</title>
      <link>https://ariyn.github.io/posts/5iva_p6yd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clean -f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fd&lt;/code&gt;를 할 경우, 폴더까지 삭제함&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/5iva_p6yd/</guid>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>docker run -it `--entrypoint` /bin/bash</title>
      <link>https://ariyn.github.io/posts/olhs1ftpz/</link>
      <description>&lt;ul&gt;
&lt;li&gt;entrypoint가 설정되어 있는 경우, 그것을 무시하기 위해서 사용&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/olhs1ftpz/</guid>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>jaeger를 production환경에서 사용하기</title>
      <link>https://ariyn.github.io/posts/awkde_8b-/</link>
      <description>&lt;ul&gt;
&lt;li&gt;all-in-one을 프로덕션 환경에서 사용해도 괜찮은 듯
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger/issues/551&#34;&gt;https://github.com/jaegertracing/jaeger/issues/551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이경우 scale out은 불가능하지만, 어차피 작은 서비스에서는 빠르게 jaeger를 적용하는 이점이 더 큼
&lt;ul&gt;
&lt;li&gt;prometheus도 하나의 인스턴스에서 동작하지 않는가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단 storage를 기본인 in-memory에서 실제의 다른것으로 변경해야 함
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jaegertracing.io/docs/1.29/deployment/#elasticsearch&#34;&gt;https://www.jaegertracing.io/docs/1.29/deployment/#elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너를 실행할 때 아래의 옵션을 넣어줘야 함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e SPAN_STORAGE_TYPE=elasticsearch&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;비워두고 실행하면, 가능한 옵션을 모두 볼 수 있다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[cassandra opensearch elasticsearch memory kafka badger grpc-plugin]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e ES_SERVER_URLS=&amp;lt;...&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;콤마로 분리된 형식이라고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run jaegertracing/all-in-one:latest --help&lt;/code&gt;를 하면, 파라미터를 전부 볼 수 있음&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/awkde_8b-/</guid>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>godot에서 타일셋의 콜리젼이 안보이거나 선택이 안될때</title>
      <link>https://ariyn.github.io/posts/fjuhqhcxv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;스크롤을 키웠다 내려보자&lt;/li&gt;
&lt;li&gt;단순히 고도 엔진의 버그로 보임&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/fjuhqhcxv/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>mysql user추가</title>
      <link>https://ariyn.github.io/posts/q5ilntcnv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sql&amp;lt;/br&amp;gt;CREATE USER &#39;{user}&#39;@&#39;{target_host}&#39; IDENTIFIED BY &#39;{password}&#39;;&amp;lt;/br&amp;gt;GRANT ALL PRIVILEGES ON {database}.{table} TO &#39;{user}&#39;@&#39;{target_host}&#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;target_host에 사용할 수 있는 것들
&lt;ul&gt;
&lt;li&gt;localhost&lt;/li&gt;
&lt;li&gt;%&lt;/li&gt;
&lt;li&gt;n.n.n.n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/q5ilntcnv/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>stephen&#39;s sausage roll</title>
      <link>https://ariyn.github.io/posts/tjmwlyp02/</link>
      <description>&lt;ul&gt;
&lt;li&gt;ch2 fallow earth
&lt;ul&gt;
&lt;li&gt;


&lt;ul&gt;
&lt;li&gt;언듯 간단해보임&lt;/li&gt;
&lt;li&gt;몇번 나왔던 퍼즐처럼 두번 굴리면 되지 않을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 1
&lt;ul&gt;
&lt;li&gt;소세지의 아랫쪽을 굽고, 포크로 찍어서 들고 나온 상황&lt;/li&gt;
&lt;li&gt;그러나 윗쪽을 찍는다면, 소세지를 뺄 수 없음&lt;/li&gt;
&lt;li&gt;따라서 아래를 찍어야 함&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 2
&lt;ul&gt;
&lt;li&gt;시도 1과 동일한 진입부지만, 소세지를 아랫쪽을 찍으려 함&lt;/li&gt;
&lt;li&gt;하지만 아랫쪽은 물에 의해서 막혀 있기 때문에 소세지를 찍을 수 없음&lt;/li&gt;
&lt;li&gt;따라서 새로운 시도가 필요하다는 것을 깨달음&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 3
&lt;ul&gt;
&lt;li&gt;전통적인 방식으로 굴려서 구워보기로 함&lt;/li&gt;
&lt;li&gt;구운것을 빼내고
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;포크로 찍을 수 있는 상태를 만든다.
&lt;ul&gt;
&lt;li&gt;그러나 공간이 좁아서, 두개를 한번에 구울수는 없다.&lt;/li&gt;
&lt;li&gt;위쪽 한번 아랫쪽 한번씩 구워야 함&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 움직이면서 굽는다.
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성공!
&lt;ul&gt;
&lt;li&gt;인줄 알았으나&amp;hellip;.&lt;/li&gt;
&lt;li&gt;들어올때와 동일한 루트를 사용해 나가기 때문에, 먼저 구워진 소시지의 위쪽이 타게된다&amp;hellip;&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 4
&lt;ul&gt;
&lt;li&gt;더 복잡한 방식의 풀이가 필요하다는 것을 깨달음&lt;/li&gt;
&lt;li&gt;따라서 이쪽에서 밀어보면 어떨까 싶지만 밀면 타게됨&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;키 포인트는 &amp;ldquo;소세지를 꼽는 포크의 위치를 다르게 한다&amp;rdquo; 일텐데 장소가 너무 좁음&lt;/li&gt;
&lt;li&gt;어차피 소세지가 하나고, 동일한 방향으로 되어 있으니 길쭉하고 꼽으면 안될까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 5
&lt;ul&gt;
&lt;li&gt;꼽지 않고, 굴려도 된다는 것을 깨달음&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 6
&lt;ul&gt;
&lt;li&gt;원래 시도 6이 5보다 먼저일 것 같은데&amp;hellip; 소시지의 한면을 완전히 구우면, 못들어감
5와같이 하려면 아랫쪽을 남겨둬야 함&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 7
&lt;ul&gt;
&lt;li&gt;처음에 소세지를 굽지 않고 빠져 나오면, 시도 3과 동일한 방법으로 한면을 굽고 빠져나올 수 있음&lt;/li&gt;
&lt;li&gt;추가로 이경우 소세지를 빼내면, 굽지 않은면이 위쪽!&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 8
&lt;ul&gt;
&lt;li&gt;시도 7에서 간단히 굴려서 들어가면 끝&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ch2 twisty farm
&lt;ul&gt;
&lt;li&gt;첫 인상은 넓다.&lt;/li&gt;
&lt;li&gt;저 두개의 소세지를 반대쪽으로 옮기는 방법을 찾으면 되는거겠지?&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;시도 1
&lt;ul&gt;
&lt;li&gt;우선 소세지 하나라도 옮겨보려고 한다&lt;/li&gt;
&lt;li&gt;이렇게 필요없는 소세지는 치워두고, 포크로 꼽아서 이동해보면 정작 넘어가서 뽑을 곳이 없다&lt;/li&gt;
&lt;li&gt;다른 방식으로 소세지를 넘겨야 함&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시도 2
&lt;ul&gt;
&lt;li&gt;우연히 발견해서 조금 김이 샜는데, 오른쪽에 소시지를 꼽으면, 중간에 뺄 수 있게 되어있다.&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;그러나 여기서 막히게 된다 (돌릴 수 없고, 밀수 없는 구조임)&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;두번째 소세지를 써야 할 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tjmwlyp02/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>비망록</title>
      <link>https://ariyn.github.io/posts/yx7scicy-/</link>
      <description>&lt;ul&gt;
&lt;li&gt;備忘録&lt;/li&gt;
&lt;li&gt;備 비
&lt;ul&gt;
&lt;li&gt;대비하다, 준비하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;忘 망
&lt;ul&gt;
&lt;li&gt;잊다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;録 록
&lt;ul&gt;
&lt;li&gt;기록하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;잊는것을 대비해 기록하는 것
&lt;ul&gt;
&lt;li&gt;영어로는 commonplace book&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/yx7scicy-/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>스케쥴러 실행시, 테이블이 없어서 실행되지 않는 경우</title>
      <link>https://ariyn.github.io/posts/nkbzgocvw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WARNING - Failed to log action with (sqlite3.OperationalError) no such table: log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;airflow_home이 잘 설정되어 있는지 보고, &lt;code&gt;airflow db init&lt;/code&gt;를 하자
&lt;ul&gt;
&lt;li&gt;기본적으로는 &lt;code&gt;~/airflow&lt;/code&gt;로 설정되는듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/nkbzgocvw/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>알 카에다의 역사</title>
      <link>https://ariyn.github.io/posts/jigpaezuv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;미군이 아프가니스탄에서 철수한 이후, 이에 대해서 자세히 알아야 겠다는 생각이 들었다.&lt;/li&gt;
&lt;li&gt;모든 발단
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;79 소련의 아프간 침공으로 시작됨
&lt;ul&gt;
&lt;li&gt;그 직전에 아프가니스탄에서는 왕정이였으나, 쿠데타가 일어났었다 (&amp;lsquo;74)&lt;/li&gt;
&lt;li&gt;쿠데타는 당시 국왕이였던 자히르 샤의 사촌 동생이며 총리였던 모하마드 다우드 칸이 공산주의 세력을 등에 업고 일으켰다&lt;/li&gt;
&lt;li&gt;하지만 시간이 지날수록 공산주의 세력들과 거리를 두게 되었다&lt;/li&gt;
&lt;li&gt;공산주의 세력과 군벌세력은 다시 한번 혁명을 일으켰고, 민주정이 시작됨&lt;/li&gt;
&lt;li&gt;소련의 침공에는 많은 견해가 있는듯 하지만, 민주적인 정책들이 마음에 들지는 않았던 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;미국은 아프간의 토호세력과 군벌세력들에 간접적 지원을 하기 시작함
&lt;ul&gt;
&lt;li&gt;수많은 돈과 무기들&lt;/li&gt;
&lt;li&gt;당시 아프가니스탄에서는 6개의 주된 무장세력이 존재했었음&lt;/li&gt;
&lt;li&gt;이중 하나가 탈레반&lt;/li&gt;
&lt;li&gt;탈레반은 종교와 정치를 혼합한 정책으로 인기를 얻기 시작함&lt;/li&gt;
&lt;li&gt;그와 동시에 미국의 지원을 등에 업고 성장함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;미국의 지원과 게릴라의 활약으로 소련은 아프간에서 철수함 (&amp;lsquo;89)
&lt;ul&gt;
&lt;li&gt;이후 소련 전쟁에서 활약했던 단체들을 중심으로 내전이 벌어짐&lt;/li&gt;
&lt;li&gt;다른 군벌에 비해, 원리주의적 교리를 내세우던 탈레반&lt;/li&gt;
&lt;li&gt;미군의 지원도 꽤 괜찮았기 때문에, 탈레반은 내전에서 승리하고 아프가니스탄 토호 연합국을 세우게 된다.&lt;/li&gt;
&lt;li&gt;이후 아프간은 탈레반의 독재가 시작되고, 우리가 아는 그 상황이 된다. (원리주의 종교로 인한 여러 고통들)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;탈레반의 휘하는 아니였으나, 소련에 대항해 함께 싸우던 단체중 하나가 알 카에다
&lt;ul&gt;
&lt;li&gt;소련과의 전쟁이 끝나고 나서, 알 카에다는 미국이 이라크를 침공하는 것을 봄 (&amp;lsquo;90)&lt;/li&gt;
&lt;li&gt;전문가들은 이 광경이 알 카에다를 비롯한 아랍세력에게, 미국에대한 특정한 이미지를 심어주었을 것이라고 봄&lt;/li&gt;
&lt;li&gt;이후 알 카에다는 미국을 중동에서 몰아내야겠다고 판단함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jigpaezuv/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>조셉 캠벨의 영웅담 구조</title>
      <link>https://ariyn.github.io/posts/j6noorn-u/</link>
      <description>&lt;ul&gt;
&lt;li&gt;신화학자
&lt;ul&gt;
&lt;li&gt;영웅 신화의 아키타입을 정리
17가지 서사의 구조&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brunch.co.kr/@brunchuxg6/53&#34;&gt;https://brunch.co.kr/@brunchuxg6/53&lt;/a&gt;
7가지 캐릭터의 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/j6noorn-u/</guid>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>2147483647</title>
      <link>https://ariyn.github.io/posts/xpbuf5hnu/</link>
      <description>&lt;p&gt;2^32 - 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int형의 마지막 수이며 마지막 소수이며 마지막 메르헨 소수&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/xpbuf5hnu/</guid>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>gitlens</title>
      <link>https://ariyn.github.io/posts/dwfkeacrh/</link>
      <description>&lt;ul&gt;
&lt;li&gt;해당 코드 라인의 커밋 메시지를 볼 수 있는 툴&lt;/li&gt;
&lt;li&gt;vs code의 플러그인&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; intelli j용으로는 없을까?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/GoLandIDE/status/1083732621530726401?t=h32BHzs6GEjjfvCrHwS-VA&amp;amp;s=19&#34;&gt;https://twitter.com/GoLandIDE/status/1083732621530726401?t=h32BHzs6GEjjfvCrHwS-VA&amp;amp;s=19&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/dwfkeacrh/</guid>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>뉴메레르</title>
      <link>https://ariyn.github.io/posts/t2dhxvlum/</link>
      <description>&lt;ul&gt;
&lt;li&gt;Numéraire&lt;/li&gt;
&lt;li&gt;모든 상품의 교환 비율을 설명하기 위해, 기준이 되는 상품
&lt;ul&gt;
&lt;li&gt;금&lt;/li&gt;
&lt;li&gt;미 달러&lt;/li&gt;
&lt;li&gt;기축 통화가 일종의 뉴메레르인듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Num%C3%A9raire&#34;&gt;https://en.wikipedia.org/wiki/Num%C3%A9raire&lt;/a&gt; #번역&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/t2dhxvlum/</guid>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>인슐린 저항성</title>
      <link>https://ariyn.github.io/posts/aev36ilz5/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;인슐린 저항성이 높을 경우, 인체는 이미 포도당이 충분함에도 불구하고 인슐린에 의해 포도당의 축적이나 포도당 생성이 조절되어야 함에도 불구하고 계속해서 인슐린을 만들어 내고 그로 인해 췌장에서 인슐린을 만들어내는 베타세포는 과부하로 결국 그 기능을 못하고 대미지를 입게 되기도 한다.&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;출처 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%8A%90%EB%A6%B0_%EC%A0%80%ED%95%AD%EC%84%B1&#34;&gt;위키&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/aev36ilz5/</guid>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>--preferred-challenges dns</title>
      <link>https://ariyn.github.io/posts/aavgzfyyr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;certbot에서 도메인 네임으로 인증하는 옵션&lt;/li&gt;
&lt;li&gt;설치된 플러그인에 따라 인증 방법을 지원할 수도, 안할수도 있다.&lt;/li&gt;
&lt;li&gt;http, dns&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/aavgzfyyr/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>`sudo usermod -aG docker $USER`</title>
      <link>https://ariyn.github.io/posts/vs-2alikq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;도커 커맨드를 sudo 없이 쓰게 하는 방법&lt;/li&gt;
&lt;li&gt;usermod
&lt;ul&gt;
&lt;li&gt;-a : append&lt;/li&gt;
&lt;li&gt;-G : add to other group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이경우 sudo를 사용했기 때문에, user가 admin으로 되어있게 된다.
&lt;ul&gt;
&lt;li&gt;따라서 docker가 admin 그룹에 포함되게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/vs-2alikq/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>apt가 설치할 때 yes를 물어보는 경우</title>
      <link>https://ariyn.github.io/posts/aflryfrwt/</link>
      <description>&lt;ul&gt;
&lt;li&gt;대충 짐작으로 &amp;ldquo;추가 패키지가 딸려오는 경우&amp;quot;로만 생각했었는데, AskUbuntu에 따르면 3가지 경우가 있다고 한다.
&lt;ul&gt;
&lt;li&gt;추가적인 패키지가 딸려오는 경우&lt;/li&gt;
&lt;li&gt;시스템에 필수적인 패키지를 지우는 경우&lt;/li&gt;
&lt;li&gt;과거버전으로 명시한 패키지를 바꾸는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이중 &lt;code&gt;시스템에 필수적인 패키지를 지우는 경우&lt;/code&gt;에는 -y옵션을 주어도 꼭 물어본다고 한다.&lt;/li&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://askubuntu.com/questions/441793/why-apt-get-does-not-ask-permission-to-continue-before-installing-small-packages&#34;&gt;https://askubuntu.com/questions/441793/why-apt-get-does-not-ask-permission-to-continue-before-installing-small-packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/aflryfrwt/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>aws cli 자동완성을 zsh에서 사용하는 방법</title>
      <link>https://ariyn.github.io/posts/tdj1-h9ev/</link>
      <description>&lt;ul&gt;
&lt;li&gt;~/.zshrc에 아래의 세 줄을 추가
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;autoload bashcompinit &amp;amp;&amp;amp; bashcompinit&amp;lt;/br&amp;gt;autoload -Uz compinit &amp;amp;&amp;amp; compinit&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;complete -C &amp;quot;$(which aws_completer)&amp;quot; aws&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-completion.html&#34;&gt;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-completion.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;autoload의 역할
&lt;ul&gt;
&lt;li&gt;배시 스크립트에 작성된 함수를 파일 이름으로 호출하는 함수로 만드는 역할인 듯&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/harrythegreat/zsh-%EC%98%A4%ED%86%A0%EB%A1%9C%EB%94%A9-%ED%95%A8%EC%88%98%EB%A7%8C%EB%93%A4%EA%B8%B0-3d1faff1a68e&#34;&gt;https://medium.com/harrythegreat/zsh-%EC%98%A4%ED%86%A0%EB%A1%9C%EB%94%A9-%ED%95%A8%EC%88%98%EB%A7%8C%EB%93%A4%EA%B8%B0-3d1faff1a68e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30840651/what-does-autoload-do-in-zsh&#34;&gt;https://stackoverflow.com/questions/30840651/what-does-autoload-do-in-zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;auto complete 방법
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devmanual.gentoo.org/tasks-reference/completion/index.html/&#34;&gt;https://devmanual.gentoo.org/tasks-reference/completion/index.html/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;complete 명령어를 사용
&lt;ul&gt;
&lt;li&gt;man complete로는 나오지 않는다.&lt;/li&gt;
&lt;li&gt;인터넷에서 찾을 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tdj1-h9ev/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>beanstalk에서 golang을 사용할 때 주의할 점</title>
      <link>https://ariyn.github.io/posts/zfvgtxxdo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;golang을 사용할 때, 몇가지 옵션을 사용할 수 있다.
&lt;ul&gt;
&lt;li&gt;Buildfile을 사용한 빌드&lt;/li&gt;
&lt;li&gt;application.go를 자동으로 빌드&lt;/li&gt;
&lt;li&gt;bin/application 바이너리를 사용
&lt;ul&gt;
&lt;li&gt;root에 Procfile이 필수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 주의할 점은, 앞에서 하나라도 만족되면 이후 것들이 진행되지 않는다.
&lt;ul&gt;
&lt;li&gt;따라서 application.go가 있다면, Procfile에서 bin/application을 실행하라고 해도 실행되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로그에서 확인 할 것
&lt;ul&gt;
&lt;li&gt;no Buildfile found, checking application.go file&lt;/li&gt;
&lt;li&gt;이런식으로 계속 있을것.&lt;/li&gt;
&lt;li&gt;어디까지 로그가 찍혀 있는지 확인필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zfvgtxxdo/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>branch의 upstream branch가 다른 브랜치로 설정된 경우</title>
      <link>https://ariyn.github.io/posts/wbz9gpvc7/</link>
      <description>&lt;ul&gt;
&lt;li&gt;정확히는 upstream branch의 name과 local이 다를경우 발생하는 문제 아래와 같은 에러가 뜸&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;fatal: The upstream branch of your current branch does not match&amp;lt;/br&amp;gt;the name of your current branch.  To push to the upstream branch&amp;lt;/br&amp;gt;on the remote, use&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    git push origin HEAD:master&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;To push to the branch of the same name on the remote, use&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    git push origin HEAD&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;어느 한 쪽 옵션만 계속 선택하려면, &#39;git help config&#39;에서 push.default를 참고하십시오.&amp;lt;/br&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;해결책
&lt;ul&gt;
&lt;li&gt;git push origin HEAD &amp;gt; 이번 한번만 푸시&lt;/li&gt;
&lt;li&gt;git push -u origin HEAD &amp;gt; 업스트림 브랜치를 업데이트함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/wbz9gpvc7/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>gh auth login에서 --with-token을 사용할 때, stdin으로 사용해야 함</title>
      <link>https://ariyn.github.io/posts/jbv4dg8tg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;echo &amp;quot;token&amp;quot; | gh auth login --with-token&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jbv4dg8tg/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git 리베이스 할 때, 특정 커밋의 뒤에 대해 진행하기</title>
      <link>https://ariyn.github.io/posts/cwk7_jl_h/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rebase -i &amp;lt;since_head&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;since_head를 포함하려면 ^를 붙여주면 된다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rebase -i &amp;lt;since_head&amp;gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이경우, 해당 커밋이 수정되면 조금 골치 아파진다.
&lt;ul&gt;
&lt;li&gt;가령 화살표 위키를 눌러서, 이전 커맨드를 다시 실행시켜서 계속 리베이스 할 수 없다. (커밋 아이디가 바뀌었기 때문에)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가능한 ^없이 사용하는게 좋을듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/cwk7_jl_h/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git 특정 커밋까지만 로그 가져오기</title>
      <link>https://ariyn.github.io/posts/wiex1gx16/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log &amp;lt;since_head&amp;gt;..HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;해당 커밋을 포함하려면 &lt;code&gt;git log &amp;lt;since_head&amp;gt;^..HEAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/wiex1gx16/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang roundtripper</title>
      <link>https://ariyn.github.io/posts/n1rdunmkx/</link>
      <description>&lt;ul&gt;
&lt;li&gt;고랭에서 http.RoundTripper를 통해 포워딩해줄 수 있다.&lt;/li&gt;
&lt;li&gt;특정 api만 내쪽으로 돌리고, 나머지는 원본으로 돌릴 수도 있지 않을까?
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;/etc/hosts&amp;lt;/br&amp;gt;  x.x.x.x localhost:8080&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;main.go&amp;lt;/br&amp;gt;  listen(8080)&amp;lt;/br&amp;gt;  &amp;lt;/br&amp;gt;  if url != &amp;quot;xxxx&amp;quot; {&amp;lt;/br&amp;gt;    return RoundTripper(url)&amp;lt;/br&amp;gt;  }&amp;lt;/br&amp;gt;  &amp;lt;/br&amp;gt;  return custom response&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/n1rdunmkx/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang으로 lambda 함수를 만들때</title>
      <link>https://ariyn.github.io/posts/qm8yip9td/</link>
      <description>&lt;ul&gt;
&lt;li&gt;api gateway의 lambda proxy를 사용한다면, handler를 커스텀 구조체로 받을 수 없다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;func handler(myModel MyModel) {} &amp;gt; lambda proxy를 안쓸경우 사용가능&amp;lt;/br&amp;gt;func handler(proxyModel events.APIGatewayProxyRequest) &amp;gt; lambda proxy를 사용할경우 필요&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;아마도 proxy를 구현하기 위해, body를 그대로 넘겨주지 않고 맵핑하는 것이 원인인 것 같다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;{&amp;lt;/br&amp;gt;  &amp;quot;body&amp;quot;:&amp;quot;...&amp;quot;,&amp;lt;/br&amp;gt;  &amp;quot;uri&amp;quot; :&amp;quot;...&amp;quot;,&amp;lt;/br&amp;gt;  ...&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/qm8yip9td/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>grep에서 or로 검색하기</title>
      <link>https://ariyn.github.io/posts/i7m3allfm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat nohup.out | grep -e pattern -e pattern2 -e pattern3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat nohup.out | grep -E &#39;pattern|pattern2|pattern3&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;참고
&lt;ul&gt;
&lt;li&gt;-E옵션을 사용하면, 정규식을 사용할 수 있게됨
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;-E, --extended-regexp     PATTERN is an extended regular expression&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;따라서 -E 옵션 하나만 주로 사용하는 버릇을 들이자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/i7m3allfm/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>head로 마지막 한줄을 남겨두고 출력하기</title>
      <link>https://ariyn.github.io/posts/gylnt3ege/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head -n -1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;head &amp;ndash;help를 했을때, -n명령어에서 - (마이너스)를 지원하는 버전이라면 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gylnt3ege/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>https://www.youtube.com/watch?v=37c1wTzHgFw&amp;ab_channel=%EB%8B%AC%EB%A6%AC%5BSBS%EA%B5%90%EC%96%91%EA%B3%B5%EC%8B%9D%EC%B1%84%EB%84%90%5D</title>
      <link>https://ariyn.github.io/posts/y5wqinhqm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;센터는 권위를 상징&lt;/li&gt;
&lt;li&gt;카메라 중앙에 서있는 중문을 캐릭터가 열고 들어옴&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/y5wqinhqm/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>intellij에서 invert if기능</title>
      <link>https://ariyn.github.io/posts/ybrgmwu7p/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ybrgmwu7p/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>lambda provisioned concurrency</title>
      <link>https://ariyn.github.io/posts/vlangm8mw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;설정한 숫자만큼 hot start 시켜놓는 기능&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/vlangm8mw/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>mysql의 커맨드 목록</title>
      <link>https://ariyn.github.io/posts/ftz8efx7k/</link>
      <description>&lt;ul&gt;
&lt;li&gt;\G
&lt;ul&gt;
&lt;li&gt;기존의 테이블 형식이 아닌, 수직으로 보여준다. cli 환경에서 읽어야 할 일이 있을때 편하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\p
&lt;ul&gt;
&lt;li&gt;입력된 sql을 다시 출력한다.&lt;/li&gt;
&lt;li&gt;디버깅용으로 사용하면 좋을듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\W, \w
&lt;ul&gt;
&lt;li&gt;워닝을 보여줄지, 안보여줄지 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/ko/mysql-command-line-client/#mysql-commands&#34;&gt;https://mariadb.com/kb/ko/mysql-command-line-client/#mysql-commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ftz8efx7k/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>node js 설치</title>
      <link>https://ariyn.github.io/posts/biggmfjwt/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodesource/distributions/blob/master/README.md&#34;&gt;https://github.com/nodesource/distributions/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;curl -fsSL https://deb.nodesource.com/setup_16.x | bash -&amp;lt;/br&amp;gt;apt-get install -y nodejs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/biggmfjwt/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Not Problem Syndrome</title>
      <link>https://ariyn.github.io/posts/gi1dj9poh/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://johngrib.github.io/wiki/no-problem-syndrome/&#34;&gt;https://johngrib.github.io/wiki/no-problem-syndrome/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;제랄드 와인버그가 이야기한 내용&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gi1dj9poh/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>tf import시 이런 오류가 나올때 대처법</title>
      <link>https://ariyn.github.io/posts/klngbro30/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Error: resource address &amp;quot;aws_instance.dev&amp;quot; does not exist in the configuration.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.tf 파일 어디에도 &lt;code&gt;resource &amp;quot;aws_instance&amp;quot; &amp;quot;dev&amp;quot;&lt;/code&gt;가 정의되어 있지 않기 때문에 발생
&lt;ul&gt;
&lt;li&gt;따라서 원하는 파일에 빈 리소스를 정의하면 된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;resource &amp;quot;aws_instance&amp;quot; &amp;quot;dev&amp;quot; {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/klngbro30/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>wsl에서 docker가 아래의 이유로 시작할 수 없을때</title>
      <link>https://ariyn.github.io/posts/1mlnwjyhc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;System has not been booted with systemd as init system (PID 1). Can&#39;t operate.&amp;lt;/br&amp;gt;Failed to connect to bus: Host is down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MicrosoftDocs/WSL/issues/457&#34;&gt;https://github.com/MicrosoftDocs/WSL/issues/457&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo /etc/init.d/docker start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/1mlnwjyhc/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>wsl에서 도커가 실행 안될때</title>
      <link>https://ariyn.github.io/posts/mu4oltbad/</link>
      <description>&lt;ul&gt;
&lt;li&gt;대표적으로 이런 오류가 &lt;code&gt;/var/log/docker.log&lt;/code&gt;에 기록되는 듯 하다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;could not use snapshotter aufs in metadata plugin&amp;quot; error=&amp;quot;modprobe aufs failed: &amp;quot;modprobe: ERROR: ../libkmod/libkmod.c:586 kmod_search_moddep() could not open moddep file &#39;/lib/modules/4.4.0-18362-Microsoft/modules.dep.bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이경우 iptables를 legacy 모드로 바꿔줘야 함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;sudo update-alternatives --set iptables /usr/sbin/iptables-legacy&amp;lt;/br&amp;gt;sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WhitewaterFoundry/Pengwin/issues/485&#34;&gt;https://github.com/WhitewaterFoundry/Pengwin/issues/485&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/mu4oltbad/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>yum을 사용해서 puppeteer에 필요한 라이브러리 설치하기</title>
      <link>https://ariyn.github.io/posts/izm8ydbcm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;yum install cups-libs dbus-glib libXrandr libXcursor libXinerama cairo cairo-gobject pango -y&amp;lt;/br&amp;gt;yum install libtiff pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-misc -y&amp;lt;/br&amp;gt;rpm -ivh --nodeps http://mirror.centos.org/centos/7/os/x86_64/Packages/atk-2.28.1-2.el7.x86_64.rpm&amp;lt;/br&amp;gt;rpm -ivh --nodeps http://dl.fedoraproject.org/pub/archive/fedora/linux/releases/20/Fedora/x86_64/os/Packages/g/GConf2-3.2.6-7.fc20.x86_64.rpm&amp;lt;/br&amp;gt;rpm -ivh --nodeps http://dl.fedoraproject.org/pub/archive/fedora/linux/releases/16/Fedora/x86_64/os/Packages/gdk-pixbuf2-2.24.0-1.fc16.x86_64.rpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;출처 &lt;a href=&#34;https://github.com/puppeteer/puppeteer/issues/391&#34;&gt;https://github.com/puppeteer/puppeteer/issues/391&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/izm8ydbcm/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>가라앉히는 셀프토크</title>
      <link>https://ariyn.github.io/posts/m8lxoccun/</link>
      <description>&lt;ul&gt;
&lt;li&gt;예) 내가 이걸 하고 싶었구나, 오늘 힘들었구나&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/m8lxoccun/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>각 숫자의 편차가 클 경우, 가중치를 둬서 평균을 내는 방법:</title>
      <link>https://ariyn.github.io/posts/qb8vb2dyp/</link>
      <description>&lt;ul&gt;
&lt;li&gt;왜 이 단어가 그렇게 기억나지 안았을까&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/qb8vb2dyp/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>게임의 유능감</title>
      <link>https://ariyn.github.io/posts/vvjouky7c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;게임은 유능을 주지 않음.
&lt;ul&gt;
&lt;li&gt;유능감을 줄 뿐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 &amp;ldquo;저 데이터 쪼가리에 환장하는 이상한 놈들&amp;quot;을 이 관점으로 이해해야 함&lt;/li&gt;
&lt;li&gt;우리가 진짜 허접한 작업물을 만들었어도 그것을 사랑하는 사람을 볼때는, 이해가 됨
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;뭐 대부분 그렇지&amp;rdquo;&lt;/li&gt;
&lt;li&gt;이 결과물이 자신에게 유능감을 들게 하기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/vvjouky7c/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>결재와 결제의 차이</title>
      <link>https://ariyn.github.io/posts/eh83f0_ac/</link>
      <description>&lt;ul&gt;
&lt;li&gt;가끔씩 헷갈리는 한자 2위&lt;/li&gt;
&lt;li&gt;결재 (決裁)
&lt;ul&gt;
&lt;li&gt;결정 권한이 있는 상관이 부하가 제출한 안건을 허가하거나 승인함&lt;/li&gt;
&lt;li&gt;裁
&lt;ul&gt;
&lt;li&gt;마를 재
&lt;ul&gt;
&lt;li&gt;마르다: 마름질의 원형. 옷을 짓다. 재단하다. 헝겁. 자르다. 알맞게 줄임. 헤아리다. 결단하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;裁斷 (재단 / 알맞게 자르는 일)&lt;/li&gt;
&lt;li&gt;裁縫 (재봉 / 옷 따위를 만드는 일)&lt;/li&gt;
&lt;li&gt;裁量 (재량 / 주어진 권한이라 판단에 따라 일을 처리함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;결제 (決濟)
&lt;ul&gt;
&lt;li&gt;돈이나 증권따위를 주고받아서 당사자간의 거래를 끝냄&lt;/li&gt;
&lt;li&gt;濟
&lt;ul&gt;
&lt;li&gt;건널 제, 많고 성하다, 나루터, 구제하다&lt;/li&gt;
&lt;li&gt;濟物浦 (제물포 / 인천의 거기)&lt;/li&gt;
&lt;li&gt;經濟 (경제 / 시장 &amp;ldquo;경제&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;救濟 (구제 / 홍수나 재난등의 피해를 입은 사람을 도와주는 것)&lt;/li&gt;
&lt;li&gt;百濟 (백제 / 온조왕이 세운 국가. 삼국시대(고구려, 백제, 신라)의 백제)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처: 다음 사전&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/eh83f0_ac/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>경신 &amp; 갱신</title>
      <link>https://ariyn.github.io/posts/ueobijrwo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;둘 다 동일한 한자 更新&lt;/li&gt;
&lt;li&gt;更이 &amp;ldquo;고칠 경&amp;quot;으로도 읽히고, &amp;ldquo;다시 갱&amp;quot;으로도 읽히기 때문&lt;/li&gt;
&lt;li&gt;다시 갱
&lt;ul&gt;
&lt;li&gt;갱생
&lt;ul&gt;
&lt;li&gt;새롭게 태어남, 마음가짐을 바로잡음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;갱신
&lt;ul&gt;
&lt;li&gt;일정등이 정해져 있는것을 다시 고침&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;고칠 경
&lt;ul&gt;
&lt;li&gt;변경
&lt;ul&gt;
&lt;li&gt;이미 정해진 것을 바꿈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;경신
&lt;ul&gt;
&lt;li&gt;기록 따위를 새롭게 씀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ueobijrwo/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>구한말</title>
      <link>https://ariyn.github.io/posts/jvqo38jj2/</link>
      <description>&lt;ul&gt;
&lt;li&gt;적당히 &lt;code&gt;구한말 고종황제는...&lt;/code&gt;은 맞는 말이지만, &lt;code&gt;구한말 북한이...&lt;/code&gt;은 아니란것 정도만 알았다.
&lt;ul&gt;
&lt;li&gt;한자로 舊韓末&lt;/li&gt;
&lt;li&gt;시기로는 다음사전왈 &lt;code&gt;1897년부터 1910년도 까지&lt;/code&gt;
1910 08/22
&lt;ul&gt;
&lt;li&gt;한일 합병 조약&lt;/li&gt;
&lt;li&gt;이 이후로 대한제국에서 조선으로 국호가 바뀜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대한제국을 구한국(舊韓國)이라 부르는 듯.
&lt;ul&gt;
&lt;li&gt;언제? 대한제국시기에는 안불렸을꺼고. 언제부터 사용된 말일까&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jvqo38jj2/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>깃 리베이스하다 날려먹은경우</title>
      <link>https://ariyn.github.io/posts/ogknmlhe6/</link>
      <description>&lt;ul&gt;
&lt;li&gt;우선 침착하자
&lt;ul&gt;
&lt;li&gt;터미널 히스토리를 날렸다간, 진짜 찾기 어려워진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.git 폴더를 압축해서, 백업을 만들어두자
&lt;ul&gt;
&lt;li&gt;백업은 반드시 작업폴더 외부에 위치하도록!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reflog를 보고, 어떤 커밋에서 어떤 행동이 벌어졌는지 조사&lt;/li&gt;
&lt;li&gt;터미널 히스토리를 에디터에 복사해놓고, reflog와 비교
&lt;ul&gt;
&lt;li&gt;stdout, stderr 모두 나오도록 복사하는게 편할 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;역치가 될 수 있도록 복구 계획을 세워봄
&lt;ul&gt;
&lt;li&gt;diff, show, log등 파일의 변경 히스토리를 확인하자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이후 조심스럽게 하나씩 실행해보면서 확인&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ogknmlhe6/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>데이터를 공유했다면 아래의 것들을 같이 공유하자</title>
      <link>https://ariyn.github.io/posts/k1pw-l-vx/</link>
      <description>&lt;ul&gt;
&lt;li&gt;어떤 정보가 포함된 데이터인가&lt;/li&gt;
&lt;li&gt;어떤 조건에 따라 데이터가 분류되었는가&lt;/li&gt;
&lt;li&gt;데이터의 출처가 어디인가&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/k1pw-l-vx/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>도커 이미지를 다른 컴퓨터로 옮기기</title>
      <link>https://ariyn.github.io/posts/undu96xhi/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&amp;lt;/br&amp;gt;docker save -o &amp;lt;path for generated tar file&amp;gt; &amp;lt;image name&amp;gt;&amp;lt;/br&amp;gt;docker load -i &amp;lt;path to image tar file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository&#34;&gt;https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/undu96xhi/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>돈의 심리학</title>
      <link>https://ariyn.github.io/posts/vs4ak3gzi/</link>
      <description>&lt;ul&gt;
&lt;li&gt;돈을 쓸 때, 기회비용을 생각해야 함
&lt;ul&gt;
&lt;li&gt;기회비용 = 이 돈을 사용함으로써, 놓치게 되는 다른 것&lt;/li&gt;
&lt;li&gt;현실에서는 기회비용을 생각하기 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;돈의 심리학이 하는 것
&lt;ul&gt;
&lt;li&gt;기회비용을 생각하지 못하는 이유에 대해 생각함&lt;/li&gt;
&lt;li&gt;함정을 밝힘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상대성
&lt;ul&gt;
&lt;li&gt;돈이 상대적일것이라는 것
&lt;ul&gt;
&lt;li&gt;착시와 비슷함&lt;/li&gt;
&lt;li&gt;배경을 지우고 나면, 두개의 원이 같은 크기라는 것을 알게 됨&lt;/li&gt;
&lt;li&gt;배경이 상대적인 환경을 제공해서 다르게 느끼게 됨
15$ 펜을 살때, 10불 할인하는 상점으로 가는것과, 1000불짜리 옷을 살때, 10달러 할인하는 상점으로 가는 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공정성
1분안에 열쇠를 따는 사람과, 30분만에 열쇠를 따는 사람
&lt;ul&gt;
&lt;li&gt;동일한 비용을 내야할 때, 만족도는 오히려 30분쪽이 압도적으로 좋음&lt;/li&gt;
&lt;li&gt;우리가 열쇠따기의 퀄리티를 비교할 수 없기 때문에, 알 수 있는 지표로 판단함.
&lt;ul&gt;
&lt;li&gt;시간&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;이 그림을 그리는데 30초밖에 안걸렸군요!&amp;rdquo;, &amp;ldquo;아니, 이 그림을 그리는데 30년이 걸렸단다&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;투명성
&lt;ul&gt;
&lt;li&gt;보이지 않는것을 보이게 만들어야 함
&lt;ul&gt;
&lt;li&gt;로딩에서 적용되는 그 방식 (프로그레스 바, 동적 로딩)은 심리와 커뮤니케이션에도 동일하게 작동한다.&lt;/li&gt;
&lt;li&gt;보이지 않는것은 관심에서 멀어지게 함
&lt;ul&gt;
&lt;li&gt;지불을 어떻게 하는지, 얼마나 하는지를 알아야 관심을 가지게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 보이지 않는 지출을 가시화 해야, 지출을 줄일 수 있음&lt;/li&gt;
&lt;li&gt;투명한 것에 대해서는 기쁘게 지출할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동기
&lt;ul&gt;
&lt;li&gt;사회적 동기와 금전적 동기가 다름&lt;/li&gt;
&lt;li&gt;금전적 동기는, 사회적 관계를 재정의 해버림
&lt;ul&gt;
&lt;li&gt;소비자와 생산자로 규정해버림&lt;/li&gt;
&lt;li&gt;따라서 더이상 죄책감 같은것을 느끼지 않아도 괜찮음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/vs4ak3gzi/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>동료가 한 일은 믿지만, 빠짐없이 확인하자</title>
      <link>https://ariyn.github.io/posts/hsaaqmayc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;신뢰와 확인은 별개의 프로세스.
&lt;ul&gt;
&lt;li&gt;신뢰하면서 확인할 수도, 신뢰 안하면서 확인할수도, 신뢰 안하면서 확인 할수도, 신뢰 안하면서 확인 안할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가장 좋은것은 신뢰하면서 확인하는것.
&lt;ul&gt;
&lt;li&gt;이것은 내가 작업한 내용에도 적용되는 당연한 이야기.&lt;/li&gt;
&lt;li&gt;남들에게 공유하기 전, 나의 구현을 신뢰하면서 확인해보자. 진짜 그렇게 구현이 되었는지. 잘 되었는지.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hsaaqmayc/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>라포</title>
      <link>https://ariyn.github.io/posts/sijfpsy_z/</link>
      <description>&lt;ul&gt;
&lt;li&gt;상담사와 내담자 사이의 편안한 상태&lt;/li&gt;
&lt;li&gt;보통 &lt;code&gt;라포를 형성하다&lt;/code&gt;, &lt;code&gt;아직 라포가 부족한데 (...)&lt;/code&gt;처럼 쓰이는 듯&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/sijfpsy_z/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>롬 리서치에서 피하면 좋을 행동들</title>
      <link>https://ariyn.github.io/posts/u8qsqcsgg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;태그만 존재하는 블럭의 하위 항목
&lt;ul&gt;
&lt;li&gt;이거 나중에 확인이 어렵다.
&lt;ul&gt;
&lt;li&gt;태그 페이지에서 빈줄로 나옴 (하위 항목이 한번에 보이지 않고, 기본적으로 collapse되어 있음)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;무조건 태그는 제목 내지는 한줄 요약에 붙이고, 그 하위에 내용을 써야 함&lt;/li&gt;
&lt;li&gt;좋지 않은 예시
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;* #태그&amp;lt;/br&amp;gt;  * 내용 1&amp;lt;/br&amp;gt;  * 내용 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;좋은 예시
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;* 내용들 #태그&amp;lt;/br&amp;gt;  * 내용 1&amp;lt;/br&amp;gt;  * 내용 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/u8qsqcsgg/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>리눅스 타임존 설정방법</title>
      <link>https://ariyn.github.io/posts/2iswtcvab/</link>
      <description>&lt;ul&gt;
&lt;li&gt;timedatectl set-timezone Asia/Seoul&lt;/li&gt;
&lt;li&gt;ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/2iswtcvab/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>리눅스를 설치하고 나서</title>
      <link>https://ariyn.github.io/posts/ic2ao9-k-/</link>
      <description>&lt;ul&gt;
&lt;li&gt;zsh 설치
&lt;ul&gt;
&lt;li&gt;oh-my-zsh 설치 도중 자동으로 default shell을 zsh로 바꿔준다. 다만 -y 옵션이 먹지 않으니, 미리미리 자리에 앉아있자.
&lt;ul&gt;
&lt;li&gt;(방법이 없을까?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;apt install -y curl zsh &amp;lt;/br&amp;gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ic2ao9-k-/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>리눅스에서 &lt; (왼쪽 꺽쇠)</title>
      <link>https://ariyn.github.io/posts/lo40h47du/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;&amp;gt; awk &#39;1&#39; &amp;lt; /tmp/test_file&amp;lt;/br&amp;gt;test&amp;lt;/br&amp;gt;&amp;gt; cat /tmp/test_file | awk &#39;1&#39;&amp;lt;/br&amp;gt;test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;파일의 컨텐츠를 읽어서 stdin으로 넣는것
&lt;ul&gt;
&lt;li&gt;조금 다른 경우가 있지만, &lt;code&gt;cat file | command&lt;/code&gt;과 동일한 역할로 보임&lt;/li&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://unix.stackexchange.com/questions/283374/what-does-the-left-chevron-triangle-bracket-do&#34;&gt;https://unix.stackexchange.com/questions/283374/what-does-the-left-chevron-triangle-bracket-do&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lo40h47du/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>맥에서 swift로 window들의 정보를 가져오는 방법</title>
      <link>https://ariyn.github.io/posts/epmnjjhnk/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swift&amp;lt;/br&amp;gt;import Cocoa&amp;lt;/br&amp;gt;import Quartz&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;let options:CGWindowListOption = CGWindowListOption(arrayLiteral: CGWindowListOption.excludeDesktopElements, CGWindowListOption.optionOnScreenOnly)&amp;lt;/br&amp;gt;let relativeToWindow: CGWindowID = kCGNullWindowID&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;let infos = CGWindowListCopyWindowInfo(options, relativeToWindow)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;struct WindowData:Codable {&amp;lt;/br&amp;gt;    let processName: String&amp;lt;/br&amp;gt;    let windowName: String&amp;lt;/br&amp;gt;    let x: Int&amp;lt;/br&amp;gt;    let y: Int&amp;lt;/br&amp;gt;    let width: Int&amp;lt;/br&amp;gt;    let height: Int&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;var collectedInfo: [WindowData] = []&amp;lt;/br&amp;gt;for info in infos as! [NSDictionary] {&amp;lt;/br&amp;gt;    let bound:NSDictionary = info[&amp;quot;kCGWindowBounds&amp;quot;] as! NSDictionary&amp;lt;/br&amp;gt;    let processName:String = info[&amp;quot;kCGWindowOwnerName&amp;quot;] as? String ?? &amp;quot;&amp;quot;&amp;lt;/br&amp;gt;    let windowName:String = info[&amp;quot;kCGWindowName&amp;quot;] as? String ?? &amp;quot;&amp;quot;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    collectedInfo.append(WindowData(&amp;lt;/br&amp;gt;        processName: processName.replacingOccurrences(of: &amp;quot;,&amp;quot;, with:&amp;quot;\\,&amp;quot;),&amp;lt;/br&amp;gt;        windowName: windowName.replacingOccurrences(of: &amp;quot;,&amp;quot;, with:&amp;quot;\\,&amp;quot;),&amp;lt;/br&amp;gt;        x:bound[&amp;quot;X&amp;quot;] as? Int ?? -10000,&amp;lt;/br&amp;gt;        y:bound[&amp;quot;Y&amp;quot;] as? Int ?? -10000,&amp;lt;/br&amp;gt;        width:bound[&amp;quot;width&amp;quot;] as? Int ?? -10000,&amp;lt;/br&amp;gt;        height:bound[&amp;quot;hwight&amp;quot;] as? Int ?? -10000&amp;lt;/br&amp;gt;    ))&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;if let jsonData = try? JSONEncoder().encode(collectedInfo), let jsonString = String(data: jsonData, encoding: .utf8) {&amp;lt;/br&amp;gt;    print(jsonString)&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이후에 환경설정 &amp;gt; 보안 &amp;gt; 화면 기록에서 터미널을 추가 &amp;amp; 터미널 재시작 해줘야 한다.
&lt;ul&gt;
&lt;li&gt;안할경우 kCGWindowName (각 위도우별 제목)이 안뜸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CGWindowListCopyWindowInfo가 리턴하는 형식
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swift&amp;lt;/br&amp;gt;[&amp;lt;/br&amp;gt;  {&amp;lt;/br&amp;gt;    kCGWindowAlpha = 0;&amp;lt;/br&amp;gt;    kCGWindowBounds =     {&amp;lt;/br&amp;gt;        Height = 0;&amp;lt;/br&amp;gt;        Width = 0;&amp;lt;/br&amp;gt;        X = 0;&amp;lt;/br&amp;gt;        Y = 0;&amp;lt;/br&amp;gt;    };&amp;lt;/br&amp;gt;    kCGWindowIsOnscreen = 0;&amp;lt;/br&amp;gt;    kCGWindowLayer = 0;&amp;lt;/br&amp;gt;    kCGWindowMemoryUsage = 1232;&amp;lt;/br&amp;gt;    kCGWindowName = &amp;quot;utf-8 encoded string&amp;quot;;&amp;lt;/br&amp;gt;    kCGWindowNumber = 1884;&amp;lt;/br&amp;gt;    kCGWindowOwnerName = &amp;quot;utf-8 encoded string&amp;quot;;&amp;lt;/br&amp;gt;    kCGWindowOwnerPID = 2895;&amp;lt;/br&amp;gt;    kCGWindowSharingState = 1;&amp;lt;/br&amp;gt;    kCGWindowStoreType = 1;&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가적으로 할 일
&lt;ul&gt;
&lt;li&gt;아이콘 정보 가져오기
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/36389173/how-to-observe-other-application-icon-in-os-x&#34;&gt;https://stackoverflow.com/questions/36389173/how-to-observe-other-application-icon-in-os-x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;느낀점
&lt;ul&gt;
&lt;li&gt;윈도우의 정보를 가져오도록 구현하는것과 비슷한 시간이 걸린 json serialize&lt;/li&gt;
&lt;li&gt;이렇게 어려울 일인가? 으음&amp;hellip;.&lt;/li&gt;
&lt;li&gt;내가 swift의 핵심을 이해 못하는건가, swift의 핵심이 맛이 가 있는것인가&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/epmnjjhnk/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>모든 변화는 사회적인 요소가 존재한다.</title>
      <link>https://ariyn.github.io/posts/haor0b6mf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;예) 운동을 해야지.
&lt;ul&gt;
&lt;li&gt;주변 환경을 만들어 두면, 내 의지가 적게 필요함.&lt;/li&gt;
&lt;li&gt;이로 인해 성공의 확률이 높아짐.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일을 잘하는 사람은 소셜 네트워크가 좋음&lt;/li&gt;
&lt;li&gt;좋은 피아노 선생은 이것을 소셜 네트워크로 전환시킴.
&lt;ul&gt;
&lt;li&gt;예) 이걸 누가 들을것이라 생각하느냐, 누구와 함께 칠 것 같으냐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/haor0b6mf/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>베블런 효과</title>
      <link>https://ariyn.github.io/posts/oqbknng9j/</link>
      <description>&lt;ul&gt;
&lt;li&gt;비쌀수록 많이 팔리는 효과&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/oqbknng9j/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>사귀다</title>
      <link>https://ariyn.github.io/posts/c8gvoqmf4/</link>
      <description>&lt;ul&gt;
&lt;li&gt;사귀다의 과거형 &lt;code&gt;사귀었다&lt;/code&gt;는 줄여서 쓸 수 없다.&lt;/li&gt;
&lt;li&gt;발음이 &lt;code&gt;사궜다&lt;/code&gt; 도 아니고, &lt;code&gt;사겼다&lt;/code&gt;도 아니기 때문
&lt;ul&gt;
&lt;li&gt;꼭 따진다면 &lt;code&gt;사구ㅕㅆ다&lt;/code&gt;라고 쓸 수 있을텐데, 이건 한국어에서 ㅜㅕ가 결합된 모음이 없으니 쓸 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/c8gvoqmf4/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>소숫점 이하 11자리까지 파이의 값은 3.14159265359</title>
      <link>https://ariyn.github.io/posts/dta1vnjfr/</link>
      <description>&lt;p&gt;3.14 - 1592 - 65359&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/dta1vnjfr/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>수정사항이 생겼을 때 상대방에게 알려주자</title>
      <link>https://ariyn.github.io/posts/h-dl1zibq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&amp;ldquo;무엇&amp;quot;이 &amp;ldquo;어떤 이유&amp;quot;로 &amp;ldquo;어떻게&amp;rdquo; 바뀌었는지
6하 원칙중 누가, 언제, 어디서를 제외한 것들&lt;/li&gt;
&lt;li&gt;상대방의 놀라지 않게 해야한다.
&lt;ul&gt;
&lt;li&gt;여기에서도 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%86%80%EB%9E%8C_%EC%B5%9C%EC%86%8C%ED%99%94_%EC%9B%90%EC%B9%99&#34;&gt;놀람 최소화의 법칙&lt;/a&gt;은 적용된다. 조금 다르지만&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/h-dl1zibq/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>아성</title>
      <link>https://ariyn.github.io/posts/jxvgml4xh/</link>
      <description>&lt;ul&gt;
&lt;li&gt;우두머리 장수가 거처하는 성
&lt;ul&gt;
&lt;li&gt;그것이 &amp;ldquo;가장 견고한, 중요한 어떠한 것&amp;quot;으로 발전한 듯&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&amp;hellip; 브라질의 아성을 깨고 &amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jxvgml4xh/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>여러개의 필드를 한번에 선택하기</title>
      <link>https://ariyn.github.io/posts/kqyf2ir4f/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;jq &#39;.lists[] | &amp;quot;\(.first)&amp;quot; &amp;quot;\(.last)&amp;quot;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/kqyf2ir4f/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>이거 왜 하는거에요?</title>
      <link>https://ariyn.github.io/posts/8dnzhakuh/</link>
      <description>&lt;ul&gt;
&lt;li&gt;결국엔 이 질문이 가장 애자일하고, 중요한 질문이 아닐까?&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/8dnzhakuh/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>코칭 해준다는 것은 아주 근접한 곳에서 모든것을 속속들이 알게된다는 뜻.</title>
      <link>https://ariyn.github.io/posts/rphrpnenm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;결국 엄청난 데이터가 쌓인다는 뜻이다.
&lt;ul&gt;
&lt;li&gt;실제로 의사, 변호사와 같이 전문적인 직종의 경우, 비밀유지의무가 있지 않은가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만약 이것이 신세대를 위한 금융코칭이라면?
&lt;ul&gt;
&lt;li&gt;이러한 형태의 조언 &amp;amp; 코칭에 큰 거부감이 없음&lt;/li&gt;
&lt;li&gt;아직 명확하게 소비 패턴이 존재하지 않음&lt;/li&gt;
&lt;li&gt;혼자 살기 때문에 소비에 부담이 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이들을 잡아야 한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rphrpnenm/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>태그를 만들 때는, 한글과 영어를 서로 만들어주자</title>
      <link>https://ariyn.github.io/posts/-_nrj3y1z/</link>
      <description>&lt;ul&gt;
&lt;li&gt;영어로 치다가 한글로 치고, 다시 영어로 변환하는 과정은 너무 고통스럽다.&lt;/li&gt;
&lt;li&gt;이경우 한글과 영어태그는 본문에 서로를 포함해야 한다
&lt;ul&gt;
&lt;li&gt;한글 태그의 본문에는 영어 태그가, 영어 태그의 본문에는 한글태그가 들어가 있어야 한다.&lt;/li&gt;
&lt;li&gt;이 둘을 통해서 연결시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/-_nrj3y1z/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>팀이 함께 무엇인가를 해야한다.</title>
      <link>https://ariyn.github.io/posts/5yv_6pkpp/</link>
      <description>&lt;ul&gt;
&lt;li&gt;개인의 실패가 팀의 실패로 이어지지 않게
&lt;ul&gt;
&lt;li&gt;미리미리 실패하는 팀원이 있지 않도록 확인하고, 팀이 버퍼역할을 할 수 있도록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개인의 성공이 팀원 모두의 성공으로 이어지게
&lt;ul&gt;
&lt;li&gt;개인의 성공의 핵심이 팀원 모두가 공감하고 배울 수 있는 방식으로 전해져야 함&lt;/li&gt;
&lt;li&gt;개인에게 의존하지 않게 되는것이 핵심&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/5yv_6pkpp/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>프로세스가 갑자기 죽었고 oom이 의심될 때</title>
      <link>https://ariyn.github.io/posts/ns9mzcbyr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;dmesg | less&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ns9mzcbyr/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>필요한 라이브러리가 모두 설치되었는지 확인하는 방법</title>
      <link>https://ariyn.github.io/posts/rek2cynej/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;ldd &amp;lt;packege&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rek2cynej/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>효과적인 방법을 찾는 셀프토크</title>
      <link>https://ariyn.github.io/posts/fhrw_aadr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;예) 이게 될까? 뭐가 되야 마음이 좀 나아지지? -&amp;gt; 그래야 내가 어떻게 개입할 지 명확하게 나옴&lt;/li&gt;
&lt;li&gt;파인만 알고리즘 1단계가 아닌가 싶다.
&lt;ul&gt;
&lt;li&gt;문제를 명확하게 만드는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/fhrw_aadr/</guid>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>vscode를 터미널에서 실행시키고, 그 결과값을 받기위해 기다리는 법</title>
      <link>https://ariyn.github.io/posts/0rj_ue7ch/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code --wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/0rj_ue7ch/</guid>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>산불과 전쟁</title>
      <link>https://ariyn.github.io/posts/8qrdfbodd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;주기적으로 작은 산불이 일어나지 않으면 인화물질이 쌓여, 큰 불이된다는 이야기에는 쉽게 공감할 수 있음&lt;/li&gt;
&lt;li&gt;그러나 주기적으로 작은 전쟁이 일어나야한다는 주장에는 쉽게 동의하기 어려움&lt;/li&gt;
&lt;li&gt;왜?
&lt;ul&gt;
&lt;li&gt;단순히 전쟁의 비용이 크기 때문인가?&lt;/li&gt;
&lt;li&gt;전쟁의 컨트롤하기 어렵기 때문인가?&lt;/li&gt;
&lt;li&gt;그렇다면 이 주장은 &amp;ldquo;가정은 옳지만, 방법이 틀린&amp;quot;명제인가?
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;작은 전쟁이 주기적으로 일어나지 않으면, 큰 전쟁의 인화물질이 쌓인다는&lt;/code&gt; 가정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전쟁의 방법이 틀렸다면, 화재의 방법 또한 틀린것인가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;안정 부채
&lt;ul&gt;
&lt;li&gt;현재 안정적이기 위해, 마지막에는 프래질해지는 비용
&lt;ul&gt;
&lt;li&gt;이자까지 쳐서 갚아야 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기술 부채와 동일함
&lt;ul&gt;
&lt;li&gt;그러나 이것이 부채라면, 부채를 관리하는 쪽으로 가야 하는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/8qrdfbodd/</guid>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>실수는 예방하는 것이 아니라 관리하는 것</title>
      <link>https://ariyn.github.io/posts/af2wyqmg5/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.egloos.com/5774862&#34;&gt;http://agile.egloos.com/5774862&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;안티프래질에서도 비슷한 이야기를 함
&lt;ul&gt;
&lt;li&gt;{{[[embed]]: &lt;a href=&#34;https://ariyn.github.io/404.html&#34;&gt;6Qy7d9A4W&lt;/a&gt;}}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/af2wyqmg5/</guid>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git staged된 파일의 비교</title>
      <link>https://ariyn.github.io/posts/h9rct5cwy/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff --staged&lt;/code&gt; 혹은 &lt;code&gt;git diff --cached&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/h9rct5cwy/</guid>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>godot에서 signal을 변수와 함께 쓰기</title>
      <link>https://ariyn.github.io/posts/napcywbps/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;signal my_signal(value, value2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/napcywbps/</guid>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>hey</title>
      <link>https://ariyn.github.io/posts/5pfsno3vm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;network benchmark&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/5pfsno3vm/</guid>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>한글 문서를 찾아보자</title>
      <link>https://ariyn.github.io/posts/43bucqp2-/</link>
      <description>&lt;ul&gt;
&lt;li&gt;보통 영어 문서를 찾아보는 편
&lt;ul&gt;
&lt;li&gt;그쪽이 조금 더 공식적이고, 정확할 확률이 높기 때문&lt;/li&gt;
&lt;li&gt;어딘가의 블로그에 적힌 내용은, 언제 적힌것인지도 파악이 어렵고, 이게 맞는지도 파악이 어렵다&lt;/li&gt;
&lt;li&gt;덤으로 영어 공부나, 부담감도 줄이는 연습삼아서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하지만 golang의 커뮤니티를 찾아보다 꼭 그러지는 않아도 되는것을 발견함
&lt;ul&gt;
&lt;li&gt;이제는 공식 문서를 한국어로 번역하는 커뮤니티나 프로젝트도 간간히 보임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;반대로 한글 문서를 찾아볼때의 장점은
&lt;ul&gt;
&lt;li&gt;쉽고 빠르게 읽을 수 있다
&lt;ul&gt;
&lt;li&gt;아무리 영어와 친해도, 모국어만큼의 속독과 문맥파악은 어렵다&lt;/li&gt;
&lt;li&gt;공부하는게 아니라 특정 내용을 빠르게 확인해야 할때, 모국어로 훨씬 쉽게 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커뮤니티를 발견할 수 있다
&lt;ul&gt;
&lt;li&gt;이게 중요한것인데, 한국어로 번역하는 과정은 쉬운게 아님&lt;/li&gt;
&lt;li&gt;그 언어/프레임워크/라이브러리/서비스에 애정을 가진 커뮤니티에서 시도해볼만한 프로젝트임&lt;/li&gt;
&lt;li&gt;따라서 이 커뮤니티를 찾는것이 한국어 문서를 찾는 이유
&lt;ul&gt;
&lt;li&gt;혹은 커뮤니티가 아니더라도, 이런식의 프로젝트를 진행한 사람은 해당 도메인에 지식이 깊을 가능성 높음&lt;/li&gt;
&lt;li&gt;모국어로 편하게 물어보기 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/43bucqp2-/</guid>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>개발블로그의 글들만 모아서 검색하고 싶다</title>
      <link>https://ariyn.github.io/posts/1urdyaul5/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql 마이그레이션 aws -&amp;quot;aws.amazon.com&amp;quot; -&amp;quot;docs.microsoft.com&amp;quot; -&amp;quot;cloudmt.co.kr&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;이정도 했더니, 일단은 docs는 빠지고, 개발 블로그 글들이 많이 나온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/1urdyaul5/</guid>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>var _ CustomInterface = CustomType{} 의 의미</title>
      <link>https://ariyn.github.io/posts/sj7yffqll/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이경우 컴파일 시간에, CustomType이 CustomInterface를 구현했는지 체크할 수 있다고 함&lt;/li&gt;
&lt;li&gt;생각해보면 구현체만 존재하고, 사용하지 않는경우 컴파일 체크가 불가능함.&lt;/li&gt;
&lt;li&gt;따라서 명시적으로 &lt;code&gt;var _ CustomInterface = CustomType{}&lt;/code&gt;라는 코드를 통해 체크가 가능.&lt;/li&gt;
&lt;li&gt;출처: &lt;a href=&#34;https://stackoverflow.com/questions/13194272/what-does-an-underscore-and-interface-name-after-keyword-var-mean&#34;&gt;https://stackoverflow.com/questions/13194272/what-does-an-underscore-and-interface-name-after-keyword-var-mean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/sj7yffqll/</guid>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>내가 이 대화에서 무엇을 결정할 것인가를 먼저 정해야 한다.</title>
      <link>https://ariyn.github.io/posts/iydtlx7t2/</link>
      <description>&lt;ul&gt;
&lt;li&gt;그래야 그 대화에서 유익한 것을 얻어낼 수 있음.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/iydtlx7t2/</guid>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>unaddressable value문제</title>
      <link>https://ariyn.github.io/posts/ubfwpramn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;reflect: reflect.Value.Set using unaddressable value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.Create(v)&lt;/code&gt;에서 v가 값으로 복사되는지 확인하자. pointer가 들어가야 한다.
&lt;ul&gt;
&lt;li&gt;올바른 예: &lt;code&gt;db.Create(&amp;amp;v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;잘못된 예: &lt;code&gt;db.Create(v)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ubfwpramn/</guid>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>big five</title>
      <link>https://ariyn.github.io/posts/ouqchbszc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;개방성&lt;/li&gt;
&lt;li&gt;성실성&lt;/li&gt;
&lt;li&gt;외향성&lt;/li&gt;
&lt;li&gt;우호성&lt;/li&gt;
&lt;li&gt;신경성&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ouqchbszc/</guid>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git에서 특정 파일들만 stash하기  /stash</title>
      <link>https://ariyn.github.io/posts/jbz107kko/</link>
      <description>&lt;ul&gt;
&lt;li&gt;stash push 뒤에 파일들 입력하면 됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell&amp;lt;/br&amp;gt;git stash push -m &amp;quot;stash message&amp;quot; [files ...]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/jbz107kko/</guid>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>실행중인 docker container에 bash로 들어가기</title>
      <link>https://ariyn.github.io/posts/ejbd8pn0s/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker exec -it  {container id} /bin/bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ejbd8pn0s/</guid>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>https://crmn.tistory.com/22</title>
      <link>https://ariyn.github.io/posts/9uentgkmn/</link>
      <description>&lt;ul&gt;
&lt;li&gt;프로세스가 꺼졌을때, 커널단위에서 킬 했는지 로그 확인법&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/9uentgkmn/</guid>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>유닉스 기본 명령어들을 현대적인 명령어로 바꿔주는 프로그램들 모음</title>
      <link>https://ariyn.github.io/posts/zwzxbsv6k/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ibraheemdev/modern-unix&#34;&gt;https://github.com/ibraheemdev/modern-unix&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zwzxbsv6k/</guid>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>inotifywait</title>
      <link>https://ariyn.github.io/posts/u7q_7bk1f/</link>
      <description>&lt;ul&gt;
&lt;li&gt;파일의 inode 이벤트에 따라 커맨드를 실행시키기 위한 커맨드&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;while inotifywait -e close_write ./file.ext; do&amp;lt;/br&amp;gt;  do something;&amp;lt;/br&amp;gt;done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/181517/how-to-execute-a-command-whenever-a-file-changes&#34;&gt;https://superuser.com/questions/181517/how-to-execute-a-command-whenever-a-file-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;inotify-tools에 포함된 명령어로 보인다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/u7q_7bk1f/</guid>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>pip로 설치한 airflow에서 webserver로 접속 했을때, 새로은 dag가 뜨지 않을때</title>
      <link>https://ariyn.github.io/posts/v8lhygvlq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;상태
&lt;ul&gt;
&lt;li&gt;example는 보인다.&lt;/li&gt;
&lt;li&gt;airflow dags list에서도 보인다.&lt;/li&gt;
&lt;li&gt;~/airflow/dags에 들어 있지만, 웹서버 에서만 보이지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;airflow scheduler가 돌고 있는지 확인하자&lt;/li&gt;
&lt;li&gt;dag를 모니터링 하는 녀석이 스케쥴러라고 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;https://airflow.apache.org/docs/apache-airflow/stable/concepts/scheduler.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/v8lhygvlq/</guid>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>프로그램을 작성할 때 오타를 줄이는 법</title>
      <link>https://ariyn.github.io/posts/lpwiy07go/</link>
      <description>&lt;ul&gt;
&lt;li&gt;일반적인 타이핑에서는 오타가 많지 않음
&lt;ul&gt;
&lt;li&gt;그런데 프로그램 코드를 작성할 때, 오타율이 올라감&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;원인은 특수키들이 우측에 붙어있다는 것
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;()-=[]\;&#39;,./ &amp;lt;R-shift&amp;gt; &amp;lt;enter&amp;gt; &amp;lt;backspace&amp;gt; &amp;lt;arrow&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사실 코드를 작성할 때는, 괄호의 사용량이 z보다 많지 않을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;백스페이스를 쓸 때, 습관이 오른손 네번째 손가락으로 누르는 습관이 있음.
&lt;ul&gt;
&lt;li&gt;새끼로 누르기에는 너무 멀고, 불편하고, 무거움&lt;/li&gt;
&lt;li&gt;이후에 오른손 검지가 j로 돌아와서 다음 키를 눌러야 함.&lt;/li&gt;
&lt;li&gt;그런데 습관적으로 바로 누르려 하기 때문에, 해당 위치에 돌아가지 못하고, 다른 키를 누르게 됨&lt;/li&gt;
&lt;li&gt;심각하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해결책은&amp;hellip;
&lt;ul&gt;
&lt;li&gt;split 키보드를 구매해서, 오른손 검지에 여러 키를 넣는 법&lt;/li&gt;
&lt;li&gt;특수키가 가운데에 있는 키보드를 구매
&lt;ul&gt;
&lt;li&gt;XD75라는 키보드가 이러한 형태임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;auto hotkey를 사용해서, 오른손 검지가 j에서 벗어나지 않도록 특수키를 맵핑함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + Y&lt;/code&gt; = &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + U&lt;/code&gt; = &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lpwiy07go/</guid>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>한영 전환을 맥과 동일하게</title>
      <link>https://ariyn.github.io/posts/4x92ludtk/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;+space::&amp;lt;/br&amp;gt;send, {vk15sc138}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/4x92ludtk/</guid>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>한영 전환을 하는 법</title>
      <link>https://ariyn.github.io/posts/u7hbzx9hz/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;send, {vk15sc138}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;vk 0x15
&lt;ul&gt;
&lt;li&gt;IME 한글 모드&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ko-kr/windows/win32/inputdev/virtual-key-codes&#34;&gt;https://docs.microsoft.com/ko-kr/windows/win32/inputdev/virtual-key-codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sc 138
&lt;ul&gt;
&lt;li&gt;ctrl - ins&lt;/li&gt;
&lt;li&gt;정확하게 확인이 안된다.
101키/104키 호환인 경우, 한영키의 sc는 0xE0, 38
103키/106키인 경우, 한영키의 sc는 0xF2
&lt;ul&gt;
&lt;li&gt;표준 101키/103키에서 &lt;code&gt;한영&lt;/code&gt; + &lt;code&gt;한자&lt;/code&gt; 총 2개의 키가 추가된 버전&lt;/li&gt;
&lt;li&gt;아무래도 현대의 모든 키보드는 101키/104키 호환인 것 같은데, E038이 왜 138로 바뀌는지 잘 모르겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vk는 Virtual Keycode
&lt;ul&gt;
&lt;li&gt;os가 가지고 있는, 가상의 코드&lt;/li&gt;
&lt;li&gt;하나의 스캔코드는 여러개의 가상 키코드로 맵핑될 수 있다.
&lt;ul&gt;
&lt;li&gt;넘락이 켜져있을때, 텐키는 숫자로 동작함&lt;/li&gt;
&lt;li&gt;하지만 넘락이 꺼져 있다면 텐키는 화살표로 동작함&lt;/li&gt;
&lt;li&gt;scan code는 변하지 않았지만, vk가 바뀐 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sc는 Scan Code
&lt;ul&gt;
&lt;li&gt;스캔 코드는 키보드가 os로 보내는 데이터&lt;/li&gt;
&lt;li&gt;각각의 키에는 고유한 스캔코드가 존재한다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%8A%A4%EC%BA%94%EC%BD%94%EB%93%9C&#34;&gt;https://ko.wikipedia.org/wiki/%EC%8A%A4%EC%BA%94%EC%BD%94%EB%93%9C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가&amp;hellip;
&lt;ul&gt;
&lt;li&gt;한영키를 shift + space로 설정하는것은 꽤 불편하다.&lt;/li&gt;
&lt;li&gt;예를들면 + 뒤에 스페이스가 붙게되면, 자연스럽게 shift와 스페이스가 겹치는 순간이 꽤 존재한다.&lt;/li&gt;
&lt;li&gt;이 형식의 단축키가 없었다보니, 지금까지 큰 문제가 없었고, 그렇게 습관이 든 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/u7hbzx9hz/</guid>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>logstash timezone 설정</title>
      <link>https://ariyn.github.io/posts/ulyzqi4mc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;date {&amp;lt;/br&amp;gt;  timezone =&amp;gt; &amp;quot;Asia/Seoul&amp;quot;&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ulyzqi4mc/</guid>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>opensearch에서 logstash-oss와 logstash-opensearch-output-plugin이 동작 안할때</title>
      <link>https://ariyn.github.io/posts/njo_ltxgb/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opensearch.org/docs/latest/clients/logstash/index/&#34;&gt;https://opensearch.org/docs/latest/clients/logstash/index/&lt;/a&gt; 여기서 다운 받았다&lt;/li&gt;
&lt;li&gt;문제는 해당 패키지에 들어있는 logstash-opensearch-output-plugin이 문제가 있다
&lt;ul&gt;
&lt;li&gt;업데이트가 안된 버전임&lt;/li&gt;
&lt;li&gt;결국 삭제후 재 설치해야 함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;bin/logstash-plugin uninstall logstash-output-opensearch&amp;lt;/br&amp;gt;bin/logstash-plugin install logstash-output-opensearch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;생명의 구원자
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://githubmemory.com/@arianitu&#34;&gt;https://githubmemory.com/@arianitu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/njo_ltxgb/</guid>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>logstash에서 사용하는 json, grok등등의 이름</title>
      <link>https://ariyn.github.io/posts/ygybygxfk/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file input plugin&lt;/code&gt;, &lt;code&gt;grok filter plugin&lt;/code&gt; 등등으로 부르는 듯 하다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html&#34;&gt;https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html&#34;&gt;https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ygybygxfk/</guid>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Arrow 불가능 정리</title>
      <link>https://ariyn.github.io/posts/gxagsfd4v/</link>
      <description>&lt;ul&gt;
&lt;li&gt;모두가 만족하는 결과는 민주적 투표로 얻을 수 없다는 증명&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%95%A0%EB%A1%9C%EC%9D%98_%EB%B6%88%EA%B0%80%EB%8A%A5%EC%84%B1_%EC%A0%95%EB%A6%AC&#34;&gt;https://ko.wikipedia.org/wiki/%EC%95%A0%EB%A1%9C%EC%9D%98_%EB%B6%88%EA%B0%80%EB%8A%A5%EC%84%B1_%EC%A0%95%EB%A6%AC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gxagsfd4v/</guid>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Debt-to-EBITDA</title>
      <link>https://ariyn.github.io/posts/txg9okcuo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;EBITDA
&lt;ul&gt;
&lt;li&gt;Earning Before Interest, Tax, Depreciation &amp;amp; Amortization&lt;/li&gt;
&lt;li&gt;Interest : 이자&lt;/li&gt;
&lt;li&gt;Tax : 세금&lt;/li&gt;
&lt;li&gt;Depreciation &amp;amp; Amortization : 감가상각
&lt;ul&gt;
&lt;li&gt;유형의 자산 감가상각은 Depreciation&lt;/li&gt;
&lt;li&gt;무형자산의 감가상각은 Amorization&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=wimvin&amp;amp;logNo=221107139055&#34;&gt;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=wimvin&amp;amp;logNo=221107139055&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이자, 세금, 비용등을 제외하기 전 이익&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debt to EBITDA는 회사의 빚을 현재 이익으로 나눈 값
&lt;ul&gt;
&lt;li&gt;= 얼마가 걸려야 현재 이익으로 빚을 다 값는지 알 수 있는 지표&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/txg9okcuo/</guid>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 time의 timezone을 변경하기</title>
      <link>https://ariyn.github.io/posts/ayrbw1hun/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time.In(*time.Location)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;t := time.Date(2001, 01, 02, 15, 04, 05, 06, time.UTC)&amp;lt;/br&amp;gt;t.In(time.Local)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ayrbw1hun/</guid>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>elasticsearch query에서 특정 필드만 가져오기</title>
      <link>https://ariyn.github.io/posts/rg9emzmjd/</link>
      <description>&lt;ul&gt;
&lt;li&gt;_source가 false로 되어야 함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;{&amp;lt;/br&amp;gt;  &amp;quot;_source&amp;quot;: false,&amp;lt;/br&amp;gt;  &amp;quot;fields&amp;quot;: [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;]&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html#get-specific-fields&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html#get-specific-fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/rg9emzmjd/</guid>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>ssl 인증서 확인하기</title>
      <link>https://ariyn.github.io/posts/i720z9kdf/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&amp;lt;/br&amp;gt;echo | openssl s_client -showcerts -servername gnupg.org -connect hostname.tld:443 2&amp;gt;/dev/null | openssl x509 -inform pem -noout -text&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/i720z9kdf/</guid>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>docker에서 chromium을 설치할 때, timezone을 물어보는 input이 나올때</title>
      <link>https://ariyn.github.io/posts/a40q4vdgs/</link>
      <description>&lt;ul&gt;
&lt;li&gt;간단히 해결하려면 /etc/localtime에 tz 정보를 넣어주자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;혹은 그 이외의 이유로 docker build과정에서 input을 입력해야 한다면 Dockerfile에 아래의 환경변수 설정
&lt;ul&gt;
&lt;li&gt;debian, ubuntu만 가능함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;ENV DEBIAN_FRONTEND=noninteractive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;단 추천하지는 않는다고 한다
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/faq/#why-is-debian_frontendnoninteractive-discouraged-in-dockerfiles&#34;&gt;https://docs.docker.com/engine/faq/#why-is-debian_frontendnoninteractive-discouraged-in-dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.debian.org/releases/stable/amd64/ch05s03.en.html#installer-args&#34;&gt;https://www.debian.org/releases/stable/amd64/ch05s03.en.html#installer-args&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/a40q4vdgs/</guid>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>gmail에서 필터를 사용해 다른 계정으로 전달이 안될경우</title>
      <link>https://ariyn.github.io/posts/v3peec-3l/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&amp;ldquo;받은 편지함 건너뛰기&amp;quot;항목이 체크되어 있으면 안되는 것으로 보인다&lt;/li&gt;
&lt;li&gt;어째서? 모르겠다&amp;hellip;
&lt;ul&gt;
&lt;li&gt;내 버그인건지&amp;hellip; 아무도 이런 기능을 안쓰는건지&amp;hellip; 영어로 검색해도 나오는게 없다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/v3peec-3l/</guid>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 custom error 구조체를 사용하는 경우 errors.WithStack을 사용하지 말 것</title>
      <link>https://ariyn.github.io/posts/lf-2qqmwv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이경우 type이 error으로 바뀌기 때문에, type체크가 통과가 안된다&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pkg/errors/blob/v0.9.1/errors.go#L145&#34;&gt;https://github.com/pkg/errors/blob/v0.9.1/errors.go#L145&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;func WithStack(err error) error {&amp;lt;/br&amp;gt;	if err == nil {&amp;lt;/br&amp;gt;		return nil&amp;lt;/br&amp;gt;	}&amp;lt;/br&amp;gt;	return &amp;amp;withStack{&amp;lt;/br&amp;gt;		err,&amp;lt;/br&amp;gt;		callers(),&amp;lt;/br&amp;gt;	}&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;type withStack struct {&amp;lt;/br&amp;gt;	error&amp;lt;/br&amp;gt;	*stack&amp;lt;/br&amp;gt;}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;해당 부분의 코드를 보면 &lt;code&gt;&amp;amp;withStack{error}&lt;/code&gt;을 리턴하는데, 이로 인해서 withStack타입 혹은 error타입으로 인식되버림&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;switch err.(type) {&amp;lt;/br&amp;gt;  case ErrCustom:&amp;lt;/br&amp;gt;    fmt.Println(&amp;quot;custom&amp;quot;)&amp;lt;/br&amp;gt;  default:&amp;lt;/br&amp;gt;  	fmt.Println(&amp;quot;default&amp;quot;)&amp;lt;/br&amp;gt;}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;이와같은 경우, default로 통과됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lf-2qqmwv/</guid>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>PKM</title>
      <link>https://ariyn.github.io/posts/auipikogx/</link>
      <description>&lt;ul&gt;
&lt;li&gt;Personal Knowledge management&lt;/li&gt;
&lt;li&gt;개인 지식 저장소
&lt;ul&gt;
&lt;li&gt;위키나, 개인 블로그나, 롬 리서치, 노션, 에버노트 등등&lt;/li&gt;
&lt;li&gt;이렇게 개인이 지식을 저장하는 것에대한 개념인 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하위 개념들
&lt;ul&gt;
&lt;li&gt;commonplace book (비망록)&lt;/li&gt;
&lt;li&gt;#[[zettelkasten]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/auipikogx/</guid>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>회고 항목을 작성할 때</title>
      <link>https://ariyn.github.io/posts/y5x284ahm/</link>
      <description>&lt;ul&gt;
&lt;li&gt;작업한 아이템
&lt;ul&gt;
&lt;li&gt;브랜치&lt;/li&gt;
&lt;li&gt;PR&lt;/li&gt;
&lt;li&gt;노션 카드&lt;/li&gt;
&lt;li&gt;트렐로 카드&lt;/li&gt;
&lt;li&gt;포스트잇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커뮤니케이션 히스토리
&lt;ul&gt;
&lt;li&gt;메일&lt;/li&gt;
&lt;li&gt;슬랙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개인 기록
&lt;ul&gt;
&lt;li&gt;일기 (혹은 멋지게 &amp;ldquo;데일리 회고&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;트렐로 카드&lt;/li&gt;
&lt;li&gt;PKM (롬 리서치)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/y5x284ahm/</guid>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>bash에서 첫번째 문자를 대문자로 만들기</title>
      <link>https://ariyn.github.io/posts/tmxow28ey/</link>
      <description>&lt;ul&gt;
&lt;li&gt;왜 이렇게 가능한지 나중에 공부하기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;file=&amp;quot;$(tr &#39;[:lower:]&#39; &#39;[:upper:]&#39; &amp;lt;&amp;lt;&amp;lt; ${file:0:1})${file:1}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;출처 &lt;a href=&#34;https://stackoverflow.com/questions/12487424/uppercase-first-character-in-a-variable-with-bash&#34;&gt;https://stackoverflow.com/questions/12487424/uppercase-first-character-in-a-variable-with-bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tmxow28ey/</guid>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>jenkins에서 private repo에 github push가 도저히 연동 안될때</title>
      <link>https://ariyn.github.io/posts/gpyn_hla5/</link>
      <description>&lt;ul&gt;
&lt;li&gt;log에서 깃헙 푸시 오는지 확인&lt;/li&gt;
&lt;li&gt;만약 no matching repository라면, gitscm에 등록해둔 url이 로그의 push에 존재 하는지 확인
&lt;ul&gt;
&lt;li&gt;없다면, sshUrl에 들어있는 그 값으로 바꿔줄 것 (private에 ssh로 접속하는 경우에는 user, .git suffix 등등의 설정이 조금 다른듯)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gpyn_hla5/</guid>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>jenkins에서 ssh할때, `Host key verification failed`로 끝나는 경우</title>
      <link>https://ariyn.github.io/posts/bbae78lgw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo su jenkins&lt;/code&gt;를 통해서 jenkins로 유저를 바꾸고, &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;에 호스트의 fingerprint를 추가해주자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/bbae78lgw/</guid>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>goland에서 go fmt가 동작 안할때</title>
      <link>https://ariyn.github.io/posts/os3uqbwsq/</link>
      <description>&lt;ul&gt;
&lt;li&gt;file watcher에서 go fmt를 활성화&lt;/li&gt;
&lt;li&gt;go fmt의 설정에서
&lt;ul&gt;
&lt;li&gt;program: &lt;code&gt;/path/to/go/gofmt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;arguments : &lt;code&gt;-w $FilePath$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;output path to refresh: &lt;code&gt;$FilePath$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;임을 확인할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/os3uqbwsq/</guid>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang marshalJson 사용시 주의할 점</title>
      <link>https://ariyn.github.io/posts/syl4e5dxv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;단순히 marshalJson을 하게되면 recursive하게 실행될 가능성이 존재함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;func (s Strc) MarshalJson() ([]byte, error) {&amp;lt;/br&amp;gt;  data, err := json.Marshal(s)&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 아래와 같이 임시 타입을 생성해서 진행해야 함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;func (s Strc) MarshalJson() ([]byte, error) {&amp;lt;/br&amp;gt;  data, err := json.Marshal(struct {&amp;lt;/br&amp;gt;		Strc&amp;lt;/br&amp;gt;	}{Strc: s})&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/syl4e5dxv/</guid>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>beanstalk에서 nginx 설정을 바꾸는 방법</title>
      <link>https://ariyn.github.io/posts/7ynbsztwg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;.ebextensions 폴더는 legacy
&lt;ul&gt;
&lt;li&gt;.platform 폴더를 사용해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/61580965/beanstalk-deployment-ignores-my-nginx-configuration-files-in-ebextensions&#34;&gt;https://stackoverflow.com/questions/61580965/beanstalk-deployment-ignores-my-nginx-configuration-files-in-ebextensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mystria.github.io/archivers/fail-case-timeout-free-on-aws&#34;&gt;https://mystria.github.io/archivers/fail-case-timeout-free-on-aws&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/awsdocs/elastic-beanstalk-samples/blob/master/configuration-files/aws-provided/security-configuration/https-redirect/golang/nginx/conf.d/elasticbeanstalk/00_application.conf&#34;&gt;https://github.com/awsdocs/elastic-beanstalk-samples/blob/master/configuration-files/aws-provided/security-configuration/https-redirect/golang/nginx/conf.d/elasticbeanstalk/00_application.conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/configuring-https-httpredirect.html&#34;&gt;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/configuring-https-httpredirect.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/14693852/how-to-force-https-on-elastic-beanstalk&#34;&gt;https://stackoverflow.com/questions/14693852/how-to-force-https-on-elastic-beanstalk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/7ynbsztwg/</guid>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>git 마지막에 사용한 브랜치 이름</title>
      <link>https://ariyn.github.io/posts/lg14ji_vc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@{-1}&lt;/code&gt;으로 사용
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git switch @{-1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge @{-1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff @{-1}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;아주 당연하지만 &lt;code&gt;@{-2}&lt;/code&gt;, &lt;code&gt;@{-3}&lt;/code&gt; 이런식으로 계속 사용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/lg14ji_vc/</guid>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>beanstalk 설정들</title>
      <link>https://ariyn.github.io/posts/yo8d67xqr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;설정이 개판이다.&lt;/li&gt;
&lt;li&gt;여러대의 인스턴스를 사용하도록 설정
&lt;ul&gt;
&lt;li&gt;구성 &amp;gt; 용량 &amp;gt; 인스턴스&lt;/li&gt;
&lt;li&gt;미니멈 instance size를 1에서 2로 옮김&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;health check의 패스를 변경
&lt;ul&gt;
&lt;li&gt;구성 &amp;gt; 로드밸런서 &amp;gt; 프로세스 &amp;gt; 상태 검사 경로&lt;/li&gt;
&lt;li&gt;프로세스의 경우, 내부에서 어떤 포트를 사용해 프로세스에 요청할 것인지 설정&lt;/li&gt;
&lt;li&gt;리스너는 외부에 어떤 포트를 열 것인지 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/yo8d67xqr/</guid>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>beanstalk에서 /etc/hosts를 수정하는 방법</title>
      <link>https://ariyn.github.io/posts/mzsmfdhir/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/ebextensions.html&#34;&gt;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/ebextensions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;.ebextensions에 커맨드를 추가
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;command:&amp;lt;/br&amp;gt;  echo &#39;127.0.0.1 hostname&#39; &amp;gt;&amp;gt; /etc/hosts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/41903297/how-to-customize-hosts-file-in-elastic-beanstalk&#34;&gt;https://stackoverflow.com/questions/41903297/how-to-customize-hosts-file-in-elastic-beanstalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://namocom.tistory.com/825&#34;&gt;https://namocom.tistory.com/825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/mzsmfdhir/</guid>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>2d Hexagon 거리 측정</title>
      <link>https://ariyn.github.io/posts/smonoglfz/</link>
      <description>&lt;ul&gt;
&lt;li&gt;빠르게 해야하니, 단순히 recursive하게 계산
&lt;ul&gt;
&lt;li&gt;각 depth마다, 자신 주변의 모든 타일에 대해 recursive하게 들어감&lt;/li&gt;
&lt;li&gt;depth가 넘어가면 더이상 들어가지 않고, 주변 타일만 계산함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;아마도 문제가 있을 부분
&lt;ul&gt;
&lt;li&gt;비어있는 타일이 있을경우, 그 타일때문에, 계산이 달라질 듯.&lt;/li&gt;
&lt;li&gt;그러나 아직은 버그를 허용하고 빠르게 만드는게 목적&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음에 해야하는 일
&lt;ul&gt;
&lt;li&gt;캐릭터를 선택했을때, 현재 위치에 따라 거리를 계산&lt;/li&gt;
&lt;li&gt;계산된 거리에 따라 타일의 색을 바꿔줌
&lt;ul&gt;
&lt;li&gt;현재는 sprite를 사용하지만, 이건 phaser3의 특성인지 바꾸기 어려운 듯.&lt;/li&gt;
&lt;li&gt;sprite를 새로 만들어야 하나?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;거리에 맞는 위치로만 이동 가능하게&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/smonoglfz/</guid>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>러시아 F1 그랑프리</title>
      <link>https://ariyn.github.io/posts/cicbuehzr/</link>
      <description>&lt;p&gt;1913~1914까지 열렸고, 2014년에 다시 개최되었다
1914년은 1차대전이 시작된 해&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중미에서는 파나마 운하가 개통됨&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/cicbuehzr/</guid>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>간단하게 웹서버가 필요할 때</title>
      <link>https://ariyn.github.io/posts/s2vhxiq02/</link>
      <description>&lt;ul&gt;
&lt;li&gt;static webserver를 띄우기 위해서는, 해당 폴더에서&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;python3 -m http.server 80&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/s2vhxiq02/</guid>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 regexp를 사용할 때, 여러 라인에 걸쳐 읽으려면 `(?s)`를 붙여 줘야 한다.</title>
      <link>https://ariyn.github.io/posts/hcgnzjtrl/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;regexp.MustCompile(`(?s)START(.*?)STOP`)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;만약 &lt;code&gt;(?m)&lt;/code&gt;과 함께 쓰려면?
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;`(?sm)START(.*?)STOP` &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hcgnzjtrl/</guid>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>editor없이 crontab에 추가하는 방법</title>
      <link>https://ariyn.github.io/posts/zqor-g1mw/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;crontab -l &amp;gt; /tmp/cron&amp;lt;/br&amp;gt;echo &amp;quot;* * * * * echo hello&amp;quot; &amp;gt;&amp;gt; /tmp/cron&amp;lt;/br&amp;gt;crontab /tmp/cron&amp;lt;/br&amp;gt;rm /tmp/cron&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;crontab file
&lt;ul&gt;
&lt;li&gt;파일을 읽어서 crontab에 설치함 (덮어쓰기됨)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출처:https://stackoverflow.com/questions/878600/how-to-create-a-cron-job-using-bash-automatically-without-the-interactive-editor&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/zqor-g1mw/</guid>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>회의가 길어질때</title>
      <link>https://ariyn.github.io/posts/xst4xskra/</link>
      <description>&lt;ul&gt;
&lt;li&gt;다시 원점으로 돌아가자. 우리가 왜 이 이야기를 하는가?&lt;/li&gt;
&lt;li&gt;어디서부터 이야기가 나왔는가?&lt;/li&gt;
&lt;li&gt;이야기가 섞여있을 가능성이 높음.
&lt;ul&gt;
&lt;li&gt;그것을 분리하고 필요한 이야기들을 먼저 하고, 나머지를 나중에 끝내자.&lt;/li&gt;
&lt;li&gt;(다음번에 또 이야기 해봅시다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/xst4xskra/</guid>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>회의를 시작할 때</title>
      <link>https://ariyn.github.io/posts/hosrbeq6c/</link>
      <description>&lt;ul&gt;
&lt;li&gt;지난번에 했던 내용에 대한 리마인드 한번 하자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hosrbeq6c/</guid>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>mysql에서 column이름을 보지 않고, 결과만 얻기</title>
      <link>https://ariyn.github.io/posts/l2c0vdijo/</link>
      <description>&lt;ul&gt;
&lt;li&gt;-N옵션
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;mysql -N -e &#39;SELECT * FROM user;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-column-names
&lt;ul&gt;
&lt;li&gt;Write column names in results.&lt;/li&gt;
&lt;li&gt;(Defaults to on; use &amp;ndash;skip-column-names to disable.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N, &amp;ndash;skip-column-names
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t write column names in results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실수로 -n 옵션을 주게되면 다른게 적용되니 조심하자
&lt;ul&gt;
&lt;li&gt;-n, &amp;ndash;unbuffered&lt;/li&gt;
&lt;li&gt;Flush buffer after each query.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/l2c0vdijo/</guid>
      <pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>회의를 잡을때</title>
      <link>https://ariyn.github.io/posts/cqhdmssva/</link>
      <description>&lt;ul&gt;
&lt;li&gt;어떤 사람들이 들어와야 하는지 물어보자&lt;/li&gt;
&lt;li&gt;캘린더를 보고, 들어오는 사람들의 시간을 확인하자
&lt;ul&gt;
&lt;li&gt;다같이 가능한 시간 대역을 알려주자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/cqhdmssva/</guid>
      <pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>golang에서 stdin을 한줄씩 읽는방법</title>
      <link>https://ariyn.github.io/posts/leeky5kqv/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;scanner := bufio.NewScanner(os.Stdin)&amp;lt;/br&amp;gt;for scanner.Scan() {&amp;lt;/br&amp;gt;  fmt.Println(scanner.Text())&amp;lt;/br&amp;gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/leeky5kqv/</guid>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>docker 컨테이너를 실행할 때, 파일을 넘겨주기</title>
      <link>https://ariyn.github.io/posts/tumz9uohu/</link>
      <description>&lt;ul&gt;
&lt;li&gt;상대경로는 안되는 듯. 절대 경로로 실행하자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;docker run -v $PWD/file.txt:/root/file.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/tumz9uohu/</guid>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>jq에서 $로 시작하는 필드 선택하기</title>
      <link>https://ariyn.github.io/posts/_1jobgcfi/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;jq &#39;.&amp;quot;$id&amp;quot;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/_1jobgcfi/</guid>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>나는 왜 롬 리서치를 사용하는가</title>
      <link>https://ariyn.github.io/posts/odyrflfr4/</link>
      <description>&lt;ul&gt;
&lt;li&gt;사고의 방식이 바뀜
&lt;ul&gt;
&lt;li&gt;기존 노션이나 에버노트에서는 사고의 단위가 &amp;ldquo;문단&amp;quot;이였음
&lt;ul&gt;
&lt;li&gt;물론 tab 기능을 지원하지만, 그건 어디까지나 &amp;ldquo;부차적인 기능&amp;quot;으로 느껴짐&lt;/li&gt;
&lt;li&gt;강제되지 않다보니, 쭈욱 적게됨
&lt;ul&gt;
&lt;li&gt;조금 부차적인 문제이지만, &amp;ldquo;어디서 문단을 나눠야 하는가&amp;quot;도 고민이 듬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;roam에서는 기본 단위가 상하 관계를 가진 문장으로 제한됨
&lt;ul&gt;
&lt;li&gt;생각의 틀이 문장단위로 강제됨&lt;/li&gt;
&lt;li&gt;오히려 이 덕분에 필요한 문장만 쓸 수 있게됨&lt;/li&gt;
&lt;li&gt;개인적으로 &amp;ldquo;필요한 생각&amp;quot;만 적도록 연습할 수 있었음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(따라서 소설이나 비슷한 형식의 다른 문서작성은 노션이나 에버노트가 월등히 좋음. 아니 롬 리서치가 기본도 못한다고 하는게 맞을 듯 :joy:)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;매일 기본 단위가 daily note로 맞춰짐
&lt;ul&gt;
&lt;li&gt;에버노트나 노션을 쓸 때, 굉장히 고통스러웠던 부분
&lt;ul&gt;
&lt;li&gt;나는 늘 새로운 페이지를 만들어서 기록해야 함&lt;/li&gt;
&lt;li&gt;그러나 지금 생각나서 적는 20글자 짜리 생각에는 언제나 &amp;ldquo;제목&amp;quot;이 달릴 수 없다&lt;/li&gt;
&lt;li&gt;그렇다보니 내 에버노트의 대부분은 &amp;ldquo;제목없는 노트&amp;quot;로 제목이 되어 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;롬에서는 daily note가 생성됨
&lt;ul&gt;
&lt;li&gt;필요한 것들은 전부 여기에 적으면 됨&lt;/li&gt;
&lt;li&gt;다른곳에서도 알아봐야 한다면, #으로 다른 페이지와 링크하면 됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특히나 #을 통한 링크와 역링크가 핵심으로 들어와 있다보니, 부차적인 것들이 덜 필요해지는 느낌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/odyrflfr4/</guid>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>한주에 하나씩 새로운것을 익혀보자</title>
      <link>https://ariyn.github.io/posts/gteknican/</link>
      <description>&lt;ul&gt;
&lt;li&gt;내 습관을 고치는 작업
&lt;ul&gt;
&lt;li&gt;한주씩 새로운것을 익혀서 1년이면 55가지 새로운 습관을 익힐 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;분야는 삶, 지식, 행동, 코드 등 여러 분야에 걸쳐서 진행해보자.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/gteknican/</guid>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>3d 프린터의 출력물의 결과가 바뀌었다</title>
      <link>https://ariyn.github.io/posts/ccr6obqyr/</link>
      <description>&lt;ul&gt;
&lt;li&gt;기존에는 ender3에 포함된 기본적으로 끼워져 있던 노즐을 사용했다.&lt;/li&gt;
&lt;li&gt;이번에 노즐이 완전히 망가져서, 동봉된 다른 노즐을 사용했는데, 조금 더 작은 구경인듯&lt;/li&gt;
&lt;li&gt;동일하게 cura에서 0.16mm으로 설정했지만, 이쪽이 월등하게 퀄리티가 높다&amp;hellip;
&lt;ul&gt;
&lt;li&gt;역시 기존에도 &amp;ldquo;노즐의 구경에 맞게 필라멘트가 나오는 것&amp;quot;이 아닌 &amp;ldquo;익스트루더가 0.16mm라면 이정도 밀면 된다&amp;quot;라고 동작하는게 맞았나보다&amp;hellip;&lt;/li&gt;
&lt;li&gt;다만 정확한 노즐의 구경을 알아야 할 필요는 있을 듯.
&lt;ul&gt;
&lt;li&gt;출력중 기존에는 들어본적 없는 소리와 히트엔드가 덜그럭거리는&amp;hellip;. 공포스러운 소리가 나온다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;지난번 노즐이 망가진 이유&amp;hellip;
&lt;ul&gt;
&lt;li&gt;히트엔드쪽을 뜯어보니, 테프론 튜브가 녹았다.&lt;/li&gt;
&lt;li&gt;그리곤 그 녹은 찌꺼기가 노즐로 들어가 완전히 막아버린듯.&lt;/li&gt;
&lt;li&gt;라이터등으로 지져서 뽑아낼 수는 있을것 같지만&amp;hellip;. 기존 출력물의 퀄리티에 불만이 있어서, 이번 기회에 노즐을 바꾸기로 결정함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/ccr6obqyr/</guid>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>물건 상자를 잘 사용 하는 방법</title>
      <link>https://ariyn.github.io/posts/hjzrvdsma/</link>
      <description>&lt;ul&gt;
&lt;li&gt;집에 잡동사니가 들어있는 상자(보관함)이 여러개 있다. 차곡차곡 쌓여있음.
&lt;ul&gt;
&lt;li&gt;따라서 아랫쪽에 있는 상자에서 꺼낼때는, 위에있는 상자를 치워놓고 꺼내야 함.&lt;/li&gt;
&lt;li&gt;이 과정이 너무 불편하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 상자에는 잡동사니의 종류별로 넣어 놓았다.
&lt;ul&gt;
&lt;li&gt;여기까지는 문제가 없지만, 자주 사용하는 것들에 대해서는 생각하지 못했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;잡동사니 상자를 &amp;ldquo;스토리지&amp;quot;로 생각했을때, 스토리지에서 자주 꺼내는 것들은 캐시에 담아둔다.
&lt;ul&gt;
&lt;li&gt;여기서도 동일하게 적용할 수 있지 않을까?
&lt;ul&gt;
&lt;li&gt;LRU를 적용해보면 어떨까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;캐시 상자는 따로 일을 하지 않아도, 바로 열 수 있는 곳에 둔다.
&lt;ul&gt;
&lt;li&gt;가장 최근에 쓴 물건은 캐시 상자에 옮겨둔다.&lt;/li&gt;
&lt;li&gt;다음번에 쓴 물건을 넣을때, 캐시상자에서 가장 오래전에 쓴 물건을 뺀다. (정확하게 할 수는 없으니, 적당히 안썼던 것, 앞으로도 한동안 안 쓸것을 빼야할 듯.)&lt;/li&gt;
&lt;li&gt;캐시상자에서 뺀 물건은&amp;hellip;
&lt;ul&gt;
&lt;li&gt;원래의 상자에 넣는것은 기존과 동일한 수준의 일거리가 될 듯.&lt;/li&gt;
&lt;li&gt;가장 위에있는 상자에 넣으면 어떨까?&lt;/li&gt;
&lt;li&gt;최종적으로 캐시상자부터 아래 상자까지 &amp;ldquo;최근 사용한 물건 순서&amp;quot;로 정렬되는 방식&lt;/li&gt;
&lt;li&gt;무엇인가를 찾을때는 위에서부터 순서대로 박스를 열어보면 되는 구조.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;잡동사니가 잘 안쓰이다보니, 캐시 히트가 잘 안될 수 있을 것 같다.
&lt;ul&gt;
&lt;li&gt;한동안 실험해보고 다시 정리 해야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/hjzrvdsma/</guid>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>공병우 박사님은 1907년생이다.</title>
      <link>https://ariyn.github.io/posts/wci_vprx5/</link>
      <description>&lt;p&gt;1907년은 고종이 퇴임한 해다&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;돌아가신 해는 1995년&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/wci_vprx5/</guid>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>달의 모양</title>
      <link>https://ariyn.github.io/posts/bvxsz5vzp/</link>
      <description>&lt;ul&gt;
&lt;li&gt;달의 모양은 삭 -&amp;gt; 초승달 -&amp;gt; 상현달 -&amp;gt; 망(보름달) -&amp;gt; 하현달 -&amp;gt; 그믐달 -&amp;gt; 삭 의 순서로 변한다.&lt;/li&gt;
&lt;li&gt;달의 모양은 날짜의 영향을 받는다.&lt;/li&gt;
&lt;li&gt;{{[[table]]}}
&lt;ul&gt;
&lt;li&gt;모양
&lt;ul&gt;
&lt;li&gt;날짜(음력)
&lt;ul&gt;
&lt;li&gt;관측 시간과 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;삭
1일
&lt;ul&gt;
&lt;li&gt;태양과 함께 뜨고 짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;초승달
2~3일
&lt;ul&gt;
&lt;li&gt;해진 후 서쪽 하늘에서 관측가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상현달
7~8일
&lt;ul&gt;
&lt;li&gt;초저녁에 남중하고 자정에 서쪽하늘로 진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보름달
15일
&lt;ul&gt;
&lt;li&gt;초저녁에 동쪽 하늘에서 떠서, 자정에 남중하며 새벽에 서쪽 하늘로 진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하현달
22~23일
&lt;ul&gt;
&lt;li&gt;자정에 동쪽하늘에 떠서, 새벽에 남중한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그믐달
28~29일
&lt;ul&gt;
&lt;li&gt;새벽에 동쪽 하늘에서 관측가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;남중했을때의 달의 모양
&lt;ul&gt;
&lt;li&gt;초승달 -&amp;gt; 우측이 조금 차 있는 달&lt;/li&gt;
&lt;li&gt;상현달 -&amp;gt; 우측이 차 있는 달&lt;/li&gt;
&lt;li&gt;보름달 -&amp;gt; 꽉 찬 달&lt;/li&gt;
&lt;li&gt;하현달 -&amp;gt; 좌측이 차 있는 달&lt;/li&gt;
&lt;li&gt;그믐달 -&amp;gt; 죄측이 조금 차 있는 달&lt;/li&gt;
&lt;li&gt;삭 -&amp;gt; 보이지 않음&lt;/li&gt;
&lt;li&gt;서쪽에 있을 때, 한국의 위도로 인해 아래쪽이 차 있는 모양이다.&lt;/li&gt;
&lt;li&gt;동쪽에 있을 때. 한국의 위도로 인해 위쪽이 차 있는 모양이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공전 주기
&lt;ul&gt;
&lt;li&gt;삭망월 : 달의 위상이 원위치 하는 기간. 약 29.5일 (음력 한 달)&lt;/li&gt;
&lt;li&gt;항성월 : 별을 기준으로 달이 한바퀴 도는 기간 약 27.3일 (실제 공전주기)&lt;/li&gt;
&lt;li&gt;달의 자전주기 : 달의 공전주기 27.3일과 동일함.&lt;/li&gt;
&lt;li&gt;공전 방향과 자전 방향도 같기 때문에, 항상 달의 같은 부분이 지구를 향한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;달이 뜨는 시간
&lt;ul&gt;
&lt;li&gt;지구가 1회 자전하는 동안 달은 약 13˚씩 공전한다.(360˚/27.3일 = 13.18˚/day)&lt;/li&gt;
&lt;li&gt;따라서 동일한 위치에 오려면 약 50분이 더 걸리게 된다.(24시간 * 60 / 360˚ * 13˚)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;출처
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://study.zum.com/book/12515&#34;&gt;달의 위상 변화와 공전 주기 | ZUM 학습 백과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/bvxsz5vzp/</guid>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>블로그를 쉽게 쓰는 방법에 대해</title>
      <link>https://ariyn.github.io/posts/nxtca5ebc/</link>
      <description>&lt;ul&gt;
&lt;li&gt;roam research와 거의 동일한 수준으로
&lt;ul&gt;
&lt;li&gt;좀 더 이쁘게 할 수는 있을 듯&lt;/li&gt;
&lt;li&gt;다만 글을 체계적으로 쓰는 노력을 할 수 있게 + 큰 노력을 들이지 않고 블로그 글을 쓸 수 있게&lt;/li&gt;
&lt;li&gt;따라서 api를 이용해서 특정 태그가 걸려 있다면 자동으로 글을 업로드 해야 함
&lt;ul&gt;
&lt;li&gt;단 하면 안되는 태그가 있을경우 업로드 해서는 안됨&lt;/li&gt;
&lt;li&gt;혹은 preview, review가 확실하게 진행 되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스
&lt;ul&gt;
&lt;li&gt;R.R.에 글을 씀
&lt;ul&gt;
&lt;li&gt;이때 글은 새 페이지 뿐만 아니라, daily notes에 쓴 블럭도 포함됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;태그가 붙은 블럭의 하위 모든 블럭을 md로 출력
&lt;ul&gt;
&lt;li&gt;블로그에 올릴 글의 최상위 블럭에 &lt;code&gt;#블로그&lt;/code&gt; 와 같은 태그를 붙임&lt;/li&gt;
&lt;li&gt;crontab을 이용해 매일 정시에 roam research의 태그를 검색&lt;/li&gt;
&lt;li&gt;기존에 존재하지 않던 id의 블럭이 생겨 있다면, 해당 블럭을 출력&lt;/li&gt;
&lt;li&gt;id값 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;raw git repo에 md 파일 저장 후 push&lt;/li&gt;
&lt;li&gt;raw git repo를 기반으로 static web site 컴파일 후 push&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;생각해볼 기능
&lt;ul&gt;
&lt;li&gt;local환경에서 빌드하고 테스트 할 수 있도록 정리&lt;/li&gt;
&lt;li&gt;가져오는것에 실패 했다면 커밋을 취소하기  [[September 17th, 2021]]
&lt;ul&gt;
&lt;li&gt;가끔 모든 파일을 삭제한채로 커밋하는 경우가 있음&lt;/li&gt;
&lt;li&gt;막아줄 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;quote 기능
&lt;ul&gt;
&lt;li&gt;roam research에서는 동작 안해도, 실제로는 필요하다.&lt;/li&gt;
&lt;li&gt;확장 프로그램으로 만들어도 좋을 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;path 단위 태그 구분
&lt;ul&gt;
&lt;li&gt;


&lt;ul&gt;
&lt;li&gt;모든 문서는 root의 하위 문서들&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;태그를 사용한다면 path 단위의 구분이 쓸모 없는 것 아닌가?
&lt;ul&gt;
&lt;li&gt;md 파일을 관리해야하니 이정도는 필요할 수도 있을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;


&lt;ul&gt;
&lt;li&gt;기계인간은 이런식으로 태그와 패스 둘 다 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 페이지에 링크가 걸릴경우 어떻게 할 것인지 고민해보자
&lt;ul&gt;
&lt;li&gt;이경우 특정 폴더 하위에 적으려면 해당 파일에 계속해서 들어가야 함&lt;/li&gt;
&lt;li&gt;사용하지 않기로.
&lt;ul&gt;
&lt;li&gt;이런식으로 delimiter를 기반으로 태그를 생성하기 #[[블로그/기술]]&lt;/li&gt;
&lt;li&gt;이경우 api로 감시하다가 발견된면 자동으로 #[[블로그]]에도 적어줬으면 좋겠다.
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이런식으로 특정 태그가 글의 중간에 나올 경우, 파싱에서는 제외되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://johngrib.github.io/wiki/tools/&#34;&gt;https://johngrib.github.io/wiki/tools/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;이런 페이지는, 동일한 페이지들을 묶어서 제목만 보여주도록&lt;/li&gt;
&lt;li&gt;즉 태그 페이지는 존재하지 않음 (혹은 무시하거나, 기존의 내용보다 뒤쪽에 자동으로 이 내용을 붙여줘도 괜찮을 듯)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적으로 docker에 태그를 넣어주기
&lt;ul&gt;
&lt;li&gt;특정 태그가 들어 있다면 파싱한다던지, 아니면 들어 있다면 파싱 안한다던지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 태그가 존재하는 블럭의 하위는 추출하지 않기
&lt;ul&gt;
&lt;li&gt;#private 같은 태그가 존재한다면 좋을 것 (단 이건 영어이기 때문에 한영 바꾸는 피로가 높을 것)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 단어가 있는지 검색하기&lt;/li&gt;
&lt;li&gt;이미지 가져 왔을때, 해당 이미지를 로컬에 저장하고 url 변경해주는 작업 필요함
&lt;ul&gt;
&lt;li&gt;그냥 가져오면 매번 가져올 수 있게됨
&lt;ul&gt;
&lt;li&gt;따라서 이 이미지가 기존에 존재하는 이미지인지 확인하고, 가져올 필요 있음.&lt;/li&gt;
&lt;li&gt;sha1으로 이름을 해싱할까?&lt;/li&gt;
&lt;li&gt;그리고 db에 없다면 가져오도록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;{{todo}}와 같이 특수한 문법은 &lt;code&gt;[ ]&lt;/code&gt;처럼 수정이 필요하다&lt;/li&gt;
&lt;li&gt;제목
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 생성일, 수정일
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;github에 파일이 업로드 된 시점?
&lt;ul&gt;
&lt;li&gt;이경우 준-실시간으로 감시해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커밋할 때, 내용을 축약해서 커밋 메시지에 담으면 좋을 듯
&lt;ul&gt;
&lt;li&gt;TIL 몇개, 오늘 만든 페이지 몇개 등등&lt;/li&gt;
&lt;li&gt;각각의 페이지는 각자 PR로 쏘고, 각 PR을 리뷰하는 것도 좋을 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 파일별 PR할 수 있도록
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;x=$(for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;filename=$(basename -- &amp;quot;$i&amp;quot;);&amp;lt;/br&amp;gt;filename=&amp;quot;${filename%.*}&amp;quot;&amp;lt;/br&amp;gt;echo $filename;&amp;lt;/br&amp;gt;done); echo $x | sort | uniq &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;➜  ~ ssh odroid&amp;lt;/br&amp;gt;admin@192.168.0.2&#39;s password:&amp;lt;/br&amp;gt;Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.14.180-178 armv7l)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt; * Documentation:  https://help.ubuntu.com&amp;lt;/br&amp;gt; * Management:     https://landscape.canonical.com&amp;lt;/br&amp;gt; * Support:        https://ubuntu.com/advantage&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;패키지 74개를  업데이트할 수 있습니다.&amp;lt;/br&amp;gt;1 of these updates is a security update.&amp;lt;/br&amp;gt;To see these additional updates run: apt list --upgradable&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;New release &#39;20.04 LTS&#39; available.&amp;lt;/br&amp;gt;Run &#39;do-release-upgrade&#39; to upgrade to it.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;Last login: Tue Aug 24 15:01:14 2021 from 192.168.0.19&amp;lt;/br&amp;gt;➜  ~ cd /tmp&amp;lt;/br&amp;gt;➜  /tmp ls&amp;lt;/br&amp;gt;logrotate&amp;lt;/br&amp;gt;systemd-private-d7abb012be5542bf9660a14a2bb7ccc8-ModemManager.service-DdLjmY&amp;lt;/br&amp;gt;systemd-private-d7abb012be5542bf9660a14a2bb7ccc8-colord.service-MHpt0j&amp;lt;/br&amp;gt;systemd-private-d7abb012be5542bf9660a14a2bb7ccc8-systemd-resolved.service-8mjLEQ&amp;lt;/br&amp;gt;systemd-private-d7abb012be5542bf9660a14a2bb7ccc8-systemd-timesyncd.service-oJcedh&amp;lt;/br&amp;gt;test&amp;lt;/br&amp;gt;➜  /tmp git config --global core.editor=vim&amp;lt;/br&amp;gt;error: invalid key: core.editor=vim&amp;lt;/br&amp;gt;➜  /tmp git config --global core.editor vim&amp;lt;/br&amp;gt;➜  /tmp cd test&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git config --global core.editor vim&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git config --global -e&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git config -e&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git status&amp;lt;/br&amp;gt;현재 브랜치 master&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;아직 커밋이 없습니다&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;추적하지 않는 파일:&amp;lt;/br&amp;gt;  (커밋할 사항에 포함하려면 &amp;quot;git add &amp;lt;파일&amp;gt;...&amp;quot;을 사용하십시오)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;        DEADJOE&amp;lt;/br&amp;gt;        test.json&amp;lt;/br&amp;gt;        test.md&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;커밋할 사항을 추가하지 않았지만 추적하지 않는 파일이 있습니다 (추적하려면 &amp;quot;git&amp;lt;/br&amp;gt;add&amp;quot;를 사용하십시오)&amp;lt;/br&amp;gt;➜  test git:(master) ✗ ll&amp;lt;/br&amp;gt;합계 0&amp;lt;/br&amp;gt;-rw------- 1 admin admin 0  8월 24 15:06 DEADJOE&amp;lt;/br&amp;gt;-rw-rw-r-- 1 admin admin 0  8월 24 15:02 test.json&amp;lt;/br&amp;gt;-rw-rw-r-- 1 admin admin 0  8월 24 15:02 test.md&amp;lt;/br&amp;gt;➜  test git:(master) ✗ cat DEADJOE&amp;lt;/br&amp;gt;➜  test git:(master) ✗ rm deadjoe&amp;lt;/br&amp;gt;rm: &#39;deadjoe&#39;를 지울 수 없음: 그런 파일이나 디렉터리가 없습니다&amp;lt;/br&amp;gt;➜  test git:(master) ✗ rm DEADJOE&amp;lt;/br&amp;gt;➜  test git:(master) ✗ ls&amp;lt;/br&amp;gt;test.json  test.md&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git status&amp;lt;/br&amp;gt;현재 브랜치 master&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;아직 커밋이 없습니다&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;추적하지 않는 파일:&amp;lt;/br&amp;gt;  (커밋할 사항에 포함하려면 &amp;quot;git add &amp;lt;파일&amp;gt;...&amp;quot;을 사용하십시오)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;        test.json&amp;lt;/br&amp;gt;        test.md&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;커밋할 사항을 추가하지 않았지만 추적하지 않는 파일이 있습니다 (추적하려면 &amp;quot;git&amp;lt;/br&amp;gt;add&amp;quot;를 사용하십시오)&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git commit -m &amp;quot;test&amp;quot;&amp;lt;/br&amp;gt;현재 브랜치 master&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;최초 커밋&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;추적하지 않는 파일:&amp;lt;/br&amp;gt;        test.json&amp;lt;/br&amp;gt;        test.md&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;커밋할 사항을 추가하지 않았지만 추적하지 않는 파일이 있습니다&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git log&amp;lt;/br&amp;gt;fatal: 현재 &#39;master&#39; 브랜치에 아직 아무 커밋도 없습니다&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git add test.json test.md&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git commit -m &amp;quot;test&amp;quot;&amp;lt;/br&amp;gt;[master (최상위-커밋) f7d8c7c] test&amp;lt;/br&amp;gt; 2 files changed, 0 insertions(+), 0 deletions(-)&amp;lt;/br&amp;gt; create mode 100644 test.json&amp;lt;/br&amp;gt; create mode 100644 test.md&amp;lt;/br&amp;gt;➜  test git:(master) touch test2.md test2.json&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git status&amp;lt;/br&amp;gt;현재 브랜치 master&amp;lt;/br&amp;gt;추적하지 않는 파일:&amp;lt;/br&amp;gt;  (커밋할 사항에 포함하려면 &amp;quot;git add &amp;lt;파일&amp;gt;...&amp;quot;을 사용하십시오)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;        test2.json&amp;lt;/br&amp;gt;        test2.md&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;커밋할 사항을 추가하지 않았지만 추적하지 않는 파일이 있습니다 (추적하려면 &amp;quot;git&amp;lt;/br&amp;gt;add&amp;quot;를 사용하십시오)&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only HEAD HEAD-1&amp;lt;/br&amp;gt;fatal: 애매한 인자 &#39;HEAD-1&#39;: 알 수 없는 리비전 또는 작업 폴더에 없는 경로.&amp;lt;/br&amp;gt;경로와 리비전을 구분하려면 다음과 같이 &#39;--&#39;를 사용하십시오:&amp;lt;/br&amp;gt;&#39;git &amp;lt;명령&amp;gt; [&amp;lt;리비전&amp;gt;...] -- [&amp;lt;파일&amp;gt;...]&#39;&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only HEAD HE&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git log&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only HEAD f7d8c7cc09&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git add .&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only HEAD f7d8c7cc09&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git status&amp;lt;/br&amp;gt;현재 브랜치 master&amp;lt;/br&amp;gt;커밋할 변경 사항:&amp;lt;/br&amp;gt;  (스테이지 해제하려면 &amp;quot;git reset HEAD &amp;lt;파일&amp;gt;...&amp;quot;을 사용하십시오)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;        새 파일:       test2.json&amp;lt;/br&amp;gt;        새 파일:       test2.md&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only --staged&amp;lt;/br&amp;gt;➜  test git:(master) ✗ git diff --name-only&amp;lt;/br&amp;gt;➜  test git:(master) ✗ vim ~/filename&amp;lt;/br&amp;gt;➜  test git:(master) ✗ vim ~/filename.sh&amp;lt;/br&amp;gt;➜  test git:(master) ✗ for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;for&amp;gt; basename -- &amp;quot;$i&amp;quot;;&amp;lt;/br&amp;gt;for&amp;gt; done&amp;lt;/br&amp;gt;test2.json&amp;lt;/br&amp;gt;test2.md&amp;lt;/br&amp;gt;➜  test git:(master) ✗ for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;filename=$(basename -- &amp;quot;$i&amp;quot;);&amp;lt;/br&amp;gt;filename=&amp;quot;${filename%.*}&amp;quot;&amp;lt;/br&amp;gt;for&amp;gt; echo filename;&amp;lt;/br&amp;gt;for&amp;gt; done&amp;lt;/br&amp;gt;filename&amp;lt;/br&amp;gt;filename&amp;lt;/br&amp;gt;➜  test git:(master) ✗ for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;filename=$(basename -- &amp;quot;$i&amp;quot;);&amp;lt;/br&amp;gt;filename=&amp;quot;${filename%.*}&amp;quot;&amp;lt;/br&amp;gt;echo $filename;&amp;lt;/br&amp;gt;done&amp;lt;/br&amp;gt;test2&amp;lt;/br&amp;gt;test2&amp;lt;/br&amp;gt;➜  test git:(master) ✗ x=$(for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;filename=$(basename -- &amp;quot;$i&amp;quot;);                                                                                           filename=&amp;quot;${filename%.*}&amp;quot;                                                                                               echo $filename;                                                                                                         done);&amp;lt;/br&amp;gt;➜  test git:(master) ✗ x=$(for i in $(git diff --name-only --staged); do&amp;lt;/br&amp;gt;filename=$(basename -- &amp;quot;$i&amp;quot;);                                                                                           filename=&amp;quot;${filename%.*}&amp;quot;                                                                                               echo $filename;                                                                                                         done); echo $x | sort | uniq&amp;lt;/br&amp;gt;test2&amp;lt;/br&amp;gt;➜  test git:(master) ✗ docker run -i -t --entrypoint /bin/bash  roam_research_blog_commiter&amp;lt;/br&amp;gt;root@a20159f93870:/roam# apt install gh&amp;lt;/br&amp;gt;Reading package lists... Done&amp;lt;/br&amp;gt;Building dependency tree&amp;lt;/br&amp;gt;Reading state information... Done&amp;lt;/br&amp;gt;E: Unable to locate package gh&amp;lt;/br&amp;gt;root@a20159f93870:/roam# wget https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_armv6.deb&amp;lt;/br&amp;gt;bash: wget: command not found&amp;lt;/br&amp;gt;root@a20159f93870:/roam# curl&amp;lt;/br&amp;gt;curl: try &#39;curl --help&#39; or &#39;curl --manual&#39; for more information&amp;lt;/br&amp;gt;root@a20159f93870:/roam# curl https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_armv6.deb&amp;lt;/br&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You are being &amp;lt;a href=&amp;quot;https://github-releases.githubusercontent.com/212613049/7766955d-4ee8-46a0-b3c0-f692d3acbb40?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210824%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;amp;X-Amz-Date=20210824T151619Z&amp;amp;amp;X-Amz-Expires=300&amp;amp;amp;X-Amz-Signature=976be82d1f38b8df7e61c4060b464ea0d0acdf3737a7806fa4a3232068fcd5b0&amp;amp;amp;X-Amz-SignedHeaders=host&amp;amp;amp;actor_id=0&amp;amp;amp;key_id=0&amp;amp;amp;repo_id=212613049&amp;amp;amp;response-content-disposition=attachment%3B%20filename%3Dgh_2.0.0_linux_armv6.deb&amp;amp;amp;response-content-type=application%2Foctet-stream&amp;quot;&amp;gt;redirected&amp;lt;/a&amp;gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;root@a20159f93870:/roam# apt install wget -y&amp;lt;/br&amp;gt;Reading package lists... Done&amp;lt;/br&amp;gt;Building dependency tree&amp;lt;/br&amp;gt;Reading state information... Done&amp;lt;/br&amp;gt;The following NEW packages will be installed:&amp;lt;/br&amp;gt;  wget&amp;lt;/br&amp;gt;0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.&amp;lt;/br&amp;gt;Need to get 293 kB of archives.&amp;lt;/br&amp;gt;After this operation, 819 kB of additional disk space will be used.&amp;lt;/br&amp;gt;Get:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/main armhf wget armhf 1.19.4-1ubuntu2.2 [293 kB]&amp;lt;/br&amp;gt;Fetched 293 kB in 2s (168 kB/s)&amp;lt;/br&amp;gt;debconf: delaying package configuration, since apt-utils is not installed&amp;lt;/br&amp;gt;Selecting previously unselected package wget.&amp;lt;/br&amp;gt;(Reading database ... 29494 files and directories currently installed.)&amp;lt;/br&amp;gt;Preparing to unpack .../wget_1.19.4-1ubuntu2.2_armhf.deb ...&amp;lt;/br&amp;gt;Unpacking wget (1.19.4-1ubuntu2.2) ...&amp;lt;/br&amp;gt;Setting up wget (1.19.4-1ubuntu2.2) ...&amp;lt;/br&amp;gt;root@a20159f93870:/roam# wget https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_armv6.deb&amp;lt;/br&amp;gt;--2021-08-24 15:16:37--  https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_armv6.deb&amp;lt;/br&amp;gt;Resolving github.com (github.com)... 15.164.81.167&amp;lt;/br&amp;gt;Connecting to github.com (github.com)|15.164.81.167|:443... connected.&amp;lt;/br&amp;gt;HTTP request sent, awaiting response... 302 Found&amp;lt;/br&amp;gt;Location: https://github-releases.githubusercontent.com/212613049/7766955d-4ee8-46a0-b3c0-f692d3acbb40?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210824%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20210824T151638Z&amp;amp;X-Amz-Expires=300&amp;amp;X-Amz-Signature=12918a8177d99440fc1171ed109c7da6a5a47d31dda30c5df38f6fcd8e1b08a5&amp;amp;X-Amz-SignedHeaders=host&amp;amp;actor_id=0&amp;amp;key_id=0&amp;amp;repo_id=212613049&amp;amp;response-content-disposition=attachment%3B%20filename%3Dgh_2.0.0_linux_armv6.deb&amp;amp;response-content-type=application%2Foctet-stream [following]&amp;lt;/br&amp;gt;--2021-08-24 15:16:38--  https://github-releases.githubusercontent.com/212613049/7766955d-4ee8-46a0-b3c0-f692d3acbb40?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210824%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20210824T151638Z&amp;amp;X-Amz-Expires=300&amp;amp;X-Amz-Signature=12918a8177d99440fc1171ed109c7da6a5a47d31dda30c5df38f6fcd8e1b08a5&amp;amp;X-Amz-SignedHeaders=host&amp;amp;actor_id=0&amp;amp;key_id=0&amp;amp;repo_id=212613049&amp;amp;response-content-disposition=attachment%3B%20filename%3Dgh_2.0.0_linux_armv6.deb&amp;amp;response-content-type=application%2Foctet-stream&amp;lt;/br&amp;gt;Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.109.154, 185.199.108.154, 185.199.110.154, ...&amp;lt;/br&amp;gt;Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.109.154|:443... connected.&amp;lt;/br&amp;gt;HTTP request sent, awaiting response... 200 OK&amp;lt;/br&amp;gt;Length: 6624172 (6.3M) [application/octet-stream]&amp;lt;/br&amp;gt;Saving to: &#39;gh_2.0.0_linux_armv6.deb&#39;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;gh_2.0.0_linux_armv6.deb      100%[=================================================&amp;gt;]   6.32M  7.29MB/s    in 0.9s&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;2021-08-24 15:16:39 (7.29 MB/s) - &#39;gh_2.0.0_linux_armv6.deb&#39; saved [6624172/6624172]&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam# dpkg -i ./&amp;lt;/br&amp;gt;app                       chrome/                   gh_2.0.0_linux_armv6.deb  publi.sh&amp;lt;/br&amp;gt;root@a20159f93870:/roam# dpkg -i ./gh_2.0.0_linux_armv6.deb&amp;lt;/br&amp;gt;Selecting previously unselected package gh.&amp;lt;/br&amp;gt;(Reading database ... 29505 files and directories currently installed.)&amp;lt;/br&amp;gt;Preparing to unpack ./gh_2.0.0_linux_armv6.deb ...&amp;lt;/br&amp;gt;Unpacking gh (2.0.0) ...&amp;lt;/br&amp;gt;Setting up gh (2.0.0) ...&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login&amp;lt;/br&amp;gt;? What account do you want to log into? GitHub.com&amp;lt;/br&amp;gt;? What is your preferred protocol for Git operations? SSH&amp;lt;/br&amp;gt;? Generate a new SSH key to add to your GitHub account? No&amp;lt;/br&amp;gt;? How would you like to authenticate GitHub CLI? Paste an authentication token&amp;lt;/br&amp;gt;Tip: you can generate a Personal Access Token here https://github.com/settings/tokens&amp;lt;/br&amp;gt;The minimum required scopes are &#39;repo&#39;, &#39;read:org&#39;.&amp;lt;/br&amp;gt;? Paste your authentication token:&amp;lt;/br&amp;gt;X Sorry, your reply was invalid: Value is required&amp;lt;/br&amp;gt;X Sorry, your reply was invalid: Value is required&amp;lt;/br&amp;gt;X Sorry, your reply was invalid: Value is required&amp;lt;/br&amp;gt;? Paste your authentication token:&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam# ^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam# ^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login --help&amp;lt;/br&amp;gt;Authenticate with a GitHub host.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;The default authentication mode is a web-based browser flow.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;Alternatively, pass in a token on standard input by using `--with-token`.&amp;lt;/br&amp;gt;The minimum required scopes for the token are: &amp;quot;repo&amp;quot;, &amp;quot;read:org&amp;quot;.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;The --scopes flag accepts a comma separated list of scopes you want your gh credentials to have. If&amp;lt;/br&amp;gt;absent, this command ensures that gh has access to a minimum set of scopes.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;USAGE&amp;lt;/br&amp;gt;  gh auth login [flags]&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;FLAGS&amp;lt;/br&amp;gt;  -h, --hostname string   The hostname of the GitHub instance to authenticate with&amp;lt;/br&amp;gt;  -s, --scopes strings    Additional authentication scopes for gh to have&amp;lt;/br&amp;gt;  -w, --web               Open a browser to authenticate&amp;lt;/br&amp;gt;      --with-token        Read token from standard input&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;INHERITED FLAGS&amp;lt;/br&amp;gt;  --help   Show help for command&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;EXAMPLES&amp;lt;/br&amp;gt;  # start interactive setup&amp;lt;/br&amp;gt;  $ gh auth login&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;  # authenticate against github.com by reading the token from a file&amp;lt;/br&amp;gt;  $ gh auth login --with-token &amp;lt; mytoken.txt&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;  # authenticate with a specific GitHub Enterprise Server instance&amp;lt;/br&amp;gt;  $ gh auth login --hostname enterprise.internal&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;LEARN MORE&amp;lt;/br&amp;gt;  Use &#39;gh &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; --help&#39; for more information about a command.&amp;lt;/br&amp;gt;  Read the manual at https://cli.github.com/manual&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login --with-token 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&amp;lt;/br&amp;gt;accepts 0 arg(s), received 1&amp;lt;/br&amp;gt;root@a20159f93870:/roam# vim /tmp/token&amp;lt;/br&amp;gt;bash: vim: command not found&amp;lt;/br&amp;gt;root@a20159f93870:/roam# echo &#39;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&#39; &amp;gt; /tmp/token&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login --with-token &amp;lt; /tmp/token&amp;lt;/br&amp;gt;error validating token: missing required scope &#39;read:org&#39;&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login --with-toke^C&amp;lt; /tmp/token&amp;lt;/br&amp;gt;root@a20159f93870:/roam# echo &#39;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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^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam# echo &#39;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&#39; &amp;gt; /tmp/token&amp;lt;/br&amp;gt;root@a20159f93870:/roam# gh auth login --with-token &amp;lt; /tmp/token&amp;lt;/br&amp;gt;root@a20159f93870:/roam# ls&amp;lt;/br&amp;gt;app  chrome  gh_2.0.0_linux_armv6.deb  publi.sh&amp;lt;/br&amp;gt;root@a20159f93870:/roam# cat publi.sh&amp;lt;/br&amp;gt;#!/bin/bash&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;echo &amp;quot;Hello, World!!&amp;quot;&amp;lt;/br&amp;gt;git clone github.com-ariyn:ariyn/blog.git /roam/blog&amp;lt;/br&amp;gt;rm -rf /roam/blog/*&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;cd /roam&amp;lt;/br&amp;gt;./app -path /roam/blog/&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;cd blog&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;git_status=$(git status)&amp;lt;/br&amp;gt;if [[ $git_status != *&amp;quot;nothing to commit, working tree clean&amp;quot;* ]]; then&amp;lt;/br&amp;gt;        git add .&amp;lt;/br&amp;gt;        git commit -m $(date &amp;quot;+%Y/%m/%dT%H:%M:%S%Z&amp;quot;)&amp;lt;/br&amp;gt;        git push&amp;lt;/br&amp;gt;fi&amp;lt;/br&amp;gt;root@a20159f93870:/roam# git clone github.com-ariyn:ariyn/blog.git /roam/blog&amp;lt;/br&amp;gt;Cloning into &#39;/roam/blog&#39;...&amp;lt;/br&amp;gt;Warning: Permanently added the RSA host key for IP address &#39;15.164.81.167&#39; to the list of known hosts.&amp;lt;/br&amp;gt;remote: Enumerating objects: 135, done.&amp;lt;/br&amp;gt;remote: Counting objects: 100% (135/135), done.&amp;lt;/br&amp;gt;remote: Compressing objects: 100% (103/103), done.&amp;lt;/br&amp;gt;remote: Total 135 (delta 59), reused 107 (delta 31), pack-reused 0&amp;lt;/br&amp;gt;Receiving objects: 100% (135/135), 50.81 KiB | 290.00 KiB/s, done.&amp;lt;/br&amp;gt;Resolving deltas: 100% (59/59), done.&amp;lt;/br&amp;gt;root@a20159f93870:/roam# cd blog&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# ls&amp;lt;/br&amp;gt;1MlnwjyHC.json  BiGgMFjwt.json  LEeKy5Kqv.json  UnDU96xHi.json  afLrYFRwt.json  gTeKNIcaN.json  nxTCa5EBC.json&amp;lt;/br&amp;gt;1MlnwjyHC.md    BiGgMFjwt.md    LEeKy5Kqv.md    UnDU96xHi.md    afLrYFRwt.md    gTeKNIcaN.md    nxTCa5EBC.md&amp;lt;/br&amp;gt;1RJKw8Cvs.json  BvXSZ5vzP.json  N1RdUnMKx.json  VLANGM8MW.json  cbHW9yz0G.json  hSAAqMAYc.json  rov0rloae.json&amp;lt;/br&amp;gt;1RJKw8Cvs.md    BvXSZ5vzP.md    N1RdUnMKx.md    VLANGM8MW.md    cbHW9yz0G.md    hSAAqMAYc.md    rov0rloae.md&amp;lt;/br&amp;gt;2IswtcvAb.json  Drr0-8T4y.json  OdyrFLFr4.json  WcI_vPRx5.json  ccR6ObQyR.json  i7m3aLLfM.json  vs-2ALIkQ.json&amp;lt;/br&amp;gt;2IswtcvAb.md    Drr0-8T4y.md    OdyrFLFr4.md    WcI_vPRx5.md    ccR6ObQyR.md    i7m3aLLfM.md    vs-2ALIkQ.md&amp;lt;/br&amp;gt;5ExsWqyXc.json  HJZRVDSMA.json  RpHRPNEnm.json  YBRGmwU7p.json  epmNjJhNk.json  jXvgmL4Xh.json&amp;lt;/br&amp;gt;5ExsWqyXc.md    HJZRVDSMA.md    RpHRPNEnm.md    YBRGmwU7p.md    epmNjJhNk.md    jXvgmL4Xh.md&amp;lt;/br&amp;gt;6BmMgCelq.json  IDKGL0jBu.json  U68vqVxcG.json  aAVGZfyyR.json  ftZ8EFx7K.json  k1pw-l-vx.json&amp;lt;/br&amp;gt;6BmMgCelq.md    IDKGL0jBu.md    U68vqVxcG.md    aAVGZfyyR.md    ftZ8EFx7K.md    k1pw-l-vx.md&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git switch -c &#39;test&#39;&amp;lt;/br&amp;gt;git: &#39;switch&#39; is not a git command. See &#39;git --help&#39;.&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git checkout -c &#39;test&#39;&amp;lt;/br&amp;gt;error: unknown switch `c&#39;&amp;lt;/br&amp;gt;usage: git checkout [&amp;lt;options&amp;gt;] &amp;lt;branch&amp;gt;&amp;lt;/br&amp;gt;   or: git checkout [&amp;lt;options&amp;gt;] [&amp;lt;branch&amp;gt;] -- &amp;lt;file&amp;gt;...&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    -q, --quiet           suppress progress reporting&amp;lt;/br&amp;gt;    -b &amp;lt;branch&amp;gt;           create and checkout a new branch&amp;lt;/br&amp;gt;    -B &amp;lt;branch&amp;gt;           create/reset and checkout a branch&amp;lt;/br&amp;gt;    -l                    create reflog for new branch&amp;lt;/br&amp;gt;    --detach              detach HEAD at named commit&amp;lt;/br&amp;gt;    -t, --track           set upstream info for new branch&amp;lt;/br&amp;gt;    --orphan &amp;lt;new-branch&amp;gt;&amp;lt;/br&amp;gt;                          new unparented branch&amp;lt;/br&amp;gt;    -2, --ours            checkout our version for unmerged files&amp;lt;/br&amp;gt;    -3, --theirs          checkout their version for unmerged files&amp;lt;/br&amp;gt;    -f, --force           force checkout (throw away local modifications)&amp;lt;/br&amp;gt;    -m, --merge           perform a 3-way merge with the new branch&amp;lt;/br&amp;gt;    --overwrite-ignore    update ignored files (default)&amp;lt;/br&amp;gt;    --conflict &amp;lt;style&amp;gt;    conflict style (merge or diff3)&amp;lt;/br&amp;gt;    -p, --patch           select hunks interactively&amp;lt;/br&amp;gt;    --ignore-skip-worktree-bits&amp;lt;/br&amp;gt;                          do not limit pathspecs to sparse entries only&amp;lt;/br&amp;gt;    --ignore-other-worktrees&amp;lt;/br&amp;gt;                          do not check if another worktree is holding the given ref&amp;lt;/br&amp;gt;    --recurse-submodules[=&amp;lt;checkout&amp;gt;]&amp;lt;/br&amp;gt;                          control recursive updating of submodules&amp;lt;/br&amp;gt;    --progress            force progress reporting&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git checkout -b &#39;test&#39;&amp;lt;/br&amp;gt;Switched to a new branch &#39;test&#39;&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# echo &amp;quot;test&amp;quot; &amp;gt; test&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git status&amp;lt;/br&amp;gt;On branch test&amp;lt;/br&amp;gt;Untracked files:&amp;lt;/br&amp;gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;        test&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git add test&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git commit -m &amp;quot;test&amp;quot;&amp;lt;/br&amp;gt;[test 26ac6b5] test&amp;lt;/br&amp;gt; 1 file changed, 1 insertion(+)&amp;lt;/br&amp;gt; create mode 100644 test&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --title &amp;quot;test pr&amp;quot; --body &amp;quot;$(cat test)&amp;quot;&amp;lt;/br&amp;gt;? Where should we push the &#39;test&#39; branch? Cancel&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git pr create --help&amp;lt;/br&amp;gt;git: &#39;pr&#39; is not a git command. See &#39;git --help&#39;.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;The most similar commands are&amp;lt;/br&amp;gt;        prune&amp;lt;/br&amp;gt;        var&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --help&amp;lt;/br&amp;gt;Create a pull request on GitHub.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;When the current branch isn&#39;t fully pushed to a git remote, a prompt will ask where&amp;lt;/br&amp;gt;to push the branch and offer an option to fork the base repository. Use `--head` to&amp;lt;/br&amp;gt;explicitly skip any forking or pushing behavior.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;A prompt will also ask for the title and the body of the pull request. Use `--title`&amp;lt;/br&amp;gt;and `--body` to skip this, or use `--fill` to autofill these values from git commits.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;Link an issue to the pull request by referencing the issue in the body of the pull&amp;lt;/br&amp;gt;request. If the body text mentions `Fixes #123` or `Closes #123`, the referenced issue&amp;lt;/br&amp;gt;will automatically get closed when the pull request gets merged.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;By default, users with write access to the base repository can push new commits to the&amp;lt;/br&amp;gt;head branch of the pull request. Disable this with `--no-maintainer-edit`.&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;USAGE&amp;lt;/br&amp;gt;  gh pr create [flags]&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;FLAGS&amp;lt;/br&amp;gt;  -a, --assignee login       Assign people by their login. Use &amp;quot;@me&amp;quot; to self-assign.&amp;lt;/br&amp;gt;  -B, --base branch          The branch into which you want your code merged&amp;lt;/br&amp;gt;  -b, --body string          Body for the pull request&amp;lt;/br&amp;gt;  -F, --body-file file       Read body text from file&amp;lt;/br&amp;gt;  -d, --draft                Mark pull request as a draft&amp;lt;/br&amp;gt;  -f, --fill                 Do not prompt for title/body and just use commit info&amp;lt;/br&amp;gt;  -H, --head branch          The branch that contains commits for your pull request (default: current branch)&amp;lt;/br&amp;gt;  -l, --label name           Add labels by name&amp;lt;/br&amp;gt;  -m, --milestone name       Add the pull request to a milestone by name&amp;lt;/br&amp;gt;      --no-maintainer-edit   Disable maintainer&#39;s ability to modify pull request&amp;lt;/br&amp;gt;  -p, --project name         Add the pull request to projects by name&amp;lt;/br&amp;gt;      --recover string       Recover input from a failed run of create&amp;lt;/br&amp;gt;  -r, --reviewer handle      Request reviews from people or teams by their handle&amp;lt;/br&amp;gt;  -t, --title string         Title for the pull request&amp;lt;/br&amp;gt;  -w, --web                  Open the web browser to create a pull request&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;INHERITED FLAGS&amp;lt;/br&amp;gt;      --help                     Show help for command&amp;lt;/br&amp;gt;  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;EXAMPLES&amp;lt;/br&amp;gt;  $ gh pr create --title &amp;quot;The bug is fixed&amp;quot; --body &amp;quot;Everything works again&amp;quot;&amp;lt;/br&amp;gt;  $ gh pr create --reviewer monalisa,hubot  --reviewer myorg/team-name&amp;lt;/br&amp;gt;  $ gh pr create --project &amp;quot;Roadmap&amp;quot;&amp;lt;/br&amp;gt;  $ gh pr create --base develop --head monalisa:feature&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;LEARN MORE&amp;lt;/br&amp;gt;  Use &#39;gh &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; --help&#39; for more information about a command.&amp;lt;/br&amp;gt;  Read the manual at https://cli.github.com/manual&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --title &amp;quot;test pr&amp;quot; --body &amp;quot;$(cat test)&amp;quot;&amp;lt;/br&amp;gt;? Where should we push the &#39;test&#39; branch? Ariyn/blog&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;Creating pull request for test into master in Ariyn/blog&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# ^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# ^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# ^C&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --title &amp;quot;test pr&amp;quot; --body &amp;quot;$(cat test)&amp;quot; -B master&amp;lt;/br&amp;gt;? Where should we push the &#39;test&#39; branch? Cancel&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git push&amp;lt;/br&amp;gt;fatal: The current branch test has no upstream branch.&amp;lt;/br&amp;gt;To push the current branch and set the remote as upstream, use&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;    git push --set-upstream origin test&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# git push --set-upstream origin test&amp;lt;/br&amp;gt;Counting objects: 3, done.&amp;lt;/br&amp;gt;Delta compression using up to 8 threads.&amp;lt;/br&amp;gt;Compressing objects: 100% (2/2), done.&amp;lt;/br&amp;gt;Writing objects: 100% (3/3), 264 bytes | 264.00 KiB/s, done.&amp;lt;/br&amp;gt;Total 3 (delta 1), reused 0 (delta 0)&amp;lt;/br&amp;gt;remote: Resolving deltas: 100% (1/1), completed with 1 local object.&amp;lt;/br&amp;gt;remote: This repository moved. Please use the new location:&amp;lt;/br&amp;gt;remote:   git@github.com:Ariyn/blog.git&amp;lt;/br&amp;gt;remote:&amp;lt;/br&amp;gt;remote: Create a pull request for &#39;test&#39; on GitHub by visiting:&amp;lt;/br&amp;gt;remote:      https://github.com/Ariyn/blog/pull/new/test&amp;lt;/br&amp;gt;remote:&amp;lt;/br&amp;gt;To github.com-ariyn:ariyn/blog.git&amp;lt;/br&amp;gt; * [new branch]      test -&amp;gt; test&amp;lt;/br&amp;gt;Branch &#39;test&#39; set up to track remote branch &#39;test&#39; from &#39;origin&#39;.&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --title &amp;quot;test pr&amp;quot; --body &amp;quot;$(cat test)&amp;quot; -B master&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;Creating pull request for test into master in Ariyn/blog&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;https://github.com/Ariyn/blog/pull/2&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog# gh pr create --title &amp;quot;test pr&amp;quot; --body &amp;quot;$(cat test)&amp;quot; -B master&amp;lt;/br&amp;gt;a pull request for branch &amp;quot;test&amp;quot; into branch &amp;quot;master&amp;quot; already exists:&amp;lt;/br&amp;gt;https://github.com/Ariyn/blog/pull/2&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog#&amp;lt;/br&amp;gt;root@a20159f93870:/roam/blog#&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 삭제가 안됨
&lt;ul&gt;
&lt;li&gt;파일을 수정하거나, 추가하는것은 가능&lt;/li&gt;
&lt;li&gt;하지만 git pull 이후, write만 하다보니, 삭제된 파일은 계속 남아있음.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git pull &amp;amp;&amp;amp; rm blog/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이렇게 해서 모든 파일을 지우고 다시 쓸 수 있도록 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;최종적으로는 파일 자체를 go app에서 구분해야 할 듯
&lt;ul&gt;
&lt;li&gt;이게 존재하는 파일인지 아닌지&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;코드
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javascript&amp;lt;/br&amp;gt;function getBlogTags() {&amp;lt;/br&amp;gt;    titles = window.roamAlphaAPI.q(`[&amp;lt;/br&amp;gt;		:find ?title&amp;lt;/br&amp;gt;		:where&amp;lt;/br&amp;gt;			[?node :node/title ?title]&amp;lt;/br&amp;gt;			[?e :node/title]&amp;lt;/br&amp;gt;		]`)&amp;lt;/br&amp;gt;	blogTags = []&amp;lt;/br&amp;gt;  &amp;lt;/br&amp;gt;    for(var i in titles) {&amp;lt;/br&amp;gt;        if(titles[i][0].indexOf(&amp;quot;블로그&amp;quot;) == 0) {&amp;lt;/br&amp;gt;            blogTags.push(titles[i][0]);&amp;lt;/br&amp;gt;        }&amp;lt;/br&amp;gt;    }&amp;lt;/br&amp;gt;    return blogTags&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;function getPages(tag) { // need to collect pages which has tags at the end only.&amp;lt;/br&amp;gt;    return window.roamAlphaAPI.q(`[&amp;lt;/br&amp;gt;  :find ?text ?child_uid&amp;lt;/br&amp;gt;  :in $ ?title&amp;lt;/br&amp;gt;  :where&amp;lt;/br&amp;gt;  [?page :block/uid ?uid]&amp;lt;/br&amp;gt;  [?page :node/title ?title]&amp;lt;/br&amp;gt;  [?e :block/refs ?page]&amp;lt;/br&amp;gt;  [?e :block/string ?text]&amp;lt;/br&amp;gt;  [?e :block/uid ?child_uid]&amp;lt;/br&amp;gt;]`, tag);&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;function getTotalBlocks(uid) {&amp;lt;/br&amp;gt;    rule = `[&amp;lt;/br&amp;gt;	[&amp;lt;/br&amp;gt;		(ancestor ?child ?parent)&amp;lt;/br&amp;gt;		[?parent :block/children ?child]&amp;lt;/br&amp;gt;	]&amp;lt;/br&amp;gt; 	[&amp;lt;/br&amp;gt;		(ancestor ?child ?grand_parent)&amp;lt;/br&amp;gt; 		[?parent :block/children ?child]&amp;lt;/br&amp;gt; 		(ancestor ?parent ?grand_parent)&amp;lt;/br&amp;gt;	]&amp;lt;/br&amp;gt;]`&amp;lt;/br&amp;gt;    block_info = window.roamAlphaAPI.q(`[&amp;lt;/br&amp;gt;		:find ?ancestor_uid ?block_string ?block_uid ?parent_uid ?order&amp;lt;/br&amp;gt;		:in $ ?ancestor_uid % &amp;lt;/br&amp;gt;		:where&amp;lt;/br&amp;gt;            [?ancestor :block/uid ?ancestor_uid]&amp;lt;/br&amp;gt;            [?block :block/string ?block_string]&amp;lt;/br&amp;gt;            [?block :block/uid ?block_uid]&amp;lt;/br&amp;gt;            [?block :block/order ?order]&amp;lt;/br&amp;gt;            [?parent :block/children ?block]&amp;lt;/br&amp;gt;            [?parent :block/uid ?parent_uid]&amp;lt;/br&amp;gt;            (ancestor ?block ?ancestor)&amp;lt;/br&amp;gt;]`&amp;lt;/br&amp;gt;      ,uid, rule);&amp;lt;/br&amp;gt;//alignment, heading, children-view-type&amp;lt;/br&amp;gt;    return block_info&amp;lt;/br&amp;gt;}&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;function getEveryFields(uid) {&amp;lt;/br&amp;gt;  return window.roamAlphaAPI.q(&#39;[ :find (pull ?e [*]) :in $ ?uid :where [?e :block/uid ?uid]]&#39;, uid)&amp;lt;/br&amp;gt;}&lt;/code&gt; #plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/nxtca5ebc/</guid>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>생각의 도구를 컴퓨터공학 도메인에 맞춰서 정리해야 한다</title>
      <link>https://ariyn.github.io/posts/idkgl0jbu/</link>
      <description>&lt;ul&gt;
&lt;li&gt;그래야 내 생각이 내 전문성을 사용해서 뻗어나갈 수 있다.&lt;/li&gt;
&lt;li&gt;좋은 예시) &lt;a href=&#34;https://johngrib.github.io/wiki/cleaning-tile-cycle/&#34;&gt;https://johngrib.github.io/wiki/cleaning-tile-cycle/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;물때를 언제 청소할 것인가에 대한 간단한 생각에서 출발한다.&lt;!-- raw HTML omitted --&gt;그러나 물때를 청소하는 것에 대한 요구사항(?)을 Threshold로 명명한다.&lt;!-- raw HTML omitted --&gt;이름을 threshold로 명명하고 나니, cs에서 사용하는 접근방법들이 같이 떠오르고, 이를 사용해서 문제를 해결한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plain text&amp;lt;/br&amp;gt;자동 GC라면 기계가 되었던 사람이 되었건 항상 누군가가 대기하여 threshold를 감지하고 일정 영역을 청소할 준비를 해놔야 한다. &#39;처리량(throughput)&#39;과 &#39;짧은 일시 정지 시간&#39;이 상충한다는 GC의 상식을 떠올려본다.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;나라면 &amp;ldquo;더러움에 대한 역치&amp;quot;라는 단어를 사용 했을 것이다.&lt;!-- raw HTML omitted --&gt;이 단어는 현상을 훌륭하게 설명하지만, 생물학적인 지식이 부족하기 때문에 내 전문성이 적용되기 어려운 단어이다.&lt;!-- raw HTML omitted --&gt;따라서 역치 대신 threshold를 사용했다면 적어도 비슷한 방식으로 문제에 접근할 첫번째 스텝이 되었을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이런식으로 생각하는 단어들을 &amp;ldquo;내 전문성이 높은 영역에서 사용하는 단어&amp;quot;로 치환하면 &amp;ldquo;나의 다른 분야의 지식&amp;quot;이 해당 문제를 해결하는데 도움을 줄 수 있을것이다.&lt;/li&gt;
&lt;li&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;어떻게 보면 &amp;ldquo;어려운 문제를 간단하게 치환한다&amp;quot;라는 일반적인 방법과 반대로 보인다.&lt;!-- raw HTML omitted --&gt;&amp;ldquo;간단한 문제를 어려운 문제로 치환한다&amp;quot;가 되는 것인데, 여기에는 두가지 이점이 있다.
&lt;ol&gt;
&lt;li&gt;어려운 문제가 &amp;ldquo;내가 전문성이 높기 때문에 풀 수 있는 문제&amp;quot;가 된다.&lt;!-- raw HTML omitted --&gt;내가 전문성이 높은 영역에서는 풀이법을 몰라도, 어떻게 접근해야 하는지 알 수 있다. (혹은 검색 방법이라도!)&lt;/li&gt;
&lt;li&gt;내 전문성의 영역에서 어려운 문제는 이미 답변들이 존재한다.&lt;!-- raw HTML omitted --&gt;&lt;code&gt;화장실 청소를 효율적으로 하는 전략&lt;/code&gt;은 명확한 해답이 존재한다고 할 수 없다.&lt;!-- raw HTML omitted --&gt;그러나 &lt;code&gt;걸리는 시간이 긴 로직을 효율적으로 실행하는 전략&lt;/code&gt;은 여럿 있을 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;추가적으로 단순히 &lt;code&gt;(...) 로직을 효율적으로 실행하는 전략&lt;/code&gt;으로 생각하면 명확한 답에 도달하지 못할 것같다.&lt;!-- raw HTML omitted --&gt;이 문장은 중간 단계로 더 구체적인 문장이 되어야 한다.&lt;!-- raw HTML omitted --&gt;화장실 청소를 JVM의 stop the world로 비유한다면, &lt;code&gt;JVM에서 worldstop을 줄이기 위해 어떤 전략을 사용하는가?&lt;/code&gt;라는 물음에 답하면 된다.&lt;!-- raw HTML omitted --&gt;(그리고 이 물음에 대한 답은 인터넷에 충분하다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만약 내가 화장실 청소에 대한 전문성이 높다면, 단순히 &lt;code&gt;화장실 청소를 전략적으로 하는 방법&lt;/code&gt;이라는 문장으로도 충분히 답을 낼 수 있을 것.&lt;!-- raw HTML omitted --&gt;그러나 나는 화장실 청소에 전문성이 없고, 앞으로도 없을 것이다.&lt;!-- raw HTML omitted --&gt;이후에도 수많은 영역에서 물음들이 발생할 것이 분명하기 때문에, &lt;code&gt;현재의 문제를 컴퓨터 공학으로 치환해서 정답을 알아내는 것&lt;/code&gt;의 능력을 키우는 것이 효율적일 것이다.&lt;/li&gt;
&lt;li&gt;아이러니 하지만, &lt;code&gt;컴퓨터 공학의 전문성만 올라가는 것으로도 더 넓은 영역의 문제들을 해결할 수 있다&lt;/code&gt;는게 재미있는 생각인 것 같다.
&lt;ul&gt;
&lt;li&gt;아주 당연히 &lt;code&gt;당면한 문제를 컴퓨터공학의 문제로 치환하는 능력&lt;/code&gt; 또한 같이 존재해야만 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/idkgl0jbu/</guid>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>do-release-upgrade -f DistUpgradeViewNonInteractive</title>
      <link>https://ariyn.github.io/posts/u68vqvxcg/</link>
      <description>&lt;ul&gt;
&lt;li&gt;이렇게 하면, Non-interactive로 kernel 업그레이드 가능함.&lt;/li&gt;
&lt;li&gt;nohup 붙여서 사용하자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>https://ariyn.github.io/posts/u68vqvxcg/</guid>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
    </item>
    
  </channel>
</rss>
